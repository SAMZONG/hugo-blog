[{"categories":null,"content":" 1. 背景除了在 Hexo 维护个人博客之外，目前经常用到的 2 个文档工具： 语雀和 Mkdocs 都是支持 admonition样式，所以也在考虑如何给 Hexo 博客文章也增加这样的能力。 保证写作习惯的一致性，好在有人开发出对应的插件，感谢. https://github.com/lxl80/hexo-admonition ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:1:0","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#背景"},{"categories":null,"content":" 2. 安装方式简单通过 2 个步骤即可， ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:2:0","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#安装方式"},{"categories":null,"content":" 2.1 安装插件采用 npm 安装，如下： npm install hexo-admonition --save ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:2:1","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#安装插件"},{"categories":null,"content":" 2.2 样式配置你的 hexo 可能会使用不同主题，所以需要自己增加样式，将如下样式放入 hexo 主题的自定义样式文件中（如：ext.css），并按自己喜好修改： .admonition { margin: 1.5625em 0; padding: .6rem; overflow: hidden; font-size: .64rem; page-break-inside: avoid; border-left: .3rem solid #42b983; border-radius: .3rem; box-shadow: 0 0.1rem 0.4rem rgba(0,0,0,.05), 0 0 0.05rem rgba(0,0,0,.1); background-color: #fafafa; } p.admonition-title { position: relative; margin: -.6rem -.6rem .8em -.6rem !important; padding: .4rem .6rem .4rem 2.5rem; font-weight: 700; background-color:rgba(66, 185, 131, .1); } .admonition-title::before { position: absolute; top: .9rem; left: 1rem; width: 12px; height: 12px; background-color: #42b983; border-radius: 50%; content: ' '; } .info\u003e.admonition-title, .todo\u003e.admonition-title { background-color: rgba(0,184,212,.1); } .warning\u003e.admonition-title, .attention\u003e.admonition-title, .caution\u003e.admonition-title { background-color: rgba(255,145,0,.1); } .failure\u003e.admonition-title, .missing\u003e.admonition-title, .fail\u003e.admonition-title, .error\u003e.admonition-title { background-color: rgba(255,82,82,.1); } .admonition.info, .admonition.todo { border-color: #00b8d4; } .admonition.warning, .admonition.attention, .admonition.caution { border-color: #ff9100; } .admonition.failure, .admonition.missing, .admonition.fail, .admonition.error { border-color: #ff5252; } .info\u003e.admonition-title::before, .todo\u003e.admonition-title::before { background-color: #00b8d4; border-radius: 50%; } .success\u003e.admonition-title::before{ background-color: #00c853; border-radius: 50%; } .warning\u003e.admonition-title::before, .attention\u003e.admonition-title::before, .caution\u003e.admonition-title::before { background-color: #ff9100; border-radius: 50%; } .failure\u003e.admonition-title::before,.missing\u003e.admonition-title::before,.fail\u003e.admonition-title::before,.error\u003e.admonition-title::before{ background-color: #ff5252;; border-radius: 50%; } .admonition\u003e:last-child { margin-bottom: 0 !important; } ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:2:2","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#样式配置"},{"categories":null,"content":" 3. 使用说明Hexo-admonition 遵循一种简单的语法：每个块都以 !!! 开头，然后是代表提示类型的关键字（type）及标题（title）。例如: !!! note Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 note，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 在 Hexo 渲染前，将被转换成如下内容： \u003cdiv class=\"admonition note \"\u003e \u003cp class=\"admonition-title\"\u003eHexo-admonition 插件使用示例\u003c/p\u003e \u003cp\u003e这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 note，并设置了自定义标题。\u003c/p\u003e \u003cp\u003e提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。\u003c/p\u003e \u003c/div\u003e 最终呈现效果如下： !!! note Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 note，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:3:0","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#使用说明"},{"categories":null,"content":" 3.1 支持的类型提示类型 type 将用作 CSS 类名称，暂支持如下类型： note info, todo warning, attention, caution error, failure, missing, fail ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:3:1","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#支持的类型"},{"categories":null,"content":" 3.2 设置/隐藏标题标题 title 是可选的，当未设置时，将以 type 作为默认值: !!! warning 这是一条采用默认标题的警告信息。 效果如下： !!! warning 这是一条采用默认标题的警告信息。 如果不想显示标题，可以将 title 设置为 \"\"： !!! Warning \"\" 这是一条不带标题的警告信息。 效果如下： !!! Warning \"\" 这是一条不带标题的警告信息。 ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:3:2","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#设置隐藏标题"},{"categories":null,"content":" 4. 卡片演示 主要四种类型：info, warning, error, note !!! note Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 note，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 !!! warning Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 warning，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 !!! error Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 error，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 !!! info Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 info，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 !!! todo Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 todo，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 !!! attention Hexo-admonition 插件使用示例 这是基于 hexo-admonition 插件渲染的一条提示信息。类型为 attention，并设置了自定义标题。 提示内容开头留 4 个空格，可以有多行，最后用空行结束此标记。 ","date":"2022-05-28","objectID":"https://samzong.me/hexo-admonition/:4:0","series":null,"tags":["Hexo"],"title":"Hexo 增加admonition样式支持","uri":"https://samzong.me/hexo-admonition/#卡片演示"},{"categories":null,"content":" 1. Minikube在 Mac 上搭建开发环境，这里主要使用了 Kubernetes 官方推荐的 minikube 和 docker-for-desktop 环境 minikube start --image-mirror-country cn \\ --registry-mirror=https://vbj8usl3.mirror.aliyuncs.com ","date":"2022-05-17","objectID":"https://samzong.me/%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-macos-k8s-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:0","series":null,"tags":["K8s"],"title":"国内环境搭建 MacOS K8s 开发环境","uri":"https://samzong.me/%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-macos-k8s-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#minikube"},{"categories":null,"content":" 1. 背景说明MacOS Dock 栏的空间是有限的，而且绝大部分应用都会占用一个 Dock 的槽位；但并不是所有软件都提供了 Hidden in Dock 的能力，所以从来不点击，但一直存在，挺痛苦的。 为不具备隐藏 Dock Icon 的应用附加隐藏能力 符合这类特征的软件： a. 常驻应用，开机自启动，基本不会打开； b. 像我这样的 Alfred 爱好者 之前了解到一些软件对系统的影响都比较大，基本上都是要接管 整个Dock，要关闭 SIP，使用成本太好，基本不值得采用。 ","date":"2022-05-07","objectID":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/:1:0","series":null,"tags":["mac"],"title":"MacOS隐藏Dock栏中特定应用","uri":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/#背景说明"},{"categories":null,"content":" 2. 全球同性交友网站下午在闲逛的时候，发现了这个仓库： https://github.com/FirePanther/MacOS-Hide-Dock-Icon ，一个非常简单的 PHP 脚本，貌似可以提供这个能力，于是我就简单的 Download ，按照 README.md 的方法执行了一下。 很神奇的！ 满足了我的需求！ 所以，我在这里记录和分享给大家，如果你也需要的话。 ","date":"2022-05-07","objectID":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/:2:0","series":null,"tags":["mac"],"title":"MacOS隐藏Dock栏中特定应用","uri":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/#全球同性交友网站"},{"categories":null,"content":" 3. 操作步骤 当然，你也可以直接 从这切换到 官方仓库的 README.md 去操作 # 下载 脚本文件 ➜ ~ wget https://raw.githubusercontent.com/FirePanther/MacOS-Hide-Dock-Icon/master/hideDockIcon.php -O hideDockIcon.php # 备份地址 ➜ ~ wget https://raw.githubusercontent.com/SAMZONG/MacOS-Hide-Dock-Icon/master/hideDockIcon.php -O hideDockIcon.php 确保你的 Mac 内装有 PHP brew install php # just one command 接下就是操作步骤了： 在此之前，你需要完全退出被隐藏的软件** 下方是脚本的执行过程： ➜ ~ sudo php hideDockIcon.php App name: BaiduNetdisk_mac Cracking app BaiduNetdisk_mac Info.plist successfully injected Signing ------ /Applications/BaiduNetdisk_mac.app: replacing existing signature ------ Finished # 看到这个就是成功了 执行成功后，再次打开App，App会先在Dock栏跳动加载，加载完后图标自动消失，但App依旧在运行。 以上，你就成功的隐藏这个需要的软件，经过在测试，脚本的健壮性很好: 支持的 PC : 2022 年 M1 Max MacOS12.3.1 ","date":"2022-05-07","objectID":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/:3:0","series":null,"tags":["mac"],"title":"MacOS隐藏Dock栏中特定应用","uri":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/#操作步骤"},{"categories":null,"content":" 4. 注意事项","date":"2022-05-07","objectID":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/:4:0","series":null,"tags":["mac"],"title":"MacOS隐藏Dock栏中特定应用","uri":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/#注意事项"},{"categories":null,"content":" 4.1 确认对的 App Name ","date":"2022-05-07","objectID":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/:4:1","series":null,"tags":["mac"],"title":"MacOS隐藏Dock栏中特定应用","uri":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/#确认对的-app-name"},{"categories":null,"content":" 4.2 恢复被隐藏的应用首先 \u003e 还是要退出App，这时Dock栏也不显示了，菜单栏也没有，所以不好使用 邮件退出的方式，那么接下来我们要找到下方这个软件： 打开软件后，等待加载完成，通过搜索窗口利用 App name 找到被隐藏的软件 然后使用上方的，X 关闭按钮，在弹窗中，选择 Quit 然后 \u003e 再去执行下 hideDockIcon.php 这个脚本: ➜ sudo php hideDockIcon.php Password: App name: BaiduNetDisk_mac Cracking app BaiduNetDisk_mac This app should be invisible in the Dock Would you like to show it? (y/n) y Info.plist successfully injected Signing ------ /Applications/BaiduNetDisk_mac.app: replacing existing signature ------ Finished 然后再次启动 App，那么就会出现在 Dock 栏并且不再隐藏 ","date":"2022-05-07","objectID":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/:4:2","series":null,"tags":["mac"],"title":"MacOS隐藏Dock栏中特定应用","uri":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/#恢复被隐藏的应用"},{"categories":null,"content":" 5. 结语没事儿还是要逛逛 Github ","date":"2022-05-07","objectID":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/:5:0","series":null,"tags":["mac"],"title":"MacOS隐藏Dock栏中特定应用","uri":"https://samzong.me/macos%E9%9A%90%E8%97%8Fdock%E6%A0%8F%E4%B8%AD%E7%89%B9%E5%AE%9A%E5%BA%94%E7%94%A8/#结语"},{"categories":null,"content":" 1. 组合三件套 Mkdocs # 热门的静态博客框架 Mkdocs-material # Mkdocs 颜值担当的主题 MkDocs Awesome Pages Plugin # Mkdocs 动态的 Navgation 插件 ","date":"2022-05-06","objectID":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/:1:0","series":null,"tags":["随笔"],"title":"满足预期的文档站 Mkdocs","uri":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/#组合三件套"},{"categories":null,"content":" 1.1 依赖的插件 pip install mkdocs pip install mkdocs-material pip install mkdocs-git-revision-date-plugin pip install mkdocs-mermaid2-plugin pip install mkdocs-rss-plugin pip install mkdocs-minify-plugin pip install mkdocs-macros-plugin pip install mkdocs-git-revision-date-localized-plugin pip install mkdocs-awesome-pages-plugin ","date":"2022-05-06","objectID":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/:1:1","series":null,"tags":["随笔"],"title":"满足预期的文档站 Mkdocs","uri":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/#依赖的插件"},{"categories":null,"content":" 1.2 Github repoPrivate Teamplate https://github.com/SAMZONG/mkdocs-template ","date":"2022-05-06","objectID":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/:1:2","series":null,"tags":["随笔"],"title":"满足预期的文档站 Mkdocs","uri":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/#github-repo"},{"categories":null,"content":" 1.3 Awesome Plugin 常用参数 在文档内的路径展示 ```sh docs ├── .pages.yaml # 站点顶部导航配置文件，控制顺序和名称，一般不增加 ├── README.md # 默认情况下 目录下 README.md 作为 default 页面 ├── SUMMARY.md ├── dce5.0 # 子文件夹，支持多级目录，自动检测配置 │ ├── .pages.yaml │ ├── 01kpanda.md # 子文件自动检测，可以通过文件名前缀数字控制排序 │ ├── 02ghippo.md │ ├── 03clusterpedia.md │ ├── ... ├── design │ ├── .pages.yaml # 每个目录下都有一个 `.pages.yaml` 用来进行目录的配置 │ ├── README.md │ ├── ... 通过对每个文件下的特定处理，默认情况下 .pages.yaml 为空即可，如需要特殊处理，可以在文档添加下方参数: title: Products # 文件夹展示的标题 order: 1 # 文件夹的顺序，数字越小越靠前 hide: false # 是否隐藏，默认不隐藏 nav: # 采用自定义导航 - filename.md - filename2.md - ... nav 的配置方式，还有更多高级用法，可以参考插件做的的 Github 介绍 传送门 ","date":"2022-05-06","objectID":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/:1:3","series":null,"tags":["随笔"],"title":"满足预期的文档站 Mkdocs","uri":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/#awesome-plugin-常用参数"},{"categories":null,"content":" 2. mkdocs.yaml 的配置变更 不要设定 nav OR page 在 plugin 增加下方配置 plugins: - awesome-pages: filename: .pages.yaml collapse_single_pages: true strict: false ","date":"2022-05-06","objectID":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/:2:0","series":null,"tags":["随笔"],"title":"满足预期的文档站 Mkdocs","uri":"https://samzong.me/%E6%BB%A1%E8%B6%B3%E9%A2%84%E6%9C%9F%E7%9A%84%E6%96%87%E6%A1%A3%E7%AB%99-mkdocs/#mkdocsyaml-的配置变更"},{"categories":["mac"],"content":" 1. Alfred 介绍Alfred 是 Mac 上一款著名的效率应用，强大的功能和众多的扩展能让你在实际操作中大幅提升工作效率，网络上也有大量关于的 Alfred 的评测和技巧的文章。 ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:1:0","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#alfred-介绍"},{"categories":["mac"],"content":" 2. Workflow 介绍Workflow 工作流；将一件事情的多个步骤，通过一个的规则相连，并依次执行，最终完成，这个方式就是工作流； Alfred Workflow 就是一个将我们日常工作流 实现的一个工具，可以让我们在 Alfred 中更加方便的完成我们的工作；现实生活中的工作流可能更为复杂，但本质还是如此。正是基于这种现实背景，alfred 从 2.0 版本起加入了 workflow，简单的示例说明。 ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:2:0","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#workflow-介绍"},{"categories":["mac"],"content":" 3. 我的推荐整理常用的一些 Workflow 分享, 提高工作和生活的效率小技巧。 ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:3:0","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#我的推荐"},{"categories":["mac"],"content":" 3.1 5 星推荐 https://www.packal.org/workflow/timezones-2 https://www.packal.org/workflow/homebrew-and-cask-alfred https://www.packal.org/workflow/mac-app-store-search https://github.com/xiaotu9639/alfred-yuque-workflow https://github.com/whyliam/whyliam.workflows.youdao 有道翻译 zhiyu_id: 12ba82650be566f5 zhiyu_key:XWkQjLboE4llgQuWZMR1e0d03Au9w8ob ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:3:1","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#5-星推荐"},{"categories":["mac"],"content":" 3.2 4 星推荐 https://www.packal.org/workflow/alfred-markdown-table https://www.packal.org/workflow/pretty-json https://www.packal.org/workflow/who ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:3:2","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#4-星推荐"},{"categories":["mac"],"content":" 4. 如何获取 Workflow ?可以到这个网站 https://www.packal.org/ 有非常丰富的 Workflow 或者 主题可以选择，丰富你的 Alfred 使用 如果你有能力制作一些优秀的 Workflow ，也可以在这里分享 ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:4:0","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#如何获取-workflow-"},{"categories":["mac"],"content":" 5. 更多关于 Alfred 的使用教程网络上已经有大量的 视频和文本的使用教程了，所以我这里直接引用我学习时使用的教程 ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:5:0","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#更多关于-alfred-的使用教程"},{"categories":["mac"],"content":" 6. 视频教程 ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:6:0","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#视频教程"},{"categories":["mac"],"content":" 7. 文本教程程序员的macOS系列：高效Alfred进阶 同时，也推荐下这位优秀博主，如果关注 iOS 开发，可以关注他更新的内容 ","date":"2022-05-03","objectID":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/:7:0","series":null,"tags":["mac"],"title":"Alfred Workflow 推荐","uri":"https://samzong.me/alfred-workflow-%E6%8E%A8%E8%8D%90/#文本教程"},{"categories":["Tools"],"content":" 截止 2022.5 youtube-dl 已经较长时间未更新了，建议采用 yt-dlp, 将命令进行替换即可 ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:0:0","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#"},{"categories":["Tools"],"content":" 1. 安装新版本的 yt-dlp brew install yt-dlp/taps/yt-dlp yt-dlp 是从 youtube-dl 分支出来的版本，提供持续更新和向前兼容，在友好型上做了优化；仅需要将所有安装命令中 youtube-dl 替换为 yt-dlp 如果你还是喜欢使用 youtube-dl，可以使用以下命令将程序默认替换，同时不影响你的使用: ➜ ~ alias youtube-dl=yt-dlp ➜ ~ echo \"alias youtube-dl=yt-dlp\" \u003e\u003e ~/.zshrc # or ~/.bashrc ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:1:0","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#安装新版本的-yt-dlp"},{"categories":["Tools"],"content":" 2. youtube-dl 下载 YouTube 视频视频下载命令行工具里，网友推荐通常都是『国外视频用 youtube-dl』，有这两个工具国内外主流视频网站的视频基本就横扫了，适合想收藏或者喜欢下载后用本地播放器的 Geek 群体。 youtube-dl 命令行工具本身其实不复杂，理解了它们的语法就能开始使用了，结合 Alfred 还可以把常用的命令设置成触发的动作，提升交互体验和效率。然而很多人一看网站的介绍估计和我最初的感受差不多，还要部署一堆使用环境啊。 ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:2:0","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#youtube-dl-下载-youtube-视频"},{"categories":["Tools"],"content":" 3. Xcode 的命令行工具Homebrew 环境安装前先检查一下 Xcode 的命令行工具是否已经安装，如果 macOS 系统更新过可能也需要重新安装一次，「终端」（应用程序 - 实用工具 - 终端）中输入 xcode-select --install。 ➜ ~ xcode-select --install xcode-select: error: command line tools are already installed, use \"Software Update\" to install updates ➜ ~ 先前配置时已经安装过 Xcode 命令行工具，所以会出现上面的提示信息。 ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:3:0","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#xcode-的命令行工具"},{"categories":["Tools"],"content":" 4. Homebrew 依赖Homebrew 是一个macOS 上的软件包管理工具，通过命令行的方式安装和卸载软件，大部分的流行软件都提供了 Homebrew 的安装方式，也是开源世界里安装和更新软件的主流方式； ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:4:0","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#homebrew-依赖"},{"categories":["Tools"],"content":" 4.1 Homebrew只需要在联网的情况下运行一行命令： /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 更多关于 Homebrew 的使用相关，可以查看我的另一篇文章 Mac 下 Homebrew 的使用 ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:4:1","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#homebrewhttpsbrewshindex_zh-cnhtml"},{"categories":["Tools"],"content":" 5. 安装 youtube-dl上面刚学习到的命令可以先用起来，先看看 youtube-dl 的软件信息，在终端里输入 brew info youtube-dl，了解一下 youtube-dl 的依存环境和需要搭档的其他应用。 从终端运行的反馈能看到，youtube-dl 的使用环境是 Python3，合并视频片断还会用到 ffmpeg 这个组件，也就是说安装完 youtube-dl，还要再运行一次 brew install ffmpeg brew install youtube-dl brew install ffmpeg ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:5:0","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#安装-youtube-dl"},{"categories":["Tools"],"content":" 6. youtube-dl 的基本用法前 3 步结束已经可以用命令行下载视频了，这里介绍几个常用的命令，更多的命令用法在官网都有介绍 ，查看 Github 更全的操作指引 Document ➜ ~ youtube-dl -h | grep Options Options: General Options: Network Options: Download Options: Filesystem Options: Thumbnail Options: Verbosity / Simulation Options: Video Format Options: Subtitle Options: Authentication Options: Adobe Pass Options: Post-processing Options: ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:6:0","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#youtube-dl-的基本用法"},{"categories":["Tools"],"content":" 6.1 导出视频指定文件名称 youtube-dl https://www.youtube.com/watch?v=Ga4UCK627nU -o \"~/Downloads/aaa.mp4\" youtube-dl 还提供了 一些变量的方式，可以作用在文件名上，比较常用的如下： # %(title)s.%(ext)s 则是指定了文件名的格式，%(title)s 是视频的标题，%(ext)s 则是视频的文件扩展名 youtube-dl https://www.youtube.com/watch?v=Ga4UCK627nU -o \"~/Downloads/%(title)s.%(ext)s\" 通过 视频名.扩展名 这样可以规范化导出文档的名称；还有其他非常丰富的变量支持，可以去这里找到你想要的 Output Template ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:6:1","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#导出视频指定文件名称"},{"categories":["Tools"],"content":" 6.2 查询视频支持的版本导出的画质不如意，希望自定义导出画质，可以采用这个方式，使用 -F 查看视频资源支持的类型，通过 -f 指定对应的版本进行下载 ➜ ~ youtube-dl -F https://www.youtube.com/watch\\?v\\=BYkHLlKFEsM [youtube] BYkHLlKFEsM: Downloading webpage [info] Available formats for BYkHLlKFEsM: format code extension resolution note 249 webm audio only tiny 53k , webm_dash container, opus @ 53k (48000Hz), 2.44MiB 250 webm audio only tiny 70k , webm_dash container, opus @ 70k (48000Hz), 3.22MiB 140 m4a audio only tiny 129k , m4a_dash container, mp4a.40.2@129k (44100Hz), 5.93MiB 251 webm audio only tiny 136k , webm_dash container, opus @136k (48000Hz), 6.27MiB 160 mp4 256x144 144p 32k , mp4_dash container, avc1.4d400c@ 32k, 30fps, video only, 1.48MiB 278 webm 256x144 144p 75k , webm_dash container, vp9@ 75k, 30fps, video only, 3.45MiB 133 mp4 426x240 240p 48k , mp4_dash container, avc1.4d4015@ 48k, 30fps, video only, 2.21MiB 242 webm 426x240 240p 76k , webm_dash container, vp9@ 76k, 30fps, video only, 3.51MiB 134 mp4 638x360 360p 80k , mp4_dash container, avc1.4d401e@ 80k, 30fps, video only, 3.70MiB 243 webm 638x360 360p 115k , webm_dash container, vp9@ 115k, 30fps, video only, 5.28MiB 135 mp4 852x480 480p 120k , mp4_dash container, avc1.4d401f@ 120k, 30fps, video only, 5.50MiB 244 webm 852x480 480p 161k , webm_dash container, vp9@ 161k, 30fps, video only, 7.41MiB 136 mp4 1278x720 720p 217k , mp4_dash container, avc1.4d401f@ 217k, 30fps, video only, 9.97MiB 247 webm 1278x720 720p 273k , webm_dash container, vp9@ 273k, 30fps, video only, 12.52MiB 248 webm 1916x1080 1080p 896k , webm_dash container, vp9@ 896k, 30fps, video only, 41.01MiB 137 mp4 1916x1080 1080p 923k , mp4_dash container, avc1.640028@ 923k, 30fps, video only, 42.24MiB 18 mp4 638x360 360p 350k , avc1.42001E, 30fps, mp4a.40.2 (44100Hz), 16.07MiB (best) ➜ ~ youtube-dl -f 137 https://www.youtube.com/watch\\?v\\=BYkHLlKFEsM # 下载对应的 format code ➜ ~ youtube-dl -f best https://www.youtube.com/watch\\?v\\=BYkHLlKFEsM # 下载最佳的版本 ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:6:2","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#查询视频支持的版本"},{"categories":["Tools"],"content":" 6.3 仅导出音频文件:::information_source: 经常拿过来做个人的歌曲库导出，youtube-dl -x 提供了 -x 参数来进行指定 仅导出音频，--extract-audio 这里需要使用到 ffmpeg 。 youtube-dl -x https://www.youtube.com/watch?v=Ga4UCK627nU -o \"~/Downloads/%(title)s.%(ext)s\" 默认下载的音频文件类型，可能无法满足你，这个时候，可以使用 --audio-format 参数，来指定对应的音频格式（使用 ffmpeg 自动转码），目前支持个格式类型有： Specify audio format: \"best\", \"aac\",\"flac\", \"mp3\", \"m4a\", \"opus\", \"vorbis\",or \"wav\"; \"best\" by default youtube-dl -x https://www.youtube.com/watch?v=Ga4UCK627nU -o \"~/Downloads/%(title)s.%(ext)s\" --audio-format mp3 ","date":"2022-05-03","objectID":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/:6:3","series":null,"tags":["mac"],"title":"youtube-dl 下载 YouTube 视频","uri":"https://samzong.me/youtube-dl-%E4%B8%8B%E8%BD%BD-youtube-%E8%A7%86%E9%A2%91/#仅导出音频文件"},{"categories":["Blog","Github"],"content":" 1. 本来是想好好工作的最近换了新工作（后面找个时间好好说说），大量接触 k8s \u0026 docker，开始写了比较多的 yaml 和 Dockerfile；散落在电脑上的话，还是很不方便，有个仓库管理起来的话，就会很方便了，于是有了这个项目 samzong/k8s-yaml k8s-yaml 一开始的定义就是 public ，希望给更多其他的人提供帮助，索性就再增加了一个网页吧 ","date":"2022-04-22","objectID":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/:1:0","series":null,"tags":["Github"],"title":"GitHub Pages 的妙用","uri":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/#本来是想好好工作的"},{"categories":["Blog","Github"],"content":" 2. 一分钟快速搭建网站 git branch gh-pages echo \"## Hello gh-pages\" \u003e index.md git push origin gh-pages eeen…. 这样就 ok ！ gh-pages 是每个 GitHub 仓库的默认 github pages 分支，当你创建这个分支并推动到 GitHub 时，会自动触发 Pages 的构建任务，大约30s 左右，你就会得到一个网站 http://[github_username].github.io/[github_repo_name] ","date":"2022-04-22","objectID":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/:2:0","series":null,"tags":["Github"],"title":"GitHub Pages 的妙用","uri":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/#一分钟快速搭建网站"},{"categories":["Blog","Github"],"content":" 3. 简单的配置 上图简单指引了如何打开 GitHub Pages 的配置路径，下面对主要的几个模块进行说明: Source - 指定的 以那个分支作为 built 源和文件夹，默认是 gh-pages, 建议不动，统一认知 Theme Chooser - 选择对应的博客主题，大概有 10 个，都比较普通，根据自己喜好来，可以自定义，这里不展开 (Google Jekyll themes 一大堆 Custom Domain - 可以指定默认的特定的域名，需要配置 /CNAME，需要和这里的域名一致，同时域名解析需要配置好 CNAME Enforce HTTPS - 启用 HTTPS，默认不启动，建议启用 CNAME 配置，将指定的域名指向到 [github_username].github.io 经过简单的配置，这个仓库的网站，已经完成了你想要的； 在 index.md 内修改为你想要的内容。 ","date":"2022-04-22","objectID":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/:3:0","series":null,"tags":["Github"],"title":"GitHub Pages 的妙用","uri":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/#简单的配置"},{"categories":["Blog","Github"],"content":" 4. 高级功能：结合 GitHub issue 的评论功能这里采用的 评论组件是 utterances, 提供轻量级的博客评论功能，并且评论是直接创建 GitHub issue，方便管理 这里不赘述安装细节的，比较简单，直接去看下面几个网站即可 https://utteranc.es/ https://roife.github.io/2021/02/12/use-utterances-for-comment/ https://www.evanlin.com/jekyll-remove-disqus/ 注意需要增加的文件 mkdir _layouts wget https://raw.githubusercontent.com/SAMZONG/k8s-yaml/gh-pages/_layouts/post.html -o _layouts/post.html index.md 增加 layout 参数，追加在最顶部 --- layout: post --- git add _layouts/post.html git add index.md git commit -m \"add comment module with utterances\" git push origin gh-pages ","date":"2022-04-22","objectID":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/:4:0","series":null,"tags":["Github"],"title":"GitHub Pages 的妙用","uri":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/#高级功能结合-github-issue-的评论功能"},{"categories":["Blog","Github"],"content":" 5. End以上就是全部的部署内容了，可以去看下我的网站和项目 https://k8s-yaml.samzong.me 如果你觉得喜欢，求 fork，求 star ","date":"2022-04-22","objectID":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/:5:0","series":null,"tags":["Github"],"title":"GitHub Pages 的妙用","uri":"https://samzong.me/github-pages-%E7%9A%84%E5%A6%99%E7%94%A8/#end"},{"categories":["闲聊","学习"],"content":" 1. K8s 的发行版本 开始学习喜欢的东西，上面的每一个都要了解 ","date":"2022-04-19","objectID":"https://samzong.me/%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E7%AB%9E%E5%93%81/:1:0","series":null,"tags":["K8s"],"title":"需要了解的 K8s 发行版本","uri":"https://samzong.me/%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E7%AB%9E%E5%93%81/#k8s-的发行版本"},{"categories":["闲聊","学习"],"content":" 1. 汇总本来预计 4 月 10 号左右，可以开始准备 CKA 的考试了，因为疫情在家办公，再加上报名去做志愿者，所以这个时间耽搁到了现在才开始 ","date":"2022-04-18","objectID":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/:1:0","series":null,"tags":["Docker","K8s"],"title":"CKA 考试准备","uri":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/#汇总"},{"categories":["闲聊","学习"],"content":" 1.1 时间成本在这里记录下整个学习过程，也给大家预估下，不走培训机构，自学大概需要多久的时间 时间 事项 耗费时间 2022-04-16 了解什么是 CKA 和考试内容,捡起来 Docker 的知识, 个人项目转为 Docker Image 并推送到 dockerhub 1d 2022-04-17 在个人电脑上成功运行起来 K8s 的环境，并完成个人项目部署 1d ","date":"2022-04-18","objectID":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/:1:1","series":null,"tags":["Docker","K8s"],"title":"CKA 考试准备","uri":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/#时间成本"},{"categories":["闲聊","学习"],"content":" 1.2 体会 有段时间没回过头来弄代码了，平时写比较多是项目上的小脚本，系统化把一个项目改造为 Docker image，再来了一遍，整个优化过程的感觉还是很舒服的 ","date":"2022-04-18","objectID":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/:1:2","series":null,"tags":["Docker","K8s"],"title":"CKA 考试准备","uri":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/#体会"},{"categories":["闲聊","学习"],"content":" 2. 学习资料","date":"2022-04-18","objectID":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/:2:0","series":null,"tags":["Docker","K8s"],"title":"CKA 考试准备","uri":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/#学习资料"},{"categories":["闲聊","学习"],"content":" 2.1 培训机构的大纲大致培训时间是 3 天，给自己预估的学习时间大概是 一周左右的时间 CKA最新考纲解读与Kubernetes入门（Day 1/上午） CKA考试大纲解读 Kubernetes基本概念与应用场景 Kubernetes主要功能特性、集群架构与组件 使用kubeadm安装集群与版本升级 etcd数据备份与还原 kubectl使用、shell自动补 Kubernetes工作负载、调度与Helm（Day 1/下午） Pod基本操作、生命周期、回调与探针 初始化与临时容器 使用Deployment部署自修复无状态服务 使用Deployment滚动更新/回滚/扩缩无状态服务 使用StatefulSet部署有状态服务 使用DaemonSet部署守护进程 深入理解控制器工作原理 使用ConfigMaps和Secrets配置应用程序 Kubernetes调度策略实践 资源限制如何影响Pod调度 理解调度器工作原理 各种调度策略使用场景总结 使用Helm部署/升级/回滚/下线服务 Helm回调与Chart编写 Kubernetes服务与网络（Day 2/上午） 定义Service与Endpoint Service Iptables与IPVS代理模式 通过Service名称与ClusterIP集群内互访 通过NodePort、Ingress、LoadBalancer集群外访问 CoreDNS原理介绍 配置和使用CoreDNS 同Pod/同Node/跨Node/跨集群互通性 常见网络接口插件工作原理与适用场景 常见网络故障排查 Kubernetes存储与安全（Day 2/下午） Volume、PV、PVC、StorageClass 卷模式、访问模式和卷回收策略 理解持久容量声明原语 了解如何配置具有持久性存储的应用程序 认证、授权与鉴权 管理基于角色的访问控制（RBAC） Pod和容器操作权限安全策略 Network Policy Kubernetes监控日志、故障排查（Day 3/上午） 如何监控一个Kubenetes应用 查看与管理集群和节点日志 管理容器标准输出和标准错误日志 如何解决应用程序故障 对群集组件故障进行故障排除 Kubernetes其他常见问题定位 CKA考试注意事项与模拟演练（Day 3/下午） CKA真题演练与解析【重点】 CKA考试注意事项及应试答疑 ","date":"2022-04-18","objectID":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/:2:1","series":null,"tags":["Docker","K8s"],"title":"CKA 考试准备","uri":"https://samzong.me/cka-%E8%80%83%E8%AF%95%E5%87%86%E5%A4%87/#培训机构的大纲"},{"categories":["虚拟化","Docker"],"content":" 1. Apple M1 processor在使用了 Apple M1 的笔记本后，在 docker 使用遇到了一些问题，这里做些笔记记录下来 ","date":"2022-04-17","objectID":"https://samzong.me/docker-run-at-apple-silicon-m1/:1:0","series":null,"tags":["Docker","Apple M1"],"title":"Dockerfile Run at M1 processor build failed","uri":"https://samzong.me/docker-run-at-apple-silicon-m1/#apple-m1-processor"},{"categories":["虚拟化","Docker"],"content":" 2. pull image error Error “no matching manifest for linux/arm64/v8 in the manifest list entries” 在我尝试想要 pull 下来时，得到上面的一个错误；同样的问题，我在编写 Dockerfile 和 docker-compose.yml 都遇到这样的问题 ","date":"2022-04-17","objectID":"https://samzong.me/docker-run-at-apple-silicon-m1/:2:0","series":null,"tags":["Docker","Apple M1"],"title":"Dockerfile Run at M1 processor build failed","uri":"https://samzong.me/docker-run-at-apple-silicon-m1/#pull-image-error"},{"categories":["虚拟化","Docker"],"content":" 2.1 docker-compose.yml version: '3.9' services: # Database db: image: mysql-server:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: pass MYSQL_DATABASE: wp MYSQL_USER: wp MYSQL_PASSWORD: wp networks: - wpsite ","date":"2022-04-17","objectID":"https://samzong.me/docker-run-at-apple-silicon-m1/:2:1","series":null,"tags":["Docker","Apple M1"],"title":"Dockerfile Run at M1 processor build failed","uri":"https://samzong.me/docker-run-at-apple-silicon-m1/#docker-composeyml"},{"categories":["虚拟化","Docker"],"content":" 2.2 解决思路需要指定下 plaform ，当我运行在 Apple M1上，变更部分如下： services: # Database db: platform: linux/x86_64 # set platform image: mysql-server:5.7 ... 如果只是在 docker pull 时，增加指定参数即可： docker pull --plaform linux/x84_64 mysql-server:5.7 ","date":"2022-04-17","objectID":"https://samzong.me/docker-run-at-apple-silicon-m1/:2:2","series":null,"tags":["Docker","Apple M1"],"title":"Dockerfile Run at M1 processor build failed","uri":"https://samzong.me/docker-run-at-apple-silicon-m1/#解决思路"},{"categories":["OpenSource","Metabase"],"content":" 1. Metabase Documentation这里主要是 metabase 的部署和使用方法，以及相关的组件的使用方法。 我正在打造一个中文环境下 Metabase 交互的社群，如果你有任何关于 Metabase 的问题，请联系我们： Metabase 中文交流 https://t.me/metabase_zh ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:1:0","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#metabase-documentation"},{"categories":["OpenSource","Metabase"],"content":" 2. InstallationMetabase 的安装方式有三种： 以Jar包的形式，在本地运行，只需要简单的步骤即可 (本文) 以 Docker 容器的形式，部署到服务器上 以Jar的方式来运行相对简单，对环境依赖也是比较少，只要的电脑上有 JDK 就可以了。 ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:2:0","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#installation"},{"categories":["OpenSource","Metabase"],"content":" 2.1 检查 Java 环境 java -version =\u003e java version \"1.8.0_311\" =\u003e Java(TM) SE Runtime Environment (build 1.8.0_311-b11) =\u003e Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode) Metabase 要求 Java 8 及以上，如果你的环境不支持，请先升级 ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:2:1","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#检查-java-环境"},{"categories":["OpenSource","Metabase"],"content":" 2.2 获取 Metabase 的 Jar 包 https://metabase.com/start/jar.html 通过上方这个链接，可以很快的获取到 Metabase 的最新版本的 Jar 包 ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:2:2","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#获取-metabase-的-jar-包"},{"categories":["OpenSource","Metabase"],"content":" 2.3 启动 Metabase java -jar metabase.jar 通过一个简单的命令，就可以启动 Metabase 了，这个命令会自动检查环境，如果环境没问题，就会自动启动 Metabase 了。 生产环境的 MetaBase 路径是 /data/product/metabase/ 成功启动后，Metabase 会运行在 3000 端口 http://localhost:3000/ ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:2:3","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#启动-metabase"},{"categories":["OpenSource","Metabase"],"content":" 2.4 以后台方式运行 Metabase nohup java -jar metabase.jar \u003e metabase.log 2\u003e\u00261 \u0026 日志文件会保存在本地的 metabase.log 文件中，如果你想查看 Metabase 的日志，可以使用 tail -f metabase.log 来查看。 ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:2:4","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#以后台方式运行-metabase"},{"categories":["OpenSource","Metabase"],"content":" 3. Configuration","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:3:0","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#configuration"},{"categories":["OpenSource","Metabase"],"content":" 3.1 配置 Metabase 的数据库Metabase 默认的采用的是H2的作为数据库存储，会存放在程序运行目录下的 data 目录下；但对于在正式环境中启用 Metabase，我们建议使用 MySQL 来作为数据库存储。 而指定 Metabase 的数据库配置，可以很方便的加载到系统的默认环境中: vim ~/.bashrc # update metabase config at .bashrc export MB_DB_TYPE=mysql export MB_DB_DBNAME=metabase export MB_DB_PORT=3306 export MB_DB_USER= export MB_DB_PASS= export MB_DB_HOST= export MB_DB_CONNECTION_URI=\"mysql://MB_DB_HOST:MB_DB_PORT/MB_DB_DBNAME?user=MB_DB_USER\u0026password=MB_DB_PASS\" export JAVA_TIMEZONE=Asia/Shanghai ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:3:1","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#配置-metabase-的数据库"},{"categories":["OpenSource","Metabase"],"content":" 3.2 配置 Metabase 的 Nginx通过配置 Metabase 的 Nginx，可以让 Metabase 在网站上运行，这样可以开放外部服务给使用者 对 Nginx 的配置，比较简单，可以参考这个文档： server { listen 443 ssl; server_name example.com; root /var/www/example.com/public; # reverse proxy location /mb/ { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $Host; } } overseas-metabase 的 配置文件放在 /etc/nginx/config.d/leyan.core 下，在 80.conf 内 引用 ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:3:2","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#配置-metabase-的-nginx"},{"categories":["OpenSource","Metabase"],"content":" 3.3 配置 Metabase 的 ClickHouse 插件 Metabase 官方支持数据库 https://www.metabase.com/docs/latest/administration-guide/01-managing-databases.html#officially-supported-databases Metabase 默认支持非常丰富数据库驱动，这些都会预置在 Jar 内，例如 MySQL、Oracle、SQL Server；但是 ClickHouse 不在其中，所以我们需要独立进行安装。 ClickHouse 驱动: https://github.com/enqueue/metabase-clickhouse-driver#readme= 下载 合适的 驱动版本，放在 Metabase 的目录下的 plugin 文件夹下 重新启动 Metabase 即可 在 Metabase 的数据库管理中新增数据库，选择类型为 ClickHouse 更多三方驱动: https://www.metabase.com/docs/latest/developers-guide-drivers.html#how-to-use-a-community-built-driver ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:3:3","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#配置-metabase-的-clickhouse-插件"},{"categories":["OpenSource","Metabase"],"content":" 4. Tips","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:4:0","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#tips"},{"categories":["OpenSource","Metabase"],"content":" 4.1 1. 如何重启 Metabase ?直接杀掉进程即可，如果为了以后方便，可以将下述命令保存为 stop.sh 放在目录下，后续直接执行 APP_NAME=\"metabase\" ps aux | grep python | grep ${APP_NAME} | awk '{print $2}' | xargs kill -9 ","date":"2022-04-16","objectID":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/:4:1","series":null,"tags":["Metabase"],"title":"Metabase 上手 - 使用 Jar 运行","uri":"https://samzong.me/metabase-%E4%B8%8A%E6%89%8B-%E4%BD%BF%E7%94%A8jar/#1-如何重启-metabase-"},{"categories":["数据库"],"content":" 1. 需要取值整点时间项目上需要取值上一个整点的数据查询处理，落表，然后实现按小时更新 ClickHouse subtractHours(date_trunc('hour',now()),1) MySQL and auth_time \u003e= DATE_SUB(DATE_FORMAT(now(),'%Y-%m-%d %H:00:00'),interval 1 hour) and auth_time \u003c DATE_FORMAT(now(),'%Y-%m-%d %H:00:00') ","date":"2022-04-15","objectID":"https://samzong.me/sql-%E5%AF%B9%E6%97%B6%E9%97%B4%E6%95%B4%E7%82%B9%E7%9A%84%E5%A4%84%E7%90%86/:1:0","series":null,"tags":["MySQL","ClickHouse"],"title":"SQL 对时间整点的处理","uri":"https://samzong.me/sql-%E5%AF%B9%E6%97%B6%E9%97%B4%E6%95%B4%E7%82%B9%E7%9A%84%E5%A4%84%E7%90%86/#需要取值整点时间"},{"categories":["Python"],"content":"淘宝开放平台的SDK，Python的 SDK 是在2012年，仅支持Python2.7 及以上，但不支持Python3；二现在是2102年了，像我这样的新手都是直接从Python3开始的 我已经把这个项目开放在 GitHub https://github.com/SAMZONG/taobao-openapi 同时放在了 Python pypi 软件仓库 https://pypi.org/project/taobao-openapi/ ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:0:0","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#"},{"categories":["Python"],"content":" 1. Install \u0026 Usage pip install taobao-openapi import taobao-openapi as tbapi ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:1:0","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#install--usage"},{"categories":["Python"],"content":" 2. 持续补充SDK能力淘宝开放平台后台下载获取到的SDK文件，会根据应用的权限生产对应的SDK包，所以你可能获取到的是几十个或者上百个 NOTE: 如果你有其他的SDK没有在文档中找到，可以反馈给我或者提 Pull requests，大家一起扩充SDK v1.0.6 fix 文档错误 v1.0.4 增加更多接口 v1.0.3 增加更多接口 v1.0.2 添加 Wdt QimenCloud-openapi v1.0.1 适配 taobao-openapi ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:2:0","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#持续补充sdk能力"},{"categories":["Python"],"content":" 3. 使用说明 import top.api import json app_key = app_secret = session_key = def trade_rates_get_request(): req = top.api.TraderatesGetRequest() req.set_app_info(top.appinfo(app_key, app_secret)) req.fields = \"tid,oid,role,nick,result,created,rated_nick,item_title,item_price,content,reply,num_iid\" req.rate_type = \"get\" req.role = \"buyer\" try: resp = req.getResponse(session_key) except Exception as e: print(e) if __name__ == '__main__': result = trade_rates_get_request() print(result) ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:3:0","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#使用说明"},{"categories":["Python"],"content":" 4. 适配部分介绍 以下为了省时间，基本引用了 https://blog.csdn.net/starryhwj/article/details/103026402 补充了8 同时感谢 @ymj4023 ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:0","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#适配部分介绍"},{"categories":["Python"],"content":" 4.1 1. Python3 int替代了long FROM: str(long(time.time() * 1000)) TO: P_TIMESTAMP: str(int(time.time() * 1000)) ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:1","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#1-python3-int替代了long"},{"categories":["Python"],"content":" 4.2 2. 用items替代iteritems FROM: for key, value in application_parameter.iteritems(): TO: for key, value in application_parameter.items(): ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:2","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#2-用items替代iteritems"},{"categories":["Python"],"content":" 4.3 3. dict方法优化查阅资料，发现有人说到dict methods dict.keys(), dict.items() and dict.values() return “views” instead of lists.这样就显而易见知道怎么改了： FROM: keys = keys.sort() TO: keys = sorted(keys) ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:3","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#3-dict方法优化"},{"categories":["Python"],"content":" 4.4 4. unicode 对象需要编码英文意思很明确，unicode对象在哈希之前必须进行编码转换，想起之前又看到过中文字符在python中是以unicode存在的，所以： FROM: sign = hashlib.md5(parameters)).hexdigest().upper() TO: sign = hashlib.md5(parameters.encode(\"utf-8\")).hexdigest().upper() ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:4","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#4-unicode-对象需要编码"},{"categories":["Python"],"content":" 4.5 5. soket.py HttpConnection这是花费时间最长的一个错误。首先，直接看最后，错误在soket.py里，心凉了半截，难道这里的调用都不一样了,再网上看又是python 3.X的http模块，去百度了半天也没有发现类似的错误，只能自己硬着头皮去看模块，功夫不负有心人，其实也很简单，在类HTTPConnection的初始化函数是这样定义的: FROM: connection = httplib.HTTPConnection(self.__domain, self.__port, False, timeout) TO: connection = httplib.HTTPConnection(self.__domain, self.__port, timeout) 比较下参数发现，python 2比3多了一个参数，去掉即可，这个错误主要是是报错的地方和修改的地方不在一起，所以很难插出原因。 ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:5","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#5-soketpy-httpconnection"},{"categories":["Python"],"content":" 4.6 6. urllib方法升级官方文档是这样解释的：urllib has been split up in Python 3. The urllib.urlencode() function is now urllib.parse.urlencode(), and the urllib.urlopen() function is now urllib.request.urlopen() FROM: url = N_REST + \"?\" + urllib.parse.urlencode(sys_parameters) TO: url = N_REST + \"?\" + urllib.urlencode(sys_parameters) ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:6","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#6-urllib方法升级"},{"categories":["Python"],"content":" 4.7 7. jsonobj 异常抛出这个错误是在API调用出异常的时候暴露出来的。原因前面已经提到了，稍微查了下替代的方法： if \"error_response\" in jsonobj: if P_CODE in jsonobj[\"error_response\"]: ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:7","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#7-jsonobj-异常抛出"},{"categories":["Python"],"content":" 4.8 8. is not 修改为 !=在if 需要使用反向时，应该是 != ，而不是使用 is not ；这个也是 PyCharm 给的建议，所以在使用时，所以简单调整下就好了 FROM: if respone.status is not 200: TO: if response.status != 200: 以上调整之后，基本就可以正常跑起来了，基本是可以支持Python3的使用，我试过了Python3.6-3.9，都是OK的。 ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:4:8","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#8-is-not-修改为-"},{"categories":["Python"],"content":" 5. pypi HowTo把你的库上传到pypi 之前，主要依赖的是 setup.py，下方是对应的demo 打包 python3 steup.py sdist twine upload dist/* 注意： 需要先安装 setuptools twine # /usr/bin/env python3 # -*- coding: utf-8 -*- import setuptools from distutils.core import setup import codecs import os import sys try: from setuptools import setup, find_packages except: from distutils import setup with open('README.md', 'r', encoding=\"utf-8\") as fp: readme = fp.read() VERSION = \"1.0.0\" LICENSE = \"MIT\" setup( name='taobao-openapi', version=VERSION, description=( '集合了淘宝开放平台的商铺OPEN API，并适配了Python3' ), long_description=readme, long_description_content_type='text/markdown', author='samzong.lu', author_email='samzong.lu@gmail.com', maintainer='samzong.lu', maintainer_email='samzong.lu@gmail.com', license=LICENSE, packages=find_packages(), platforms=[\"all\"], url='https://github.com/SAMZONG/taobao-sdk-python3', install_requires=[ \"requests\" ], classifiers=[ 'Development Status :: 4 - Beta', 'Operating System :: OS Independent', 'Intended Audience :: Developers', 'License :: OSI Approved :: BSD License', 'Programming Language :: Python', 'Programming Language :: Python :: Implementation', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3.4', 'Programming Language :: Python :: 3.5', 'Programming Language :: Python :: 3.6', 'Programming Language :: Python :: 3.7', 'Programming Language :: Python :: 3.8', 'Programming Language :: Python :: 3.9', 'Topic :: Software Development :: Libraries' ], ) ","date":"2022-04-14","objectID":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/:5:0","series":null,"tags":["Python"],"title":"淘宝Python SDK 优化支持 Python3","uri":"https://samzong.me/%E6%B7%98%E5%AE%9Dpython-sdk%E4%BC%98%E5%8C%96%E6%94%AF%E6%8C%81python3/#pypi-howto"},{"categories":["Git"],"content":" 1. git author 的作用一般情况下 git 仓库，都是通过 author 中的 user.email 的判定提交者的身份；而这个配置一般在新电脑上需要初始化配置，否则还是容易出错。 个人软件仓库使用了公司的 author 信息 [信息泄漏的风险] 和其他开发者使用了相同的 author 信息 [影响commit追踪] ","date":"2022-04-11","objectID":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/:1:0","series":null,"tags":["Git"],"title":"Git 修复历史错误的 Author 信息","uri":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/#git-author-的作用"},{"categories":["Git"],"content":" 2. ✅ 修改为正确的 author 信息 注意修改全局需要增加 --global 参数 // 修改系统默认（影响全部项目）谨慎使用 git config --global user.name \"samzong\" git config --global user.email \"samzong.lu@gmail.com\" // 修改单个项目 git config user.name \"samzong\" git config user.email \"samzong.lu@gmail.com\" 但是，通过以上的变更后，仅对后续的操作生效；所以这样可以帮助你回到正确的轨道上，但无法解决历史遗留的错误问题！ 下面我将演示如何解决这个问题 ","date":"2022-04-11","objectID":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/:2:0","series":null,"tags":["Git"],"title":"Git 修复历史错误的 Author 信息","uri":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/#-修改为正确的-author-信息"},{"categories":["Git"],"content":" 3. 修订最近一次提交 (–amend)git commit 提供了 –amend 的参数，作用是对commit进行修正，如果你是最近一次提交出错，那么可以直接使用下方命令完成补救。 # 📢 注意替换 user.name \u0026 user.email 为正确的选项 git commit --amend --author=\"{user.name} \u003c{user.email}\u003e\" 以上变更完成后，你会发现最近一次的提交被修正成功了，可以使用 git log -1 来对比前后的 author 信息的变更；确认无误后，将你的修改推送到目标仓库中即可； 如果修改后的结果不满意，是可以再次修订 ","date":"2022-04-11","objectID":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/:3:0","series":null,"tags":["Git"],"title":"Git 修复历史错误的 Author 信息","uri":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/#修订最近一次提交---amend"},{"categories":["Git"],"content":" 4. 修改更早之前的提交 (谨慎使用)写在前面的话，如果你知道rebase的作用，请谨慎使用的同时记住，可以在任何过程中终止你的操作，这非常重要，使用如下命令 git rebase --abort 如果需要修改更早之前的提交，那就需要结合 git rebase 的能力，来实现了 rebase 是个危险的操作，其产生的风险也就是目前我们要做的修改历史；仅建议在测试项目或者个人项目中使用，涉及到多人协作的开源、商业化项目谨慎使用 ## 使用 git log 找到你想要修改的提交 git log commit 145a3eb180c3f45fd99c2d61cad6439177cbc319 Author: samzong.lu \u003csamzong.lu@gmail.com\u003e Date: Sun Mar 20 22:22:58 2022 +0800 commit 7e04c7ebaf06b2eea1951a29b79a571090cd1d8b {commit_id} Author: samzong.lu \u003csamzong.lu@gmail.com\u003e Date: Sun Mar 20 22:19:48 2022 +0800 找到你想要更新的commit_id, 然后使用rebase 命令来进行处理 git rebase -i {commit_id} 然后继续使用 git commit --amend 来修改 author 信息，可以增加 –no-edit 来提效，表示无需弹出修改 commit info 的窗口 git commit --amend --author=\"{user.name} \u003c{user.email}\u003e\" 最后使用 git rebase --coutine 继续完成剩余的提交 ","date":"2022-04-11","objectID":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/:4:0","series":null,"tags":["Git"],"title":"Git 修复历史错误的 Author 信息","uri":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/#修改更早之前的提交-谨慎使用"},{"categories":["Git"],"content":" 5. 更高级做法 filter-branchfilter-branch 虽然被官方推荐，但也不是可以轻易使用的工具；本次的目的只是修改 author 中邮箱，所以一定要加上 --commit-filter，官方的脚本实例我直接copy在下方了 git filter-branch --commit-filter ' if [ \"$GIT_AUTHOR_EMAIL\" = \"schacon@localhost\" ]; then GIT_AUTHOR_NAME=\"Scott Chacon\"; GIT_AUTHOR_EMAIL=\"schacon@example.com\"; git commit-tree \"$@\"; else git commit-tree \"$@\"; fi' HEAD ","date":"2022-04-11","objectID":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/:5:0","series":null,"tags":["Git"],"title":"Git 修复历史错误的 Author 信息","uri":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/#更高级做法-filter-branch"},{"categories":["Git"],"content":" 6. push 到 repo 的注意事项注意以上的消息会导致提交包含了 “它们父提交的SHA-1校验” 和 “这个命令修改历史中的每一个提交的SHA-1校验”， 再加上修改后的 author 信息，所以在push时会遇到警告，可以使用下方命令强制提交 git push --force origin {branch_name} 在多人协作的场景可能会出现覆盖他人代码的情况，请注意协商并 fetch 分支的变更，确保最新状态 ","date":"2022-04-11","objectID":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/:6:0","series":null,"tags":["Git"],"title":"Git 修复历史错误的 Author 信息","uri":"https://samzong.me/git-%E4%BF%AE%E5%A4%8D%E5%8E%86%E5%8F%B2%E9%94%99%E8%AF%AF%E7%9A%84author%E4%BF%A1%E6%81%AF/#push-到-repo-的注意事项"},{"categories":["Tools","Telegram"],"content":" 1. 关于电报群从2014年开始使用电报群，在这个不存在的通讯工具中，结识不少有趣的朋友，也发现了大量有价值的群组或BOT，可以很方便你的生活 P.S. 不要过分关注那些黑产、广告和色情信息，它们虽然利用了这个工具，但是也只是其中一小部分 ","date":"2022-04-10","objectID":"https://samzong.me/awsome-telegram-bot/:1:0","series":null,"tags":["Telegram"],"title":"Awsome Telegram Bot","uri":"https://samzong.me/awsome-telegram-bot/#关于电报群"},{"categories":["Tools","Telegram"],"content":" 1.1 我在电报做的事情 美剧、电影和图书，所以最新的资源基本在电报群出现了，远比各种关注微信公众号套娃的营销号好很多 技术群，感谢技术群里的各位大佬给的帮助，尤其感谢 Taiwan 的几个技术社群，会有人认真解答你的问题 Go/Php 各类开发群 开源软件的沟通群， 在这里你可以和开发者们进行沟通，并且提供你的建议，甚至讨论 PR 各类BOT Temp Mail 生成临时邮箱 资料查询 GitHub 助手 短连接 网站服务监控 羊毛群/合租群/VPN群，这里不用详细说明 ","date":"2022-04-10","objectID":"https://samzong.me/awsome-telegram-bot/:1:1","series":null,"tags":["Telegram"],"title":"Awsome Telegram Bot","uri":"https://samzong.me/awsome-telegram-bot/#我在电报做的事情"},{"categories":["Tools","Telegram"],"content":" 1.2 使用的一些技巧 你需要一个 !+86 的手机号，保障你与所有的网友的友好交流，可以考虑使用 G家Voice 买个美区号方便 DO NOT USE CHINESE ! 这会让你发现不一样的 Telegram ","date":"2022-04-10","objectID":"https://samzong.me/awsome-telegram-bot/:1:2","series":null,"tags":["Telegram"],"title":"Awsome Telegram Bot","uri":"https://samzong.me/awsome-telegram-bot/#使用的一些技巧"},{"categories":["Tools","Telegram"],"content":" 1.3 Develop in Telegram telegra.ph 匿名博客， Writing is Sharing ~ telegram.bot_api 定制开发你的webhook ","date":"2022-04-10","objectID":"https://samzong.me/awsome-telegram-bot/:1:3","series":null,"tags":["Telegram"],"title":"Awsome Telegram Bot","uri":"https://samzong.me/awsome-telegram-bot/#develop-in-telegram"},{"categories":["Javascript"],"content":" alert 弹窗提醒一段文本 a = prompt(“input desc”) 接收输入，并把内容赋值给a confirm 弹出确认窗口，让用户确认，这是给出的结果就是 yes/no console.log(‘AAS’) 输出一段日志 let a = 1 声明 变量 a=1， number 类型 const ABB = 123 声明一个常量 ABB, 不可以重新赋值 undefined 和 null 都是空的意思，但是这两个又不相同 a ?? “hello” ; ?? 叫做 空值运算符，指当a 未被赋值时，将hello赋值给a，如果a已经被赋值了，则不变 ; a 需要被声明，在JavaScript中 声明 和 赋值 是两件事情 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:0","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#"},{"categories":["Javascript"],"content":" 0.1 js的数据类型 js 是弱类型语言， 1 == ‘1’ =\u003e true; 但是 1 === ‘1’ =\u003e false； 6 / “2” =\u003e 3, typeof is number ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:1","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#js的数据类型"},{"categories":["Javascript"],"content":" 0.2 支持判断if /elif else ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:2","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#支持判断"},{"categories":["Javascript"],"content":" 0.3 支持的循环方式 do { // Hello } whIle () for (a=1;a\u003c10;a+=2) { // Hello } a = 100; switch (a) { case (a = 100):{ //Hello break; } default: alert(a); } ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:3","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#支持的循环方式"},{"categories":["Javascript"],"content":" 0.4 函数声明必须要使用 function function showMessage() { alert('Hello Javascript !'); } 函数中变量的作用域：这部分与Python和C一致， 分别为 内部变量 和 外部变量； 关系存在在继承的概念 函数的参数， 入参定义在 () 内，当函数声明了入参后，在对应调用时，就需要传递符合条件的参数 支持函数的默认值的设定 函数的返回值，同样使用 return 作为返回值处理 函数 function is an action, 所以函数的命名通常是 使用动词； javascipt 的命名方式 官方建议为 驼峰的方式 函数的特殊部分 函数表达式 let sayHi = function () { alert(‘Hi’)} 利用声明 let 创建了一个函数，并把他赋值给了变量 sayHi 回调函数 [ ] 今天学习的内容到此 回调函数 https://zh.javascript.info/function-expressions ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:4","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#函数声明"},{"categories":["Javascript"],"content":" 0.5 严格模式 三连表达式 cond ? resultA : resultB // 1 \u003e 0 ? alert(true) : alert(false) cond 为真展示resultA, 反之展示resultB 空值运算符 a ?? b =\u003e a ?? b 的结果是 a，除非 a 为 null/undefined，这时结果是 b ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:5","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#严格模式"},{"categories":["Javascript"],"content":" 0.6 开发行为规范 BDD 在 BDD 中，规范先行，实现在后。最后我们同时拥有了规范和代码。 规范有三种使用方式： 作为 测试 —— 保证代码正确工作。 作为 文档 —— describe 和 it 的标题告诉我们函数做了什么。 作为 案例 —— 测试实际工作的例子展示了一个函数可以被怎样使用。 有了规范，我们可以安全地改进、修改甚至重写函数，并确保它仍然正确地工作。 这在一个函数会被用在多个地方的大型项目中尤其重要。当我们改变这样一个函数时，没有办法手动检查每个使用它们的地方是否仍旧正确。 如果没有测试，一般有两个办法： 展示修改，无论修改了什么。然后我们的用户遇到了 bug，这应该是我们没有手动完成某些检查。 如果对出错的惩罚比较严重，并且没有测试，那么大家会很害怕修改这样的函数，然后这些代码就会越来越陈旧，没有人会想接触它。这很不利于发展。自动化测试则有助于避免这样的问题！ 如果这个项目被测试代码覆盖了，就不会出现这种问题。在任何修改之后，我们都可以运行测试，并在几秒钟内看到大量的检查。 另外，一个经过良好测试的代码通常都有更好的架构。 当然，这是因为覆盖了自动化测试的代码更容易修改和改进。但还有另一个原因。 要编写测试，代码的组织方式应确保每个函数都有一个清晰描述的任务、定义良好的输入和输出。这意味着从一开始就有一个好的架构。 在实际开发中有时候可能并不容易，有时很难在写实际代码之前编写规范，因为还不清楚它应该如何表现。但一般来说，编写测试使得开发更快更稳定。 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:6","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#开发行为规范"},{"categories":["Javascript"],"content":" 0.7 Object 对象的基础知识在js中 对象可以说非常常见的用到，所以相对来讲 定义一个对象也是非常的方便 let user = new Object(); 构造函数 的语法 let user = {} 构造 \"字面量的语法\" 在对象中，包含的是 一个个属性， 这些属性又以 键值对 的形式出现在 {} 中 定义一个有属性的对象 let user = {name:‘alex’, age: 18} 增加属性 user.city = ‘Shanghai’ =\u003e user[’love package’] = ‘Apple’ 删除一个属性 delete user.age 计算属性 ： 当创建一个对象时，我可以在对象字面量中使用方括号，这叫做计算属性；计算属性的含义是 [fruit] 是从 变量 fruit 中获取的 判断一个 属性是否在对象中 “key” in Object ，这里的 key 需要时一个值，否则会被认为一个变量 遍历一个对象采用的方式是 for (let key in Object) : 这里的做法是 声明[let] 变量key ，并且把Object 中的每一个key的值遍历赋予key 取出对象中一个key的值可以采用的方式 Object[key] 或者 Object.key；但是Object.key 会出现对 多词属性 单词属性 name , age 多词属性 “like birds” ， 这时使用 Object.key 的方式就不可行了 JavaScirpt 中的垃圾回收机制 当一个对象中的属性被建立后，如果这些属性被多个对象引用时，其他一个对象被重新赋值了，那么这些属性还是可以被访问的；但是当所有对象被重置后，这些无法被访问的属性 就变得不可以，这也会占用我们内存，而这类也会被 回收。 0.7.1 对象的方法 thisthis 是用来标识当前对象的，这个对象可以是个函数 ; 为了访问该对象，方法中可以使用 this 关键字。 this 设计到编程的一种形式 ： **面向对象编程** OOP ; 当我们在代码中用对象表示实体时，就是所谓的 面向对象编程，简称为 “OOP”。 this 的优势 ： 在 JavaScript 中，this 关键字与其他大多数编程语言中的不同。JavaScript 中的 this 可以用于任何函数，即使它不是对象的方法。 this 的值是在代码运行时计算出来的，它取决于代码上下文。 不用函数调用this时的到结果不一致的 箭头函数 function sum (a,b) =\u003e a*b ； 这类箭头函数是没有自己的 this，如果在箭头函数中使用 this，会把this当成一个真正的对象去处理，这不好 在 JavaScript 中，this 是“自由”的，它的值是在调用时计算出来的，它的值并不取决于方法声明的位置，而是取决于在“点符号前”的是什么对象。在运行时对 this 求值的这个概念既有优点也有缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性造成了更大的出错的可能。这里我们的立场并不是要评判编程语言的这个设计是好是坏。而是要了解怎样使用它，如何趋利避害。 0.7.2 对象的 构造和操作符 new 构造函数在技术上，也是属于常规函数，不过有2个约定： 命名以大写字母开头， 这是一个共同的约定，用来标明一个函数将被使用 new 来运行 他们只能有 new 操作符来执行 构造器不能被再次调用，因为他保存在任何地址，知识被创建后 后续 调用使用；所以 构造函数的封装一个 单一对象的代码，而无需将来重用 0.7.3 JavaScript ?. 可选链可选链 ?. 语法有三种形式： obj?.prop —— 如果 obj 存在则返回 obj.prop，否则返回 undefined。 obj?.[prop] —— 如果 obj 存在则返回 obj[prop]，否则返回 undefined。 obj.method?.() —— 如果 obj.method 存在则调用 obj.method()，否则返回 undefined。 正如我们所看到的，这些语法形式用起来都很简单直接。?. 检查左边部分是否为 null/undefined，如果不是则继续运算。 ?. 链使我们能够安全地访问嵌套属性。 但是，我们应该谨慎地使用 ?.，仅在当左边部分不存在也没问题的情况下使用为宜。以保证在代码中有编程上的错误出现时，也不会对我们隐藏。 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:7","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#object-对象的基础知识"},{"categories":["Javascript"],"content":" 0.7 Object 对象的基础知识在js中 对象可以说非常常见的用到，所以相对来讲 定义一个对象也是非常的方便 let user = new Object(); 构造函数 的语法 let user = {} 构造 \"字面量的语法\" 在对象中，包含的是 一个个属性， 这些属性又以 键值对 的形式出现在 {} 中 定义一个有属性的对象 let user = {name:‘alex’, age: 18} 增加属性 user.city = ‘Shanghai’ =\u003e user[’love package’] = ‘Apple’ 删除一个属性 delete user.age 计算属性 ： 当创建一个对象时，我可以在对象字面量中使用方括号，这叫做计算属性；计算属性的含义是 [fruit] 是从 变量 fruit 中获取的 判断一个 属性是否在对象中 “key” in Object ，这里的 key 需要时一个值，否则会被认为一个变量 遍历一个对象采用的方式是 for (let key in Object) : 这里的做法是 声明[let] 变量key ，并且把Object 中的每一个key的值遍历赋予key 取出对象中一个key的值可以采用的方式 Object[key] 或者 Object.key；但是Object.key 会出现对 多词属性 单词属性 name , age 多词属性 “like birds” ， 这时使用 Object.key 的方式就不可行了 JavaScirpt 中的垃圾回收机制 当一个对象中的属性被建立后，如果这些属性被多个对象引用时，其他一个对象被重新赋值了，那么这些属性还是可以被访问的；但是当所有对象被重置后，这些无法被访问的属性 就变得不可以，这也会占用我们内存，而这类也会被 回收。 0.7.1 对象的方法 thisthis 是用来标识当前对象的，这个对象可以是个函数 ; 为了访问该对象，方法中可以使用 this 关键字。 this 设计到编程的一种形式 ： **面向对象编程** OOP ; 当我们在代码中用对象表示实体时，就是所谓的 面向对象编程，简称为 “OOP”。 this 的优势 ： 在 JavaScript 中，this 关键字与其他大多数编程语言中的不同。JavaScript 中的 this 可以用于任何函数，即使它不是对象的方法。 this 的值是在代码运行时计算出来的，它取决于代码上下文。 不用函数调用this时的到结果不一致的 箭头函数 function sum (a,b) =\u003e a*b ； 这类箭头函数是没有自己的 this，如果在箭头函数中使用 this，会把this当成一个真正的对象去处理，这不好 在 JavaScript 中，this 是“自由”的，它的值是在调用时计算出来的，它的值并不取决于方法声明的位置，而是取决于在“点符号前”的是什么对象。在运行时对 this 求值的这个概念既有优点也有缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性造成了更大的出错的可能。这里我们的立场并不是要评判编程语言的这个设计是好是坏。而是要了解怎样使用它，如何趋利避害。 0.7.2 对象的 构造和操作符 new 构造函数在技术上，也是属于常规函数，不过有2个约定： 命名以大写字母开头， 这是一个共同的约定，用来标明一个函数将被使用 new 来运行 他们只能有 new 操作符来执行 构造器不能被再次调用，因为他保存在任何地址，知识被创建后 后续 调用使用；所以 构造函数的封装一个 单一对象的代码，而无需将来重用 0.7.3 JavaScript ?. 可选链可选链 ?. 语法有三种形式： obj?.prop —— 如果 obj 存在则返回 obj.prop，否则返回 undefined。 obj?.[prop] —— 如果 obj 存在则返回 obj[prop]，否则返回 undefined。 obj.method?.() —— 如果 obj.method 存在则调用 obj.method()，否则返回 undefined。 正如我们所看到的，这些语法形式用起来都很简单直接。?. 检查左边部分是否为 null/undefined，如果不是则继续运算。 ?. 链使我们能够安全地访问嵌套属性。 但是，我们应该谨慎地使用 ?.，仅在当左边部分不存在也没问题的情况下使用为宜。以保证在代码中有编程上的错误出现时，也不会对我们隐藏。 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:7","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#对象的方法-this"},{"categories":["Javascript"],"content":" 0.7 Object 对象的基础知识在js中 对象可以说非常常见的用到，所以相对来讲 定义一个对象也是非常的方便 let user = new Object(); 构造函数 的语法 let user = {} 构造 \"字面量的语法\" 在对象中，包含的是 一个个属性， 这些属性又以 键值对 的形式出现在 {} 中 定义一个有属性的对象 let user = {name:‘alex’, age: 18} 增加属性 user.city = ‘Shanghai’ =\u003e user[’love package’] = ‘Apple’ 删除一个属性 delete user.age 计算属性 ： 当创建一个对象时，我可以在对象字面量中使用方括号，这叫做计算属性；计算属性的含义是 [fruit] 是从 变量 fruit 中获取的 判断一个 属性是否在对象中 “key” in Object ，这里的 key 需要时一个值，否则会被认为一个变量 遍历一个对象采用的方式是 for (let key in Object) : 这里的做法是 声明[let] 变量key ，并且把Object 中的每一个key的值遍历赋予key 取出对象中一个key的值可以采用的方式 Object[key] 或者 Object.key；但是Object.key 会出现对 多词属性 单词属性 name , age 多词属性 “like birds” ， 这时使用 Object.key 的方式就不可行了 JavaScirpt 中的垃圾回收机制 当一个对象中的属性被建立后，如果这些属性被多个对象引用时，其他一个对象被重新赋值了，那么这些属性还是可以被访问的；但是当所有对象被重置后，这些无法被访问的属性 就变得不可以，这也会占用我们内存，而这类也会被 回收。 0.7.1 对象的方法 thisthis 是用来标识当前对象的，这个对象可以是个函数 ; 为了访问该对象，方法中可以使用 this 关键字。 this 设计到编程的一种形式 ： **面向对象编程** OOP ; 当我们在代码中用对象表示实体时，就是所谓的 面向对象编程，简称为 “OOP”。 this 的优势 ： 在 JavaScript 中，this 关键字与其他大多数编程语言中的不同。JavaScript 中的 this 可以用于任何函数，即使它不是对象的方法。 this 的值是在代码运行时计算出来的，它取决于代码上下文。 不用函数调用this时的到结果不一致的 箭头函数 function sum (a,b) =\u003e a*b ； 这类箭头函数是没有自己的 this，如果在箭头函数中使用 this，会把this当成一个真正的对象去处理，这不好 在 JavaScript 中，this 是“自由”的，它的值是在调用时计算出来的，它的值并不取决于方法声明的位置，而是取决于在“点符号前”的是什么对象。在运行时对 this 求值的这个概念既有优点也有缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性造成了更大的出错的可能。这里我们的立场并不是要评判编程语言的这个设计是好是坏。而是要了解怎样使用它，如何趋利避害。 0.7.2 对象的 构造和操作符 new 构造函数在技术上，也是属于常规函数，不过有2个约定： 命名以大写字母开头， 这是一个共同的约定，用来标明一个函数将被使用 new 来运行 他们只能有 new 操作符来执行 构造器不能被再次调用，因为他保存在任何地址，知识被创建后 后续 调用使用；所以 构造函数的封装一个 单一对象的代码，而无需将来重用 0.7.3 JavaScript ?. 可选链可选链 ?. 语法有三种形式： obj?.prop —— 如果 obj 存在则返回 obj.prop，否则返回 undefined。 obj?.[prop] —— 如果 obj 存在则返回 obj[prop]，否则返回 undefined。 obj.method?.() —— 如果 obj.method 存在则调用 obj.method()，否则返回 undefined。 正如我们所看到的，这些语法形式用起来都很简单直接。?. 检查左边部分是否为 null/undefined，如果不是则继续运算。 ?. 链使我们能够安全地访问嵌套属性。 但是，我们应该谨慎地使用 ?.，仅在当左边部分不存在也没问题的情况下使用为宜。以保证在代码中有编程上的错误出现时，也不会对我们隐藏。 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:7","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#对象的-构造和操作符-new"},{"categories":["Javascript"],"content":" 0.7 Object 对象的基础知识在js中 对象可以说非常常见的用到，所以相对来讲 定义一个对象也是非常的方便 let user = new Object(); 构造函数 的语法 let user = {} 构造 \"字面量的语法\" 在对象中，包含的是 一个个属性， 这些属性又以 键值对 的形式出现在 {} 中 定义一个有属性的对象 let user = {name:‘alex’, age: 18} 增加属性 user.city = ‘Shanghai’ =\u003e user[’love package’] = ‘Apple’ 删除一个属性 delete user.age 计算属性 ： 当创建一个对象时，我可以在对象字面量中使用方括号，这叫做计算属性；计算属性的含义是 [fruit] 是从 变量 fruit 中获取的 判断一个 属性是否在对象中 “key” in Object ，这里的 key 需要时一个值，否则会被认为一个变量 遍历一个对象采用的方式是 for (let key in Object) : 这里的做法是 声明[let] 变量key ，并且把Object 中的每一个key的值遍历赋予key 取出对象中一个key的值可以采用的方式 Object[key] 或者 Object.key；但是Object.key 会出现对 多词属性 单词属性 name , age 多词属性 “like birds” ， 这时使用 Object.key 的方式就不可行了 JavaScirpt 中的垃圾回收机制 当一个对象中的属性被建立后，如果这些属性被多个对象引用时，其他一个对象被重新赋值了，那么这些属性还是可以被访问的；但是当所有对象被重置后，这些无法被访问的属性 就变得不可以，这也会占用我们内存，而这类也会被 回收。 0.7.1 对象的方法 thisthis 是用来标识当前对象的，这个对象可以是个函数 ; 为了访问该对象，方法中可以使用 this 关键字。 this 设计到编程的一种形式 ： **面向对象编程** OOP ; 当我们在代码中用对象表示实体时，就是所谓的 面向对象编程，简称为 “OOP”。 this 的优势 ： 在 JavaScript 中，this 关键字与其他大多数编程语言中的不同。JavaScript 中的 this 可以用于任何函数，即使它不是对象的方法。 this 的值是在代码运行时计算出来的，它取决于代码上下文。 不用函数调用this时的到结果不一致的 箭头函数 function sum (a,b) =\u003e a*b ； 这类箭头函数是没有自己的 this，如果在箭头函数中使用 this，会把this当成一个真正的对象去处理，这不好 在 JavaScript 中，this 是“自由”的，它的值是在调用时计算出来的，它的值并不取决于方法声明的位置，而是取决于在“点符号前”的是什么对象。在运行时对 this 求值的这个概念既有优点也有缺点。一方面，函数可以被重用于不同的对象。另一方面，更大的灵活性造成了更大的出错的可能。这里我们的立场并不是要评判编程语言的这个设计是好是坏。而是要了解怎样使用它，如何趋利避害。 0.7.2 对象的 构造和操作符 new 构造函数在技术上，也是属于常规函数，不过有2个约定： 命名以大写字母开头， 这是一个共同的约定，用来标明一个函数将被使用 new 来运行 他们只能有 new 操作符来执行 构造器不能被再次调用，因为他保存在任何地址，知识被创建后 后续 调用使用；所以 构造函数的封装一个 单一对象的代码，而无需将来重用 0.7.3 JavaScript ?. 可选链可选链 ?. 语法有三种形式： obj?.prop —— 如果 obj 存在则返回 obj.prop，否则返回 undefined。 obj?.[prop] —— 如果 obj 存在则返回 obj[prop]，否则返回 undefined。 obj.method?.() —— 如果 obj.method 存在则调用 obj.method()，否则返回 undefined。 正如我们所看到的，这些语法形式用起来都很简单直接。?. 检查左边部分是否为 null/undefined，如果不是则继续运算。 ?. 链使我们能够安全地访问嵌套属性。 但是，我们应该谨慎地使用 ?.，仅在当左边部分不存在也没问题的情况下使用为宜。以保证在代码中有编程上的错误出现时，也不会对我们隐藏。 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:7","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#javascript--可选链"},{"categories":["Javascript"],"content":" 0.8 Symbol 类型根据规范，Obj的属性键 只能是 字符串类型或者 Symbol 类型；不能是Number，也不能是Boolean。 Symbol 值 表示 唯一的标识符，现在可以通过 Symbol() 来创建这种类型的值；Symbol的特性是唯一，即使我们创建了相同描述的Symbol，他们的值不相同的；比如以下： let id1 = Symbol('id') let id2 = Symbol('id') id1 == id2 // 结果是 false Symbol 的另外一个特性是不会被自动转化为字符串；其实在javascript中大多数的数值都是可以进行字符串的 隐式转换 ，但是使用 Symbol() 定义的一个字符，是不能够直接转化为 字符串的， 可以使用 Symbol('id').toString() 来输出字符串。 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:8","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#symbol-类型"},{"categories":["Javascript"],"content":" 0.9 原始类型的方法在 JavaScript 中有 7 种原始类型：string，number，bigint，boolean，symbol，null 和 undefined。 字符串处理方法 Number的处理方法 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:9","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#原始类型的方法"},{"categories":["Javascript"],"content":" 0.10 数组方法的备忘笔记数组方法备忘单： 添加/删除元素： push(…items) —— 向尾端添加元素 pop() —— 从尾端提取一个元素 shift() —— 从首端提取一个元素 unshift(…items) —— 向首端添加元素 splice(pos, deleteCount, …items) 从 pos 开始删除 deleteCount 个元素，并插入 items。 用来控制数组的增删改查 slice(start, end) —— 创建一个新数组，将从索引 start 到索引 end（但不包括 end）的元素复制进去 取出部分数组的内容产生新数组 concat(…items) —— 返回一个新数组：复制当前数组的所有元素，并向其中添加 items。如果 items 中的任意一项是一个数组，那么就取其元素。 拼接多个数组，产生一个新的数组 *搜索元素： indexOf/lastIndexOf(item, pos) —— 从索引 pos 开始搜索 item，搜索到则返回该项的索引，否则返回 -1。 includes(value) —— 如果数组有 value，则返回 true，否则返回 false。 find/filter(func) —— 通过 func 过滤元素，返回使 func 返回 true 的第一个值/所有值。 findIndex 和 find 类似，但返回索引而不是值。 遍历元素： forEach(func) —— 对每个元素都调用 func，不返回任何内容。 let fruits = ['Apple', 'Orage','Prism'] for ( let fruit of fruits ) {alert(fruit); } // 遍历数组 使用 for .. of 不能获取到当前元素的索引，知识获取到元素的值；但是大多数情况下是够用的，而且这样些代码更短，质量会高一些 for (let i = 0; i \u003c= fruits.length; i++ ) {alert(fruits[i])} // 这个方式就是标准的通过遍历元素的索引，然后通过索引获取到对应的数组元素的值 转换数组： map(func) —— 根据对每个元素调用 func 的结果创建一个新数组。 sort(func) —— 对数组进行原位（in-place）排序，然后返回它。 reverse() —— 原位（in-place）反转数组，然后返回它。 split/join —— 将字符串转换为数组并返回。 reduce/reduceRight(func, initial) —— 通过对每个元素调用 func 计算数组上的单个值，并在调用之间传递中间结果。 其他： Array.isArray(arr) 检查 arr 是否是一个数组。 请注意，sort，reverse 和 splice 方法修改的是数组本身； 这些是最常用的方法，它们覆盖 99％ 的用例。但是还有其他几个： arr.some(fn)/arr.every(fn) 检查数组。 与 map 类似，对数组的每个元素调用函数 fn。如果任何/所有结果为 true，则返回 true，否则返回 false。 这两个方法的行为类似于 || 和 \u0026\u0026 运算符：如果 fn 返回一个真值，arr.some() 立即返回 true 并停止迭代其余数组项；如果 fn 返回一个假值，arr.every() 立即返回 false 并停止对其余数组项的迭代。 我们可以使用 every 来比较数组： function arraysEqual(arr1, arr2) { return arr1.length === arr2.length \u0026\u0026 arr1.every((value, index) =\u003e value === arr2[index]); } alert( arraysEqual([1, 2], [1, 2])); // true arr.fill(value, start, end) —— 从索引 start 到 end，用重复的 value 填充数组。 arr.copyWithin(target, start, end) —— 将从位置 start 到 end 的所有元素复制到 自身 的 target 位置（覆盖现有元素）。 arr.flat(depth)/arr.flatMap(fn) 从多维数组创建一个新的扁平数组。 Array.of(element0[, element1[, …[, elementN]]]) 基于可变数量的参数创建一个新的 Array 实例，而不需要考虑参数的数量或类型。 ","date":"2022-03-28","objectID":"https://samzong.me/javascript-tips/:0:10","series":null,"tags":["Javascript","HTML"],"title":"Javascript Tips","uri":"https://samzong.me/javascript-tips/#数组方法的备忘笔记"},{"categories":["Blog","Hexo"],"content":"About my blog use hexo plugin ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:0:0","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#"},{"categories":["Blog","Hexo"],"content":" 1. hexo-tag-youtube-responsivehexo-tag-youtube-responsive is Hexo tag plugin to embed a Youtube video that auto resizes with your responsive layout ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:1:0","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#hexo-tag-youtube-responsive"},{"categories":["Blog","Hexo"],"content":" 1.1 Install npm install hexo-tag-youtube-responsive --save ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:1:1","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#install"},{"categories":["Blog","Hexo"],"content":" 1.2 Embed a video {% youtuber video VIDEO_ID %} {% endyoutuber %} For example {% youtuber video I07XMi7MHd4 %} {% endyoutuber %} ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:1:2","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#embed-a-video"},{"categories":["Blog","Hexo"],"content":" 1.3 Embed a playlist {% youtuber playlist PLAYLIST_ID %} {% endyoutuber %} For example {% youtuber playlist PLC77007E23FF423C6 %} {% endyoutuber %} Note that you need to prepend the playlist ID with the letters PL as shown above ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:1:3","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#embed-a-playlist"},{"categories":["Blog","Hexo"],"content":" 1.4 Demo{% youtuber video I07XMi7MHd4 %} {% endyoutuber %} ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:1:4","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#demo"},{"categories":["Blog","Hexo"],"content":" 2. hexo-hide-postshexo-hide-posts is A plugin to hide specific posts from your Hexo blog and make them only accessible by links ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:2:0","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#hexo-hide-posts"},{"categories":["Blog","Hexo"],"content":" 2.1 Installation $ npm install hexo-hide-posts --save Usage Add hidden: true to the front-matter of posts which you want to hide. e.g. Edit source/_posts/lorem-ipsum.md: --- title: 'Lorem Ipsum' date: '2019/8/10 11:45:14' hidden: true --- Lorem ipsum dolor sit amet, consectetur adipiscing elit. This post will not be shown anywhere, but you can still access it by https://hexo.test/lorem-ipsum/. (If you want to completely prevent a post from rendering, just set it as a draft.) To get a list of hidden posts, you can run hexo hidden:list from command line. For developers, all_posts and hidden_posts added to Local Variables may be useful. ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:2:1","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#installation"},{"categories":["Blog","Hexo"],"content":" 2.2 ConfigIn your site’s _config.yml: # hexo-hide-posts hide_posts: enable: true # Change the filter name to fit your need filter: hidden # Generators which you want to expose all posts (include hidden ones) to. # Common generators: index, tag, category, archive, sitemap, feed, etc. public_generators: [] # Add \"noindex\" meta tag to prevent hidden posts from being indexed by search engines noindex: true ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:2:2","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#config"},{"categories":["Blog","Hexo"],"content":" 3. hexo-generator-restfulhexo-generator-restful is generate restful json data for Hexo plugins. ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:3:0","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#hexo-generator-restful"},{"categories":["Blog","Hexo"],"content":" 3.1 Install npm install hexo-generator-restful --save ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:3:1","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#install-1"},{"categories":["Blog","Hexo"],"content":" 3.2 Config以下为默认配置，属性值为 false 表示不生成。 restful: # site 可配置为数组选择性生成某些属性 # site: ['title', 'subtitle', 'description', 'author', 'since', email', 'favicon', 'avatar'] site: true # hexo.config mix theme.config posts_size: 10 # 文章列表分页，0 表示不分页 posts_props: # 文章列表项的需要生成的属性 title: true slug: true date: true updated: true comments: true path: true excerpt: false cover: true # 封面图，取文章第一张图片 content: false keywords: false categories: true tags: true categories: true # 分类数据 use_category_slug: false # Use slug for filename of category data tags: true # 标签数据 use_tag_slug: false # Use slug for filename of tag data post: true # 文章数据 pages: false # 额外的 Hexo 页面数据, 如 About ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:3:2","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#config-1"},{"categories":["Blog","Hexo"],"content":" 3.3 Get Hexo Config获取所有 Hexo 配置（站点配置和主题配置）。 Request GET /api/site.json Response /api/site.json ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:3:3","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#get-hexo-config"},{"categories":["Blog","Hexo"],"content":" 3.4 Get Posts如果配置 posts_size: 0 则不分页，以下请求会获取全部文章。 Request GET /api/posts.json Response 示例为分页配置下的数据，会包含分页属性 total、pageSize、pageCount，不分页的数据不包含这三项。 /api/posts.json ","date":"2022-03-27","objectID":"https://samzong.me/awesome-hexo-plugins/:3:4","series":null,"tags":["Hexo"],"title":"Awesome Hexo Plugin","uri":"https://samzong.me/awesome-hexo-plugins/#get-posts"},{"categories":["Python"],"content":"poetry 是目前比较流行的 Python 环境管理工具 和 包管理工具，对多项目开发时的环境隔离有非常大的帮助，同时集成了包管理能力。 官方网站 https://python-poetry.org/ 集成了所有 Poetry 最新的使用文档，以下仅在我的环境上经过验证 ","date":"2022-03-27","objectID":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:0:0","series":null,"tags":["Python","Poetry"],"title":"Poetry 使用笔记","uri":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/#"},{"categories":["Python"],"content":" 1. 安装方式 # In Pip - 安装 pip install poetry # pip3 - 更新 poetry self update # In my Mac - 安装 brew install poetry - 更新 brew upgrade poetry # In my CentOS - 安装 curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - - 更新 poetry self update ","date":"2022-03-27","objectID":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:1:0","series":null,"tags":["Python","Poetry"],"title":"Poetry 使用笔记","uri":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/#安装方式"},{"categories":["Python"],"content":" 2. 配置技巧相关在开始使用前，建议先对poetry 的配置有些了解，并调整为适合你的方式，主要是调整一下虚拟环境的安装位置 poetry config poetry 相关的查看和编辑的命令 ~ poetry config --list # 获取当前 poetry 的配置情况 cache-dir = \"/Users/$username/Library/Caches/pypoetry\" experimental.new-installer = true installer.parallel = true virtualenvs.create = true virtualenvs.in-project = true virtualenvs.path = \"{cache-dir}/virtualenvs\" # /Users/$username/Library/Caches/pypoetry/virtualenvs 配置项目 配置内容 配置项说明 建议配置 cache-dir String 缓存目录配置，使用 poetry 安装的包源文件都会缓存到这个目录。 不建议更改 installer.parallel boolean 此配置会被忽略 virtualenvs.create boolean 默认为true，如果当前工程的虚拟环境不存在，就创建一个 不建议更改 virtualenvs.in-project boolean None：poetry 会在系统特定目录创建一个.venv目录，由下面的 path 参数指定 true： poetry 会在项目根目录创建一个.venv目录 false： poetry 将会忽略已存在的.venv目录 《建议修改》 推荐这种方式，在项目根目录创建虚拟环境，这样就算移动目录位置也不影响虚拟环境的使用 virtualenvs.path string 默认是{cache-dir}/virtualenvs，虚拟环境创建的目录，如果上面的 in-project 为 true，此配置就无效 不建议更改 建议 在使用前 启用 virtualenvs.in-project ，这样会在每个项目下有一个.venv 方便隔离管理 # poetry 配置说明 poetry config virtualenvs.in-project true ","date":"2022-03-27","objectID":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:2:0","series":null,"tags":["Python","Poetry"],"title":"Poetry 使用笔记","uri":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/#配置技巧相关"},{"categories":["Python"],"content":" 3. poetry 常用指令说明 Poetry Command 解释 $ poetry –version 显示您的 Poetry 安装版本。 $ poetry new 创建一个新的Poetry项目。 $ poetry init 将 Poetry 添加到现有项目中。 $ poetry run 使用 Poetry 执行给定的命令。 $ poetry add 添加一个包pyproject.toml并安装它。 $ poetry update 更新项目的依赖项。 $ poetry install 安装依赖项。 $ poetry show 列出已安装的软件包。 $ poetry lock 将最新版本的依赖项固定到poetry.lock. $ poetry lock –no-update 刷新poetry.lock文件而不更新任何依赖版本。 $ poetry check 验证pyproject.toml。 $ poetry config –list 显示 Poetry 配置。 $ poetry env list 列出项目的虚拟环境。 $ poetry export 导出poetry.lock为其他格式。 ","date":"2022-03-27","objectID":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:3:0","series":null,"tags":["Python","Poetry"],"title":"Poetry 使用笔记","uri":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/#poetry-常用指令说明"},{"categories":["Python"],"content":" 4. 新项目初始化流程 这里以 初始化一个 FastAPI 项目作为 实例 ➜ fastapi poetry new fastapi-demo Created package fastapi_demo in fastapi-demo ➜ fastapi ls -lh fastapi-demo total 8 -rw-r--r-- 1 samzonglu staff 0B 2 15 14:28 README.rst drwxr-xr-x 3 samzonglu staff 96B 2 15 14:28 fastapi_demo -rw-r--r-- 1 samzonglu staff 304B 2 15 14:28 pyproject.toml drwxr-xr-x 4 samzonglu staff 128B 2 15 14:28 tests ➜ fastapi cd fastapi-demo ➜ fastapi-demo poetry env use 3.10.2 # 配置项目的虚拟环境 ","date":"2022-03-27","objectID":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:4:0","series":null,"tags":["Python","Poetry"],"title":"Poetry 使用笔记","uri":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/#新项目初始化流程"},{"categories":["Python"],"content":" 5. requirements.txt 已存在项目使用poetry这里会遇到一个问题，已存在的项目基本都已经有了 requirements.txt， 所以 poetry 最好可以直接读取它 poetry add `cat requirements.txt` 将项目依赖导出为 requirements.txt poetry export --output requirements.txt ","date":"2022-03-27","objectID":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/:5:0","series":null,"tags":["Python","Poetry"],"title":"Poetry 使用笔记","uri":"https://samzong.me/poetry-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/#requirementstxt-已存在项目使用poetry"},{"categories":null,"content":" to_url : http://pyenv.run/ github offical site https://github.com/pyenv/pyenv 在 MacOS 的使用方式： brew install pyenv 使用 pyenv 还是挺方便的，但是在Linux云服务器上配置网络的话就比较麻烦了，比如我在用的阿里云ECS，中间有些曲折，所以编写下文档记录下来，以防后续使用遇到问题 ","date":"2022-03-27","objectID":"https://samzong.me/python-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:0:0","series":null,"tags":["Python"],"title":"Pyenv Python多版本管理利器","uri":"https://samzong.me/python-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#"},{"categories":null,"content":" 1. 安装 pyenv # 官方推荐 curl https://pyenv.run | bash 上面一个简单的命令就好了，安装后 pyenv 文件 会在你的 $HOME/.pyenv ，可以尝试看下脚本文件的内容，这里简单贴出来了；可以看到实际执行的脚本文件是下面这个 # 建议看下脚本 curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash # 下载脚本文件 wget https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer -O ~/pyenv-installer 如果你的服务器环境比较悲催，访问GitHub也是比较麻烦，那么可以看下这个网站 https://gitclone.com/ ； 只需要对 pyenv-installer 进行简单的修改就可以实现加速下载了 # ...... if [ -n \"${USE_GIT_URI}\" ]; then GITHUB=\"git://github.com\" else GITHUB=\"https://gitclone.com/github.com\" fi # ..... 先通过，wget 下载脚本文件，然后对脚本中的 github.com 的域名进行下修改，我试了下修改https就行了，然后就可以飞快的下载了 最后，将 pyenv 的初始化增加到系统的环境变量中 echo 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' \u003e\u003e ~/.bashrc echo 'eval \"$(pyenv init -)\"' \u003e\u003e ~/.bashrc echo 'eval \"$(pyenv virtualenv-init -)\"' \u003e\u003e ~/.bashrc ","date":"2022-03-27","objectID":"https://samzong.me/python-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:1:0","series":null,"tags":["Python"],"title":"Pyenv Python多版本管理利器","uri":"https://samzong.me/python-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#安装-pyenv"},{"categories":null,"content":" 2. 使用 pyenv 安装特定版本的python在网络好的情况下，可以直接通过 pyenv install 3.9.6 安装对应的版本了，但是因为网络的问题，你会发现一直在下载 Python 包这一步，问题就是 www.python.org/ftp 网络的访问问题 遇到这个问题，可以尝试 先下载对应版本的安装包；可以使用国内的镜像站进行下载，或者在网络访问正常的地方进行下载包，然后上传到服务器中，这里推荐使用 淘宝的镜像站，把域名中 https://www.python.org/ftp 替换为 https://npm.taobao.org/mirrors/ ，下载到指定的目录 # v = 你想要安装的python版本，比如 3.8.6 export v=3.8.6; mkdir -p ~/.pyenv/sources/$v; wget https://npm.taobao.org/mirrors/python/$v/Python-$v.tar.xz -P ~/.pyenv/sources/$v; pyenv install $v -k 在 pyenv 命令的最后增加一个 -k 会在安装时，优先检测本地的文件 ","date":"2022-03-27","objectID":"https://samzong.me/python-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/:2:0","series":null,"tags":["Python"],"title":"Pyenv Python多版本管理利器","uri":"https://samzong.me/python-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/#使用-pyenv-安装特定版本的python"},{"categories":["闲聊"],"content":"年轻的人儿啊！ 要记得星空多美丽 ~ 岁月如歌，大肠包小肠 ","date":"2022-03-11","objectID":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/:0:0","series":null,"tags":["随笔"],"title":"2022 新的目标","uri":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/#"},{"categories":["闲聊"],"content":" 1. 终局新年结束，已经走完了3个月了，瞎忙碌碌无为，内心的焦灼，不断在每个独处时拷问心神，久久回响不息 迷惘和挫败的情绪，积累了好久。 最近重读了 柏拉图的理想国，耐着性子，花了接近一个月的时间才断断续续的看完。 终于有个好消息，终于想清楚了，今年的目标。 ","date":"2022-03-11","objectID":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/:1:0","series":null,"tags":["随笔"],"title":"2022 新的目标","uri":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/#终局"},{"categories":["闲聊"],"content":" 2. 新开始 要做的是两件事 回归产品的初心，不负自己 确认真正想做的事情；既然想好了，就有大量的准备工作要开展，先留在心里 ","date":"2022-03-11","objectID":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/:2:0","series":null,"tags":["随笔"],"title":"2022 新的目标","uri":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/#新开始"},{"categories":["闲聊"],"content":" 3. 人生不如戏回想了下，找不到方向时，的确需要花很长的时间来走弯路。 可是，不能放弃啊！ ","date":"2022-03-11","objectID":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/:3:0","series":null,"tags":["随笔"],"title":"2022 新的目标","uri":"https://samzong.me/2022-%E6%96%B0%E7%9A%84%E7%9B%AE%E6%A0%87/#人生不如戏"},{"categories":null,"content":" 1. 写在开始之前的话已经停更了接近3年的博客，感觉像是走了另一个方向的路，有点迷失方向的感觉；这三年算是人生中变化很多的地方吧。 不过也有不少地方其实没变化，比如： 报名学车 到现在还是没有学成 , 过去了半年的时间，驾照到手，车子也到手了，日子在好转 ~ 转职安心做一名研发，可水平还是吊儿郎当, 拜托了前半年的工作焦虑状态，现在算是进到了一个新的环境 现在忙了点，不过还好，有时候觉得糟糕透了，坚持过去也就没什么大不了 这三年，也是有了很大的变化，最大的变化可能是：成为了一名全职的产品经理，而竟然我有一半的时间还在纠结是不是要回去。 思绪有点乱，后面再继续写吧 ","date":"2021-06-02","objectID":"https://samzong.me/2021%E5%B9%B4-%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/:1:0","series":null,"tags":["随笔"],"title":"2021年-全新出发","uri":"https://samzong.me/2021%E5%B9%B4-%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/#写在开始之前的话"},{"categories":null,"content":" 2. 关于hexo博客这边的确有很长时间没有更新，接下来应该会做些优化。 ","date":"2021-06-02","objectID":"https://samzong.me/2021%E5%B9%B4-%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/:2:0","series":null,"tags":["随笔"],"title":"2021年-全新出发","uri":"https://samzong.me/2021%E5%B9%B4-%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/#关于hexo"},{"categories":null,"content":" 3. 最后好多话想要说，一地鸡毛。 ","date":"2021-06-02","objectID":"https://samzong.me/2021%E5%B9%B4-%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/:3:0","series":null,"tags":["随笔"],"title":"2021年-全新出发","uri":"https://samzong.me/2021%E5%B9%B4-%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/#最后"},{"categories":null,"content":" 1. 1. https://isapplesiliconready.com/ 1.0.1 If you have any apps want and to here. Please click REQUEST AN APP or use this link： https://isapplesiliconready.com/request/ ","date":"2020-11-24","objectID":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/:1:0","series":null,"tags":["mac"],"title":"Check You App readyOnAppleSilicon","uri":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/#1-httpsisapplesiliconreadycom"},{"categories":null,"content":" 1. 1. https://isapplesiliconready.com/ 1.0.1 If you have any apps want and to here. Please click REQUEST AN APP or use this link： https://isapplesiliconready.com/request/ ","date":"2020-11-24","objectID":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/:1:0","series":null,"tags":["mac"],"title":"Check You App readyOnAppleSilicon","uri":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/#if-you-have-any-apps-want-and-to-here-please-click-request-an-app--or-use-this-link"},{"categories":null,"content":" 2. 2. https://doesitarm.com/ 2.0.2 If you want watching any apps change? Input you email at Tell me with this changes ","date":"2020-11-24","objectID":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/:2:0","series":null,"tags":["mac"],"title":"Check You App readyOnAppleSilicon","uri":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/#2-httpsdoesitarmcom"},{"categories":null,"content":" 2. 2. https://doesitarm.com/ 2.0.2 If you want watching any apps change? Input you email at Tell me with this changes ","date":"2020-11-24","objectID":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/:2:0","series":null,"tags":["mac"],"title":"Check You App readyOnAppleSilicon","uri":"https://samzong.me/check-you-favorites-app-is-ready-apple-silicon/#if-you-want-watching-any-apps-change-input--you-email-at--tell-me-with-this-changes"},{"categories":["数据库","MySQL"],"content":" 0.0.0.1 InstallMycli is tested on macOS and Linux. It runs on Python 2.7 and 3.4+. NOTE: Python 2.6 support was dropped in mycli 1.9.0. If you’re running Python 2.6, you’ll want to install mycli 1.8.1. ######Python Package: If you already know how to install python packages, then you can do: You might need sudo. $ pip install mycli or $ easy_install mycli # Windows: # Follow the instructions on this blogpost to install mycli on Windows: https://www.codewall.co.uk/installing-using-mycli-on-windows/ # macOS: #The easiest way install mycli on a Mac is to use Homebrew. $ brew install mycli # Linux: # Debian/Ubuntu Package: # https://packages.debian.org/search?keywords=mycli $ sudo apt-get update $ sudo apt-get install mycli # Fedora $ sudo dnf install mycli # RHEL, Centos: # We don't have packages for RHEL or Centos, yet. Instead, use pip to install mycli. You can install pip on your system using: $ sudo yum install python-pip python-devel # Once that is installed, you can install mycli: $ sudo pip install mycli 0.0.0.2 Install Error QA. Cannot uninstall 'configobj'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall. 0.0.0.2.1 Fix code pip install --ignore-installed mycli ","date":"2019-07-03","objectID":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 命令行辅助 mycli","uri":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/#"},{"categories":["数据库","MySQL"],"content":" 0.0.0.1 InstallMycli is tested on macOS and Linux. It runs on Python 2.7 and 3.4+. NOTE: Python 2.6 support was dropped in mycli 1.9.0. If you’re running Python 2.6, you’ll want to install mycli 1.8.1. ######Python Package: If you already know how to install python packages, then you can do: You might need sudo. $ pip install mycli or $ easy_install mycli # Windows: # Follow the instructions on this blogpost to install mycli on Windows: https://www.codewall.co.uk/installing-using-mycli-on-windows/ # macOS: #The easiest way install mycli on a Mac is to use Homebrew. $ brew install mycli # Linux: # Debian/Ubuntu Package: # https://packages.debian.org/search?keywords=mycli $ sudo apt-get update $ sudo apt-get install mycli # Fedora $ sudo dnf install mycli # RHEL, Centos: # We don't have packages for RHEL or Centos, yet. Instead, use pip to install mycli. You can install pip on your system using: $ sudo yum install python-pip python-devel # Once that is installed, you can install mycli: $ sudo pip install mycli 0.0.0.2 Install Error QA. Cannot uninstall 'configobj'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall. 0.0.0.2.1 Fix code pip install --ignore-installed mycli ","date":"2019-07-03","objectID":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 命令行辅助 mycli","uri":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/#install"},{"categories":["数据库","MySQL"],"content":" 0.0.0.1 InstallMycli is tested on macOS and Linux. It runs on Python 2.7 and 3.4+. NOTE: Python 2.6 support was dropped in mycli 1.9.0. If you’re running Python 2.6, you’ll want to install mycli 1.8.1. ######Python Package: If you already know how to install python packages, then you can do: You might need sudo. $ pip install mycli or $ easy_install mycli # Windows: # Follow the instructions on this blogpost to install mycli on Windows: https://www.codewall.co.uk/installing-using-mycli-on-windows/ # macOS: #The easiest way install mycli on a Mac is to use Homebrew. $ brew install mycli # Linux: # Debian/Ubuntu Package: # https://packages.debian.org/search?keywords=mycli $ sudo apt-get update $ sudo apt-get install mycli # Fedora $ sudo dnf install mycli # RHEL, Centos: # We don't have packages for RHEL or Centos, yet. Instead, use pip to install mycli. You can install pip on your system using: $ sudo yum install python-pip python-devel # Once that is installed, you can install mycli: $ sudo pip install mycli 0.0.0.2 Install Error QA. Cannot uninstall 'configobj'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall. 0.0.0.2.1 Fix code pip install --ignore-installed mycli ","date":"2019-07-03","objectID":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 命令行辅助 mycli","uri":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/#install-error-qa"},{"categories":["数据库","MySQL"],"content":" 0.0.0.1 InstallMycli is tested on macOS and Linux. It runs on Python 2.7 and 3.4+. NOTE: Python 2.6 support was dropped in mycli 1.9.0. If you’re running Python 2.6, you’ll want to install mycli 1.8.1. ######Python Package: If you already know how to install python packages, then you can do: You might need sudo. $ pip install mycli or $ easy_install mycli # Windows: # Follow the instructions on this blogpost to install mycli on Windows: https://www.codewall.co.uk/installing-using-mycli-on-windows/ # macOS: #The easiest way install mycli on a Mac is to use Homebrew. $ brew install mycli # Linux: # Debian/Ubuntu Package: # https://packages.debian.org/search?keywords=mycli $ sudo apt-get update $ sudo apt-get install mycli # Fedora $ sudo dnf install mycli # RHEL, Centos: # We don't have packages for RHEL or Centos, yet. Instead, use pip to install mycli. You can install pip on your system using: $ sudo yum install python-pip python-devel # Once that is installed, you can install mycli: $ sudo pip install mycli 0.0.0.2 Install Error QA. Cannot uninstall 'configobj'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall. 0.0.0.2.1 Fix code pip install --ignore-installed mycli ","date":"2019-07-03","objectID":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 命令行辅助 mycli","uri":"https://samzong.me/mysql-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%85%E5%8A%A9-mycli/#fix-code"},{"categories":["Python"],"content":"最近在GitHub上发现一个有趣的项目，百度网盘Python客户端(bypy)，主要使用在Linux命令行下，这样很大的一个好处是可以利用到百度云盘2TB的存储空间(如果你是会员有6TB)；你可以在任何服务器上，利用自动化脚本实现一些数据文件、日志文件等等备份操作，同时也提供丰富的文件列表、上传、下载、对比、同步以及批量操作等。 虽然百度网盘Python客户端提供很大的便利，但是我强烈不建议将一些重要数据放到百度云盘 ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:0:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#"},{"categories":["Python"],"content":" 1. 实验目的数据库备份文件自动上传到百度网盘 ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:1:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#实验目的"},{"categories":["Python"],"content":" 2. 环境依赖 Python 2.7 or 3.0 以上 Encoding UTF-8 ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:2:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#环境依赖"},{"categories":["Python"],"content":" 3. Python 环境首先使用python -V检查你的Python版本，如果你的版本是2.7或以上，那么就不需要做任何操作，可以直接安装bypy，但是如果你像我一样多数是CentOS 6.x 那么就需要先升级Python版本。我这里是将Python升级到2.7。 ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:3:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#python-环境"},{"categories":["Python"],"content":" 3.1 Install Python 2.7 # Check current Python version ➜ ~ python -V Python 2.6.6 # Download python 2.7.13 or new packge. ➜ ~ wget http://www.python.org/ftp/python/2.7.13/Python-2.7.13.tar.xz # Extract and change in ➜ ~ tar xf Python-2.7.13.tar.xz ➜ ~ cd Python-2.7.13 # Run the configure: ➜ Python-2.7.13 ./configure --prefix=/usr/local # Compile and install it: ➜ Python-2.7.13 make \u0026\u0026 make altinstall # Check Python Version ➜ Python-2.7.13 python2.7 -V Python 2.7.13 虽然Python2.7已经安装成功了，但是默认的Python仍然是2.6版本，所以我们要替换默认Python命令指到2.7 # Update bin python to python2.7 ➜ ~ ll /usr/bin/python /usr/local/bin/python2.7 ➜ ~ ll /usr/bin/python-config /usr/local/bin/python2.7-config ➜ ~ python -V Python 2.7.13 ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:3:1","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#install-python-27"},{"categories":["Python"],"content":" 3.2 Can not use Yum ?因为yum必须要使用Python2.6 ，所以当升级成功之后，发现yum无法使用，这时我们要稍微修改下： ➜ ~ which-command yum /usr/bin/yum #Update frist line \"#!/usr/bin/python\" to \"#!/usr/bin/python2.6\" ➜ ~ vim /usr/bin/yum ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:3:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#can-not-use-yum-"},{"categories":["Python"],"content":" 4. 安装bypy 4.0.0.1 Install Setuptools \u0026 requests ➜ ~ wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz tar xf setuptools-1.4.2.tar.gz ➜ ~ python setup.py install ➜ ~ pip2.7 install requests ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#安装bypy"},{"categories":["Python"],"content":" 4. 安装bypy 4.0.0.1 Install Setuptools \u0026 requests ➜ ~ wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz tar xf setuptools-1.4.2.tar.gz ➜ ~ python setup.py install ➜ ~ pip2.7 install requests ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#install-setuptools--requests"},{"categories":["Python"],"content":" 4.1 Clone \u0026 Install ➜ ~ git clone https://github.com/houtianze/bypy.git ➜ ~ cd bypy ➜ bypy git:(master) python setup.py install 如果安装失败，注意看报错，是否缺少Python依赖包，或者版本不对 ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:1","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#clone---install"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#基本操作"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#授权"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#常用操作"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#查看"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#创建文件夹"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#上传"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#本地同步到百度网盘"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#搜索"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#比较本地与百度网盘"},{"categories":["Python"],"content":" 4.2 基本操作在成功安装完成之后，以下需要注意： 4.2.1 授权首次安装之后，需要进行授权，只需要运行任何一个命令都可以，例如bypy info，然后根据提示，打开网页登录你的百度网盘账号，取得授权码，即可。 复制上图中的链接到你的浏览器中，打开可以看到百度API授权页面，如下图，将授权码粘贴到命令行，然后回车等待验证通过即可。 然后再次运行命令时，就不需要进行身份验证了 [root@localhost bypy]# bypy info Quota: 6.103TB Used: 180.074GB 你可以看到我的百度网盘有6.103TB的空间，已经使用了180.074GB 4.2.2 常用操作由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。通过以下链接可以打开你的bypy默认路径： https://pan.baidu.com/disk/home#list/vmode=list\u0026path=%2Fapps%2Fbypy 4.2.3 查看我在百度网盘内增加了一个v6的文件夹，对应我服务器名称，这是我在服务器内利用命令即可看到。 [root@localhost bypy]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 4.2.4 创建文件夹 [root@localhost ~]# bypy mkdir v6/bypy [root@localhost ~]# bypy list v6 /apps/bypy/v6 ($t $f $s $m $d): D bypy 0 2017-06-02, 10:35:53 4.2.5 上传 [root@localhost ~]# bypy upload bypy.tgz [root@localhost ~]# bypy list /apps/bypy ($t $f $s $m $d): D v6 0 2017-06-02, 10:28:41 D v6_1 0 2017-06-02, 10:34:52 F bypy.tgz 2867963 2017-06-02, 10:37:30 aa4160cdbf2f4eca9baf0fcd395241fe 4.2.6 本地同步到百度网盘使用syncup参数将本地目录文件同步到百度网盘 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# bypy list v6/bypy /apps/bypy/v6/bypy ($t $f $s $m $d): D .git 0 2017-06-02, 10:45:31 D baidudoc 0 2017-06-02, 10:44:50 D build 0 2017-06-02, 10:45:11 D bypy 0 2017-06-02, 10:45:54 D bypy.egg-info 0 2017-06-02, 10:45:00 D dist 0 2017-06-02, 10:44:54 D update 0 2017-06-02, 10:45:08 F .editorconfig 277 2017-06-02, 10:45:08 d9f71b00f908626ae68da571ca47cbe2 F .gitignore 484 2017-06-02, 10:45:00 833d8511a69044a1f1c6e0fe4b3c3117 F .travis.yml 628 2017-06-02, 10:44:58 9f377251309ced0a55548c18896ebd7a F CONTRIBUTING.md 683 2017-06-02, 10:44:52 f5e8a568937039e5853613ff0fe296ee F genrst.py 129 2017-06-02, 10:45:30 4565eddf226c2e8bed73d2c30dfae9f3 F HISTORY.md 2542 2017-06-02, 10:45:11 16605670a55a3dd9768d4c862543eac4 F HISTORY.rst 2639 2017-06-02, 10:44:57 7215fbd0a3be667fd7f9fda14f06c1a9 F LICENSE 1078 2017-06-02, 10:44:59 ebd1a0c53ea3046f505b995629faf8fb F MANIFEST.in 116 2017-06-02, 10:44:50 c98e18e65329b318f13abd031a4397c4 F README.md 6276 2017-06-02, 10:46:15 d4b88fd543d93c6b63863d28f5c4e716 F release.sh 1795 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 F requirements.txt 42 2017-06-02, 10:44:54 28b314f2f2d2ed79957a7a7e6d3f7c17 F setup.cfg 70 2017-06-02, 10:45:11 b23579970dcedbcaeaaa00636d601335 F setup.py 2377 2017-06-02, 10:44:58 34d63d5143ab02d3db7808321a7f9df4 [root@localhost ~]# bypy syncup ./bypy v6/bypy [root@localhost ~]# 4.2.7 搜索bypy 同样支持搜索，根据文件名检索，自动递归所有目录 [root@localhost ~]# bypy search release.sh Found: F /apps/bypy/v6/bypy/release.sh 1795 2017-06-02, 10:45:53 2017-06-02, 10:45:53 c086eb283e9554bbcd23daf0888e2819 4.2.8 比较本地与百度网盘 # 先删除本地一个文件 [root@localhost ~]# rm ./bypy/release.sh # 对比 [root@localhost ~]# bypy compare v6/bypy ./bypy ==== Same files === F - MANIFEST.in ... omit ... F - bypy/monkey.py F - README.md ==== Different files === ==== Local only ==== ==== Remote only ==== F - release.sh Statistics: -------------------------------- Same: 131 Different: 0 Local only: 0 Remote only: 1 通过以上可以看到，相同文件131，远程目录多了一个文件。 4.2.9 其他bypy支持的操作很多，使用bypy help即可以看到，若要调试，使用以下参数可以打开对应调试信息： 运行时添加-v参数，会显示进度详情。 运行时添加-d，会显示一些调试信息。 运行时添加-ddd，还会会显示HTTP通讯信息（警告：非常多） ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:4:2","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#其他"},{"categories":["Python"],"content":" 5. 数据库备份自动上传到百度网盘之前也写过很多关于Mysql备份的文章，如果要详细查看，请打开以下链接：分类MySQL # create back script. [root@localhost ~]# touch mysql_back.sh # add executable permissions [root@localhost ~]# chmod +x mysql_back.sh [root@localhost ~]# vim mysql_back.sh #!/bin/bash # # backup mysqldump file to baidu yunPan # filepath: /usr/local/bin/mysql_back.sh # Author: samzong # function upload_file(){ TIME=`date \"+%Y%m%d%H%M%S\"` folder=\"/mysqlbak\" filename=\"db_$TIME.sql\" filePath=$folder/$filename if [ ! -f $filePath ]; then echo \"[ERROR][\"`date +%Y-%m-%d' '%H:%M:%S`\"] $folder/$filename not found.\" else echo \"[INFO][\"`date +%Y-%m-%d' '%H:%M:%S`\"] $folder/$filename has been found. Start uploading ......\" bypy upload \"$filePath\" \"v6/mysql_backup/$filename\" echo \"[INFO][\"`date +%Y-%m-%d' '%H:%M:%S`\"] Uploading end.\" fi } # set TIME variable TIME=`date \"+%Y%m%d%H%M%S\"` # backup db ghost to /mysqlbak/ mysqldump --single-transaction -h localhost -u ghost_backuser -pbackupPass ghost \u003e /mysqlbak/db_$TIME.sql # tar sql file tar czvf /mysqlbak/ghost_$TIME.sql.tgz /mysqlbak/ghost_$TIME.sql --remove-files # upload sql file to baidu yunPan. upload_file; # send mial to admin'mial if [ $? -eq 0 ]; then echo \"ghost SQL dump is successfully. At time: `date` \" | mail -s ghost-dump-successfully samzong.lu@gmail.com else echo \" Error Error ghost SQL dump is Error. At time: `date` \" | mail -s ghost-dump-error samzong.lu@gmail.com fi ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:5:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#数据库备份自动上传到百度网盘"},{"categories":["Python"],"content":" 6. 添加计划任务 ~ crontab -e 00 00 * * * sh /usr/local/bin/mysql_back.sh ","date":"2017-06-02","objectID":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/:6:0","series":null,"tags":["Python"],"title":"bypy 百度网盘Python客户端","uri":"https://samzong.me/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98python%E5%AE%A2%E6%88%B7%E7%AB%AF/#添加计划任务"},{"categories":null,"content":" 我也没有等你，只是还没找不到一个比你还让我更喜欢的人。 知乎 @七万 苦涩困在胸中，日夜锥心刺骨，却如鲠在喉。 有人说：“你不必等我。” 我觉得话已经说的很明白了， 再多问一句，都是作践自己。 我到底还是喜欢的，可是喜欢的情绪从心里涌出嘴的时候，自尊就会死死的掐着脖子，根本不能说话，能好好呼吸都是享受。 我得自己走了，谢谢你带我来山顶看烟花。 你说，这事儿得怪谁呢？ 该怨你吗？怨字说不口。 终究是我一个人的梦，没理由非得拽你一起圆。 该怨我吗？实在是不忍心。 我心里住了两个小人儿。 一个跪在地上，涕零如雨，边哭边求。 另一个站他旁边，气冲斗牛，边骂边羞。 它们撕扯着我，片刻不停。 真他妈难受。 最后还是得走啊。来生，要是有来生。 我就做你的影子吧，你不必一定爱我，你也赶不走我。 或者做你手边的一本书，咱们能心平气和的聊聊天。 再不济就做你床头柜里的成人玩具，你知我长短，我知你深浅……。 这辈子，是什么都不行了。 小的时候，觉得女儿国国王就是个小贱婊， 妈的，勾搭大和尚！各种挽留，留你妈哔啊，赶紧让人办正事去得了。 长大后才知道， 这个电视剧里最可怜的不是历尽艰险的唐僧， 不是一次又一次被赶走的孙猴儿， 不是被傲娇玉帝罚的一脸懵逼的凤仙郡百姓， 不是那群刚出场就被孙悟空打死的智障炮灰， 是女儿国王啊， 这娘们把能给的都给出去了，那和尚瞅都没瞅，一句女施主请自重，断绝了她所有的念想。 唉，你没来之前我也是个要脸的人啊。 ","date":"2017-05-20","objectID":"https://samzong.me/%E6%88%91%E6%9D%A5%E5%88%B0%E8%BF%99%E4%B8%96%E4%B8%8A/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"我来到这世上","uri":"https://samzong.me/%E6%88%91%E6%9D%A5%E5%88%B0%E8%BF%99%E4%B8%96%E4%B8%8A/#"},{"categories":["Linux","CentOS"],"content":"由于刚开始做磁盘空间规划时，失误给根分区分配磁盘较小，导致后续实验环境无法进行，所以在经过研究后，决定尝试增加根分区的磁盘空间，注意这仅适用于创建在LVM上的文件系统。 ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:0","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#"},{"categories":["Linux","CentOS"],"content":" 0.1 实验环境 Parallels Desktop 12 CentOS 6.9 根分区空间 6.5GB 已使用 5.8GB 预计 增加12G 磁盘空间 ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:1","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#实验环境"},{"categories":["Linux","CentOS"],"content":" 0.2 增加一块物理磁盘Parallels Desktop 不能在线增加磁盘，所以要先将VM关闭，然后添加： 增加12G的磁盘 然后启动VM，这时可以通过fdisk -l查看当前已经增加了一块12G的磁盘 ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:2","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#增加一块物理磁盘"},{"categories":["Linux","CentOS"],"content":" 0.3 格式化磁盘并加入到VGroup组内 0.3.1 查看当前pvdisplay磁盘列表，将/dev/sdb创建pv块 [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo [root@centos ~]# pvcreate /dev/sdb Physical volume \"/dev/sdb\" successfully created [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo --- Physical volume --- PV Name /dev/sdb VG Name vg_hadoop01 PV Size 12.00 GiB / not usable 4.00 MiB Allocatable yes PE Size 4.00 MiB Total PE 3071 Free PE 3071 Allocated PE 0 PV UUID XTpaBR-512W-vQIV-fwwz-So7L-ZCa3-yjDccQ 0.3.2 查看当前vgdisplayVGroup组，将/dev/sdb加入根目录所在VGroup [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.51 GiB PE Size 4.00 MiB Total PE 1922 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 0 / 0 VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS [root@centos ~]# vgextend vg_hadoop01 /dev/sdb Volume group \"vg_hadoop01\" successfully extended [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 4 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 2 Act PV 2 VG Size 19.50 GiB PE Size 4.00 MiB Total PE 4993 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 3071 / 12.00 GiB VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS 0.3.3 查看lvdisplay根卷的名称，将磁盘加入根卷的LV [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 6.71 GiB Current LE 1718 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 [root@centos ~]# lvextend -l +100%FREE /dev/vg_hadoop01/lv_root Size of logical volume vg_hadoop01/lv_root changed from 6.71 GiB (1718 extents) to 18.71 GiB (4789 extents). Logical volume lv_root successfully resized. [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 18.71 GiB Current LE 4789 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:3","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#格式化磁盘并加入到vgroup组内"},{"categories":["Linux","CentOS"],"content":" 0.3 格式化磁盘并加入到VGroup组内 0.3.1 查看当前pvdisplay磁盘列表，将/dev/sdb创建pv块 [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo [root@centos ~]# pvcreate /dev/sdb Physical volume \"/dev/sdb\" successfully created [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo --- Physical volume --- PV Name /dev/sdb VG Name vg_hadoop01 PV Size 12.00 GiB / not usable 4.00 MiB Allocatable yes PE Size 4.00 MiB Total PE 3071 Free PE 3071 Allocated PE 0 PV UUID XTpaBR-512W-vQIV-fwwz-So7L-ZCa3-yjDccQ 0.3.2 查看当前vgdisplayVGroup组，将/dev/sdb加入根目录所在VGroup [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.51 GiB PE Size 4.00 MiB Total PE 1922 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 0 / 0 VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS [root@centos ~]# vgextend vg_hadoop01 /dev/sdb Volume group \"vg_hadoop01\" successfully extended [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 4 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 2 Act PV 2 VG Size 19.50 GiB PE Size 4.00 MiB Total PE 4993 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 3071 / 12.00 GiB VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS 0.3.3 查看lvdisplay根卷的名称，将磁盘加入根卷的LV [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 6.71 GiB Current LE 1718 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 [root@centos ~]# lvextend -l +100%FREE /dev/vg_hadoop01/lv_root Size of logical volume vg_hadoop01/lv_root changed from 6.71 GiB (1718 extents) to 18.71 GiB (4789 extents). Logical volume lv_root successfully resized. [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 18.71 GiB Current LE 4789 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:3","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#查看当前codepvdisplaycode磁盘列表将codedevsdbcode创建pv块"},{"categories":["Linux","CentOS"],"content":" 0.3 格式化磁盘并加入到VGroup组内 0.3.1 查看当前pvdisplay磁盘列表，将/dev/sdb创建pv块 [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo [root@centos ~]# pvcreate /dev/sdb Physical volume \"/dev/sdb\" successfully created [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo --- Physical volume --- PV Name /dev/sdb VG Name vg_hadoop01 PV Size 12.00 GiB / not usable 4.00 MiB Allocatable yes PE Size 4.00 MiB Total PE 3071 Free PE 3071 Allocated PE 0 PV UUID XTpaBR-512W-vQIV-fwwz-So7L-ZCa3-yjDccQ 0.3.2 查看当前vgdisplayVGroup组，将/dev/sdb加入根目录所在VGroup [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.51 GiB PE Size 4.00 MiB Total PE 1922 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 0 / 0 VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS [root@centos ~]# vgextend vg_hadoop01 /dev/sdb Volume group \"vg_hadoop01\" successfully extended [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 4 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 2 Act PV 2 VG Size 19.50 GiB PE Size 4.00 MiB Total PE 4993 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 3071 / 12.00 GiB VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS 0.3.3 查看lvdisplay根卷的名称，将磁盘加入根卷的LV [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 6.71 GiB Current LE 1718 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 [root@centos ~]# lvextend -l +100%FREE /dev/vg_hadoop01/lv_root Size of logical volume vg_hadoop01/lv_root changed from 6.71 GiB (1718 extents) to 18.71 GiB (4789 extents). Logical volume lv_root successfully resized. [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 18.71 GiB Current LE 4789 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:3","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#查看当前codevgdisplaycodevgroup组将codedevsdbcode加入根目录所在vgroup"},{"categories":["Linux","CentOS"],"content":" 0.3 格式化磁盘并加入到VGroup组内 0.3.1 查看当前pvdisplay磁盘列表，将/dev/sdb创建pv块 [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo [root@centos ~]# pvcreate /dev/sdb Physical volume \"/dev/sdb\" successfully created [root@centos ~]# pvdisplay --- Physical volume --- PV Name /dev/sda2 VG Name vg_hadoop01 PV Size 7.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 1922 Free PE 0 Allocated PE 1922 PV UUID MUCrDa-eJpZ-EXwE-YwwM-S2Az-p2m7-K9q3Fo --- Physical volume --- PV Name /dev/sdb VG Name vg_hadoop01 PV Size 12.00 GiB / not usable 4.00 MiB Allocatable yes PE Size 4.00 MiB Total PE 3071 Free PE 3071 Allocated PE 0 PV UUID XTpaBR-512W-vQIV-fwwz-So7L-ZCa3-yjDccQ 0.3.2 查看当前vgdisplayVGroup组，将/dev/sdb加入根目录所在VGroup [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.51 GiB PE Size 4.00 MiB Total PE 1922 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 0 / 0 VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS [root@centos ~]# vgextend vg_hadoop01 /dev/sdb Volume group \"vg_hadoop01\" successfully extended [root@centos ~]# vgdisplay --- Volume group --- VG Name vg_hadoop01 System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 4 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 2 Act PV 2 VG Size 19.50 GiB PE Size 4.00 MiB Total PE 4993 Alloc PE / Size 1922 / 7.51 GiB Free PE / Size 3071 / 12.00 GiB VG UUID szQ4fH-Sr1Z-V6c2-KVMp-ZUik-oUDP-rU8dQS 0.3.3 查看lvdisplay根卷的名称，将磁盘加入根卷的LV [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 6.71 GiB Current LE 1718 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 [root@centos ~]# lvextend -l +100%FREE /dev/vg_hadoop01/lv_root Size of logical volume vg_hadoop01/lv_root changed from 6.71 GiB (1718 extents) to 18.71 GiB (4789 extents). Logical volume lv_root successfully resized. [root@centos ~]# lvdisplay --- Logical volume --- LV Path /dev/vg_hadoop01/lv_root LV Name lv_root VG Name vg_hadoop01 LV UUID tJDetu-Theq-BQ5g-3ZFe-Gan7-1SSv-OHeYrH LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:58 +0800 LV Status available # open 1 LV Size 18.71 GiB Current LE 4789 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/vg_hadoop01/lv_swap LV Name lv_swap VG Name vg_hadoop01 LV UUID D4K7I6-tPO0-HMbC-VWkR-2HV4-WjAe-M82wYq LV Write Access read/write LV Creation host, time hadoop01, 2017-04-18 07:09:59 +0800 LV Status available # open 1 LV Size 816.00 MiB Current LE 204 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:3","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#查看codelvdisplaycode根卷的名称将磁盘加入根卷的lv"},{"categories":["Linux","CentOS"],"content":" 0.4 更新磁盘分区表当你增加完成之后，这时使用df -h查看的磁盘空间仍然没有变化，因为我们还需要将根卷的分区表刷新。 0.4.1 使用resize2fs刷新根卷信息 [root@centos ~]# resize2fs /dev/vg_hadoop01/lv_root resize2fs 1.41.12 (17-May-2010) Filesystem at /dev/vg_hadoop01/lv_root is mounted on /; on-line resizing required old desc_blocks = 1, new_desc_blocks = 2 Performing an on-line resize of /dev/vg_hadoop01/lv_root to 4903936 (4k) blocks. The filesystem on /dev/vg_hadoop01/lv_root is now 4903936 blocks long. [root@centos ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/mapper/vg_hadoop01-lv_root 19G 5.8G 12G 33% / tmpfs 244M 0 244M 0% /dev/shm /dev/sda1 477M 52M 400M 12% /boot ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:4","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#更新磁盘分区表"},{"categories":["Linux","CentOS"],"content":" 0.4 更新磁盘分区表当你增加完成之后，这时使用df -h查看的磁盘空间仍然没有变化，因为我们还需要将根卷的分区表刷新。 0.4.1 使用resize2fs刷新根卷信息 [root@centos ~]# resize2fs /dev/vg_hadoop01/lv_root resize2fs 1.41.12 (17-May-2010) Filesystem at /dev/vg_hadoop01/lv_root is mounted on /; on-line resizing required old desc_blocks = 1, new_desc_blocks = 2 Performing an on-line resize of /dev/vg_hadoop01/lv_root to 4903936 (4k) blocks. The filesystem on /dev/vg_hadoop01/lv_root is now 4903936 blocks long. [root@centos ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/mapper/vg_hadoop01-lv_root 19G 5.8G 12G 33% / tmpfs 244M 0 244M 0% /dev/shm /dev/sda1 477M 52M 400M 12% /boot ","date":"2017-04-18","objectID":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/:0:4","series":null,"tags":["LVM"],"title":"CentOS增加新硬盘给根文件系统扩容","uri":"https://samzong.me/centos%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%A1%AC%E7%9B%98%E7%BB%99%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/#使用coderesize2fscode刷新根卷信息"},{"categories":["OpenSource"],"content":"目前最为主流的在线Git版本控制系统可以说是非GitHub莫属，对于个人开发者和开源项目可以直接选择GitHub作为Git版本控制系统即可，但是，对于企业内部开发管理的Git版本控制系统，在对保密性有高要求时GitHub就不合适了，这时GitLab作为一个可以完全搭建在企业内部的Git版本控制系统，而且基本囊括了GitHub的所有功能。 0.0.1 目前GitLab已经整合的功能 Repository access Administration Issues Forks Code review Wiki Merge Requests Web Editor 0.0.2 测试环境 2 core 4GB 50GB HDD CentOS 6.8 Gitlab 0.0.3 安装需求关于GitLab的安装需求，主要是针对用户量然后评估出服务器及相关资源的配置，查看 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:0","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#"},{"categories":["OpenSource"],"content":"目前最为主流的在线Git版本控制系统可以说是非GitHub莫属，对于个人开发者和开源项目可以直接选择GitHub作为Git版本控制系统即可，但是，对于企业内部开发管理的Git版本控制系统，在对保密性有高要求时GitHub就不合适了，这时GitLab作为一个可以完全搭建在企业内部的Git版本控制系统，而且基本囊括了GitHub的所有功能。 0.0.1 目前GitLab已经整合的功能 Repository access Administration Issues Forks Code review Wiki Merge Requests Web Editor 0.0.2 测试环境 2 core 4GB 50GB HDD CentOS 6.8 Gitlab 0.0.3 安装需求关于GitLab的安装需求，主要是针对用户量然后评估出服务器及相关资源的配置，查看 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:0","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#目前gitlab已经整合的功能"},{"categories":["OpenSource"],"content":"目前最为主流的在线Git版本控制系统可以说是非GitHub莫属，对于个人开发者和开源项目可以直接选择GitHub作为Git版本控制系统即可，但是，对于企业内部开发管理的Git版本控制系统，在对保密性有高要求时GitHub就不合适了，这时GitLab作为一个可以完全搭建在企业内部的Git版本控制系统，而且基本囊括了GitHub的所有功能。 0.0.1 目前GitLab已经整合的功能 Repository access Administration Issues Forks Code review Wiki Merge Requests Web Editor 0.0.2 测试环境 2 core 4GB 50GB HDD CentOS 6.8 Gitlab 0.0.3 安装需求关于GitLab的安装需求，主要是针对用户量然后评估出服务器及相关资源的配置，查看 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:0","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#测试环境"},{"categories":["OpenSource"],"content":"目前最为主流的在线Git版本控制系统可以说是非GitHub莫属，对于个人开发者和开源项目可以直接选择GitHub作为Git版本控制系统即可，但是，对于企业内部开发管理的Git版本控制系统，在对保密性有高要求时GitHub就不合适了，这时GitLab作为一个可以完全搭建在企业内部的Git版本控制系统，而且基本囊括了GitHub的所有功能。 0.0.1 目前GitLab已经整合的功能 Repository access Administration Issues Forks Code review Wiki Merge Requests Web Editor 0.0.2 测试环境 2 core 4GB 50GB HDD CentOS 6.8 Gitlab 0.0.3 安装需求关于GitLab的安装需求，主要是针对用户量然后评估出服务器及相关资源的配置，查看 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:0","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#安装需求"},{"categories":["OpenSource"],"content":" 0.1 GitLab 安装 0.1.1 安装配置依赖项 sudo yum install curl openssh-server openssh-clients postfix cronie sudo service postfix start sudo chkconfig postfix on sudo lokkit -s http -s ssh 0.1.2 添加GitLab仓库,并安装到服务器上 curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce 0.1.3 启动GitLab并初始化 sudo gitlab-ctl reconfigure 默认登录账号是：root ，你可以在首次打开时设置密码。 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:1","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#gitlab-安装"},{"categories":["OpenSource"],"content":" 0.1 GitLab 安装 0.1.1 安装配置依赖项 sudo yum install curl openssh-server openssh-clients postfix cronie sudo service postfix start sudo chkconfig postfix on sudo lokkit -s http -s ssh 0.1.2 添加GitLab仓库,并安装到服务器上 curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce 0.1.3 启动GitLab并初始化 sudo gitlab-ctl reconfigure 默认登录账号是：root ，你可以在首次打开时设置密码。 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:1","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#安装配置依赖项"},{"categories":["OpenSource"],"content":" 0.1 GitLab 安装 0.1.1 安装配置依赖项 sudo yum install curl openssh-server openssh-clients postfix cronie sudo service postfix start sudo chkconfig postfix on sudo lokkit -s http -s ssh 0.1.2 添加GitLab仓库,并安装到服务器上 curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce 0.1.3 启动GitLab并初始化 sudo gitlab-ctl reconfigure 默认登录账号是：root ，你可以在首次打开时设置密码。 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:1","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#添加gitlab仓库并安装到服务器上"},{"categories":["OpenSource"],"content":" 0.1 GitLab 安装 0.1.1 安装配置依赖项 sudo yum install curl openssh-server openssh-clients postfix cronie sudo service postfix start sudo chkconfig postfix on sudo lokkit -s http -s ssh 0.1.2 添加GitLab仓库,并安装到服务器上 curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce 0.1.3 启动GitLab并初始化 sudo gitlab-ctl reconfigure 默认登录账号是：root ，你可以在首次打开时设置密码。 ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:1","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#启动gitlab并初始化"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#gitlab-初始化"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#开机自启动"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#gitlab-配置文件"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#smtp-邮箱配置"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#qq企业邮箱配置示例"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#gmail邮箱配置示例"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#outlook邮箱配置示例"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#gitlab-日常维护"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#1-查看服务状态"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#2-启动关闭重启"},{"categories":["OpenSource"],"content":" 0.2 GitLab 初始化 0.2.1 开机自启动 vi /etc/rc.local /opt/gitlab/bin/gitlab-ctl start 0.2.2 GitLab 配置文件 /etc/gitlab/gitlab.rb 0.2.3 SMTP 邮箱配置如果想使用SMTP代替sendmail来发送邮件，应该在gitlab.rb中启用对应的配置，然后运行gitlab-ctl reconfigure使修改生效。 0.2.3.1 QQ企业邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"xxxx@xx.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = 'xxxx@xx.com' 0.2.3.2 Gmail邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.gmail.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"my.email@gmail.com\" gitlab_rails['smtp_password'] = \"my-gmail-password\" gitlab_rails['smtp_domain'] = \"smtp.gmail.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = false gitlab_rails['smtp_openssl_verify_mode'] = 'peer' 0.2.3.3 Outlook邮箱配置示例 gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_port'] = 587 gitlab_rails['smtp_user_name'] = \"username@outlook.com\" gitlab_rails['smtp_password'] = \"password\" gitlab_rails['smtp_domain'] = \"smtp-mail.outlook.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_openssl_verify_mode'] = 'peer' ​:warning: ‘smtp_password’字段不应包含任何 Ruby或者YAML语法中的分隔符 (如'),以避免处理配置文件的过程中发生不必要的意外。 0.2.4 GitLab 日常维护 0.2.4.1 1. 查看服务状态使用 gitlab-ctl status 查看服务状态 [root@6 ~]# sudo gitlab-ctl status run: gitaly: (pid 15055) 23089s; run: log: (pid 3142) 55379s run: gitlab-monitor: (pid 15060) 23088s; run: log: (pid 3325) 55357s run: gitlab-workhorse: (pid 15063) 23088s; run: log: (pid 3156) 55377s run: logrotate: (pid 17867) 1487s; run: log: (pid 3197) 55369s run: nginx: (pid 15077) 23087s; run: log: (pid 3169) 55375s run: node-exporter: (pid 15083) 23087s; run: log: (pid 3247) 55366s run: postgres-exporter: (pid 15088) 23086s; run: log: (pid 3311) 55358s run: postgresql: (pid 15093) 23086s; run: log: (pid 2988) 55412s run: prometheus: (pid 15101) 23085s; run: log: (pid 3230) 55368s run: redis: (pid 15109) 23085s; run: log: (pid 2931) 55419s run: redis-exporter: (pid 15113) 23085s; run: log: (pid 3290) 55364s run: sidekiq: (pid 17029) 22450s; run: log: (pid 3131) 55380s run: unicorn: (pid 17001) 22460s; run: log: (pid 3100) 55386s 0.2.4.2 2. 启动、关闭、重启 # 启动Gitlab所有组件 sudo gitlab-ctl start # 停止Gitlab所有组件 sudo gitlab-ctl stop # 重启Gitlab所有组件 sudo gitlab-ctl restart # 重启单个组件 sudo gitlab-ctl restart sidekiq 0.2.4.3 3. 控制台实时查看日志 # 查看所有的logs; 按 Ctrl-C 退出 sudo gitlab-ctl tail # 拉取/var/log/gitlab下子目录的日志 sudo gitlab-ctl tail gitlab-rails # 拉取某个指定的日志文件 sudo gitlab-ctl tail nginx/gitlab_error.log ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:2","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#3-控制台实时查看日志"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#gitlab-安装后优化"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#启用https"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#设置延迟启动"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#backups-备份还原"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#备份"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#修改默认备份路径"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#使用crontab-添加自动备份"},{"categories":["OpenSource"],"content":" 0.3 GitLab 安装后优化 0.3.1 启用HTTPS首先，你需要提供一个有可信任CA证书，默认情况下GitLab是没有启用HTTPS的，如果要启用HTTPS时，首先要修改/etc/gitlab/gitlab.rb中的external_url: # 修改为https external_url \"https://git.ultraera.org\" # 设置默认将http重定向到https nginx['redirect_http_to_https'] = true 如果你暂时没有https证书，那么你可以临时自己颁发一个证书，注意这个证书是不受信任的。 mkdir -p /etc/nginx/ssl/ cd /etc/nginx/ssl/ sudo openssl req -newkey rsa:2048 -x509 -nodes -days 3560 -out gitlab.crt -keyout gitlab.key sudo chmod o-r gitlab.key sudo mv gitlab.key gitlab.crt /etc/ssl/ 另外，还需要在gitlab-shell中的config.yml中将self_signed_cert 修改为启用: self_signed_cert = true 0.3.2 设置延迟启动为保证服务质量，我们可以设置让omnibus-gitlab的服务(Nginx, Redis, Unicorn等) 在指定的文件系统挂载成功后再启动，在/etc/gitlab/gitlab.rb 文件中添加如下内容： # 等待/var/opt/gitlab 先被挂载 high_availability['mountpoint'] = '/var/opt/gitlab' 注意在修改配置之后，要使用重新reconfigure配置 0.3.3 Backups 备份还原 0.3.3.1 备份Gitlab的配置也非常简单,使用一条命令即可创建完整的Gitlab备份: gitlab-rake gitlab:backup:create 该命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1491989249_2017_04_12_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分，其中开头的1491989249_2017_04_12是备份创建的日期，这也是我们等下恢复是要用的字段。 0.3.3.2 修改默认备份路径如果你像我一样，是使用yum安装的，那么GitLab默认的备份目录应该在/var/opt/gitlab/backups，我建议将备份目录修改为其他位置，并添加定时自动备份脚本，可以通过修改/etc/gitlab/gitlab.rb来修改默认位置： gitlab_rails['backup_path'] = '/mnt/backups' 0.3.3.3 使用crontab 添加自动备份 # 每天凌晨00:00 自动备份 00 00 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create 0.3.3.4 备份恢复 # 停止相关数据连接服务 gitlab-ctl stop unicorn gitlab-ctl stop sidekiq # 从1491989249_2017_04_12编号备份中恢复 gitlab-rake gitlab:backup:restore BACKUP=1491989249_2017_04_12 # 启动Gitlab sudo gitlab-ctl start unicorn sudo gitlab-ctl start sidekiq ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:3","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#备份恢复"},{"categories":["OpenSource"],"content":" 0.4 GitLab 迁移只需将原服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups上即可(如果你没修改过默认备份目录的话)， 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同， 比如新服务器安装的是最新的9.0.5版本的Gitlab, 那么迁移之前，最好将老服务器的Gitlab 升级为9.0.5在进行备份。 /Users/Alex/Documents/Hexo/source/_posts/ ","date":"2017-04-13","objectID":"https://samzong.me/howto-install-gitlab/:0:4","series":null,"tags":["Gitlab"],"title":"HowTo Install GitLab","uri":"https://samzong.me/howto-install-gitlab/#gitlab-迁移"},{"categories":null,"content":" 时光飞逝，那大概是世界上最糟糕的一种感觉了吧。 有点记不大清楚，上一次为了考试是什么时间了。 我说的考试不是各种面试等无形的考试，而是，你坐在四四方方的台子前，给你纸笔，限定时间，那种紧张的感觉，那种备考的心态。 所以时光会消磨人的斗志，让你不大能聚精会神的准备考试，让你变得懒散，让你变得不再有血性；所以，时间这种东西，不仅会在你的身上刻下斑驳印记，还会磨去你内心的棱角，一旦这样，你就会停下了脚步，大家的生活成了日复一日的重复，日子也过得索然无味，好像很多很多你想做的事，最后都是选择plan B。 促使我写这篇的动力来自于，最近AWS助理级系统架构师的考试，而就在年前的时候，第一次去参加考试，没有通过，而且我一直在想到底是哪里出了问题，尽管我不愿意承认，问题根本是，我根本没有静下心来去准备考试，其实是，现在真的很难去静下心来去做考试这种事情，心气浮躁，要做的事情很多堆积在面前，你可能会被这些事情唬到，所以你很焦虑，光顾着去焦虑了，却没想着去解决这些问题，所以难道你的不是这些看起来很困难的问题，而是，你丧失了解决这些问题的勇气很血性；一方面反映在这里，另一方面也反映在你生活的各个方面，你好像没有动力去处理这些事情，总是在最后关头，勉勉强强叫上一份拼拼凑凑的答卷，这不会是你想要的样子，这是一种病，拖延。 {% youtube Q6ZgU7KyQsM %} 之前看到过的一个视频，讲述的是在New York的街头方一块黑板，让你写下最后悔的事，很多都是自己真正想要做的，却未曾努力去做的事，“最后总是选择plan B”，“未曾跳出自己的舒适圈”，人生总是带有遗憾，总是想象着自己会多么的闪耀，却没有勇气付出真心努力，对我是这样，学习，考试，减肥，很多自己想做的事，如果不能够鼓足勇气去做，人生过着便没有意义。 所以，很多事情，并非要你一定做到，而是，你是否真的努力去付出过，还是假意的敷衍，拖延妥协，这种感觉只有你自己真的知道，最后的遗憾，也只有自己知道，为什么要放手自己想要的。 不要怀疑，不要犹豫，努力去做自己想做的事，努力成为那个，你想要成为的人，永远怀揣着梦想，永远热泪盈眶。 ","date":"2017-04-11","objectID":"https://samzong.me/%E5%85%B3%E4%BA%8E%E8%80%83%E8%AF%95/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"关于考试","uri":"https://samzong.me/%E5%85%B3%E4%BA%8E%E8%80%83%E8%AF%95/#"},{"categories":["Tomcat"],"content":"因CentOS7与6在系统上，变化较大，所以在之前的文章中讲到的使用Tomcat7开机自启动的方式在CentOS7是是无法使用的，所以这篇文章的目的是如何在CentOS7上将Tomcat7设置为开机自启动。 0.0.1 安装JAVA环境 [root@7 ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@7 ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... [root@7 ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@7 ~]# source /etc/profile 0.0.2 安装Tomcat7 [root@7 ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz [root@7 ~]# tar zxvf apache-tomcat-7.0.77.tar.gz [root@7 ~]# mv apache-tomcat-7.0.77 /usr/tomcat7 [root@7 ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@7 ~]# chown -R tomcat7. /usr/tomcat7 0.0.3 创建开机自启动脚本 [root@7 ~]# cat /usr/lib/systemd/system/tomcat7.service # create new [Unit] Description=Apache Tomcat 7 After=network.target [Service] Type=oneshot ExecStart=/usr/tomcat7/bin/startup.sh ExecStop=/usr/tomcat7/bin/shutdown.sh RemainAfterExit=yes User=tomcat7 Group=tomcat7 [Install] WantedBy=multi-user.target 0.0.4 启动Tomcat7 [root@7 ~]# systemctl start tomcat7.service [root@7 ~]# systemctl enable tomcat7.service ","date":"2017-04-05","objectID":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/:0:0","series":null,"tags":["Tomcat","CentOS"],"title":"HowTo set Tomcat 7 automatic startup with CentOS 7","uri":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/#"},{"categories":["Tomcat"],"content":"因CentOS7与6在系统上，变化较大，所以在之前的文章中讲到的使用Tomcat7开机自启动的方式在CentOS7是是无法使用的，所以这篇文章的目的是如何在CentOS7上将Tomcat7设置为开机自启动。 0.0.1 安装JAVA环境 [root@7 ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@7 ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... [root@7 ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@7 ~]# source /etc/profile 0.0.2 安装Tomcat7 [root@7 ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz [root@7 ~]# tar zxvf apache-tomcat-7.0.77.tar.gz [root@7 ~]# mv apache-tomcat-7.0.77 /usr/tomcat7 [root@7 ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@7 ~]# chown -R tomcat7. /usr/tomcat7 0.0.3 创建开机自启动脚本 [root@7 ~]# cat /usr/lib/systemd/system/tomcat7.service # create new [Unit] Description=Apache Tomcat 7 After=network.target [Service] Type=oneshot ExecStart=/usr/tomcat7/bin/startup.sh ExecStop=/usr/tomcat7/bin/shutdown.sh RemainAfterExit=yes User=tomcat7 Group=tomcat7 [Install] WantedBy=multi-user.target 0.0.4 启动Tomcat7 [root@7 ~]# systemctl start tomcat7.service [root@7 ~]# systemctl enable tomcat7.service ","date":"2017-04-05","objectID":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/:0:0","series":null,"tags":["Tomcat","CentOS"],"title":"HowTo set Tomcat 7 automatic startup with CentOS 7","uri":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/#安装java环境"},{"categories":["Tomcat"],"content":"因CentOS7与6在系统上，变化较大，所以在之前的文章中讲到的使用Tomcat7开机自启动的方式在CentOS7是是无法使用的，所以这篇文章的目的是如何在CentOS7上将Tomcat7设置为开机自启动。 0.0.1 安装JAVA环境 [root@7 ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@7 ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... [root@7 ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@7 ~]# source /etc/profile 0.0.2 安装Tomcat7 [root@7 ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz [root@7 ~]# tar zxvf apache-tomcat-7.0.77.tar.gz [root@7 ~]# mv apache-tomcat-7.0.77 /usr/tomcat7 [root@7 ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@7 ~]# chown -R tomcat7. /usr/tomcat7 0.0.3 创建开机自启动脚本 [root@7 ~]# cat /usr/lib/systemd/system/tomcat7.service # create new [Unit] Description=Apache Tomcat 7 After=network.target [Service] Type=oneshot ExecStart=/usr/tomcat7/bin/startup.sh ExecStop=/usr/tomcat7/bin/shutdown.sh RemainAfterExit=yes User=tomcat7 Group=tomcat7 [Install] WantedBy=multi-user.target 0.0.4 启动Tomcat7 [root@7 ~]# systemctl start tomcat7.service [root@7 ~]# systemctl enable tomcat7.service ","date":"2017-04-05","objectID":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/:0:0","series":null,"tags":["Tomcat","CentOS"],"title":"HowTo set Tomcat 7 automatic startup with CentOS 7","uri":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/#安装tomcat7"},{"categories":["Tomcat"],"content":"因CentOS7与6在系统上，变化较大，所以在之前的文章中讲到的使用Tomcat7开机自启动的方式在CentOS7是是无法使用的，所以这篇文章的目的是如何在CentOS7上将Tomcat7设置为开机自启动。 0.0.1 安装JAVA环境 [root@7 ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@7 ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... [root@7 ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@7 ~]# source /etc/profile 0.0.2 安装Tomcat7 [root@7 ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz [root@7 ~]# tar zxvf apache-tomcat-7.0.77.tar.gz [root@7 ~]# mv apache-tomcat-7.0.77 /usr/tomcat7 [root@7 ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@7 ~]# chown -R tomcat7. /usr/tomcat7 0.0.3 创建开机自启动脚本 [root@7 ~]# cat /usr/lib/systemd/system/tomcat7.service # create new [Unit] Description=Apache Tomcat 7 After=network.target [Service] Type=oneshot ExecStart=/usr/tomcat7/bin/startup.sh ExecStop=/usr/tomcat7/bin/shutdown.sh RemainAfterExit=yes User=tomcat7 Group=tomcat7 [Install] WantedBy=multi-user.target 0.0.4 启动Tomcat7 [root@7 ~]# systemctl start tomcat7.service [root@7 ~]# systemctl enable tomcat7.service ","date":"2017-04-05","objectID":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/:0:0","series":null,"tags":["Tomcat","CentOS"],"title":"HowTo set Tomcat 7 automatic startup with CentOS 7","uri":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/#创建开机自启动脚本"},{"categories":["Tomcat"],"content":"因CentOS7与6在系统上，变化较大，所以在之前的文章中讲到的使用Tomcat7开机自启动的方式在CentOS7是是无法使用的，所以这篇文章的目的是如何在CentOS7上将Tomcat7设置为开机自启动。 0.0.1 安装JAVA环境 [root@7 ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@7 ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... [root@7 ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@7 ~]# source /etc/profile 0.0.2 安装Tomcat7 [root@7 ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz [root@7 ~]# tar zxvf apache-tomcat-7.0.77.tar.gz [root@7 ~]# mv apache-tomcat-7.0.77 /usr/tomcat7 [root@7 ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@7 ~]# chown -R tomcat7. /usr/tomcat7 0.0.3 创建开机自启动脚本 [root@7 ~]# cat /usr/lib/systemd/system/tomcat7.service # create new [Unit] Description=Apache Tomcat 7 After=network.target [Service] Type=oneshot ExecStart=/usr/tomcat7/bin/startup.sh ExecStop=/usr/tomcat7/bin/shutdown.sh RemainAfterExit=yes User=tomcat7 Group=tomcat7 [Install] WantedBy=multi-user.target 0.0.4 启动Tomcat7 [root@7 ~]# systemctl start tomcat7.service [root@7 ~]# systemctl enable tomcat7.service ","date":"2017-04-05","objectID":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/:0:0","series":null,"tags":["Tomcat","CentOS"],"title":"HowTo set Tomcat 7 automatic startup with CentOS 7","uri":"https://samzong.me/howto-set-tomcat-7-automatic-startup-with-centos-7/#启动tomcat7"},{"categories":["Bigdata"],"content":"Zoomdata是一个大数据可视化展示的工具，由ZoomData企业创建，是为数不多的同时支持移动端的数据分析公司，Zoomdata的可视化可将大数据流转化为触屏友好的，艺术感十足的三维形态，Zoomdata的定位是非ETL(传统的提取、转换和加载的数据处理过程)工具，Zoomdata支持多种数据源，包括社交媒体等，其中应用最主流是大数据平台的展示工具，并且Zoomdata对Cloudera Impala做了很好的支持，所以我们做了Zoomdata+Cloudera技术实施。[^1] 0.0.1 系统要求Zoomdata最新版是v2.4，支持常见主流的操作系统，并且有非常友好的安装帮助，但是Zoomdata不支持安装在32位的操作系统之上 biaoti biaoti baiiti list file china letian zhong hongkong [^1]: 这是一个示意的文档 ","date":"2017-03-06","objectID":"https://samzong.me/howto-install-zoomdata/:0:0","series":null,"tags":["Zoomdata"],"title":"HowTo install Zoomdata","uri":"https://samzong.me/howto-install-zoomdata/#"},{"categories":["Bigdata"],"content":"Zoomdata是一个大数据可视化展示的工具，由ZoomData企业创建，是为数不多的同时支持移动端的数据分析公司，Zoomdata的可视化可将大数据流转化为触屏友好的，艺术感十足的三维形态，Zoomdata的定位是非ETL(传统的提取、转换和加载的数据处理过程)工具，Zoomdata支持多种数据源，包括社交媒体等，其中应用最主流是大数据平台的展示工具，并且Zoomdata对Cloudera Impala做了很好的支持，所以我们做了Zoomdata+Cloudera技术实施。[^1] 0.0.1 系统要求Zoomdata最新版是v2.4，支持常见主流的操作系统，并且有非常友好的安装帮助，但是Zoomdata不支持安装在32位的操作系统之上 biaoti biaoti baiiti list file china letian zhong hongkong [^1]: 这是一个示意的文档 ","date":"2017-03-06","objectID":"https://samzong.me/howto-install-zoomdata/:0:0","series":null,"tags":["Zoomdata"],"title":"HowTo install Zoomdata","uri":"https://samzong.me/howto-install-zoomdata/#系统要求"},{"categories":null,"content":"在还原高阶魔方(四阶及以上)时，采用的处理方法是，将魔方降级为三阶魔方，然后按照三阶魔方的技巧进行还原即可，但是在还原四阶魔方时会遇到2个不可能出现在三阶魔方的特殊情况，下面是针对这两个特殊情况的公式。 注意，本文不是四阶魔方的还原教程。 0.0.1 特殊情况：顶层黄色无法形成“十”或“L”1.手势：黄色面朝上 2.右边两层旋转180’（这时应该黄色面有右面两层为白色） 3.后面一层旋转180' 4.上面一层旋转180' 5.左边两层靠近你身体旋转90' 6.上面一层旋转180' 7.右面两层靠近你身体旋转90' 8.上面一层旋转180' 9.右面两层远离你身体旋转90' 10.上面一层旋转180' 11.前面一层旋转180' 12.右面两层远离你身体旋转90' 13.前面一层旋转180' 14.左边两层远离你身体旋转90' 15.后面一层旋转180' 16.右边两层旋转180' 0.0.2 特殊情况：最后四对棱角只有两对还原1.黄色面已经还原的情况下，黄色面朝上 2.右面夹层旋转180' 3.上面一层旋转180‘ 4.右面夹层旋转180' 5.上面两层旋转180' 6.右面夹层旋转180' 7.上面两层旋转180' ","date":"2017-03-04","objectID":"https://samzong.me/%E5%9B%9B%E9%98%B6%E9%AD%94%E6%96%B9%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E4%B9%8B%E5%A4%84%E7%90%86/:0:0","series":null,"tags":["随笔"],"title":"四阶魔方特殊情况之处理","uri":"https://samzong.me/%E5%9B%9B%E9%98%B6%E9%AD%94%E6%96%B9%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E4%B9%8B%E5%A4%84%E7%90%86/#"},{"categories":null,"content":"在还原高阶魔方(四阶及以上)时，采用的处理方法是，将魔方降级为三阶魔方，然后按照三阶魔方的技巧进行还原即可，但是在还原四阶魔方时会遇到2个不可能出现在三阶魔方的特殊情况，下面是针对这两个特殊情况的公式。 注意，本文不是四阶魔方的还原教程。 0.0.1 特殊情况：顶层黄色无法形成“十”或“L”1.手势：黄色面朝上 2.右边两层旋转180’（这时应该黄色面有右面两层为白色） 3.后面一层旋转180' 4.上面一层旋转180' 5.左边两层靠近你身体旋转90' 6.上面一层旋转180' 7.右面两层靠近你身体旋转90' 8.上面一层旋转180' 9.右面两层远离你身体旋转90' 10.上面一层旋转180' 11.前面一层旋转180' 12.右面两层远离你身体旋转90' 13.前面一层旋转180' 14.左边两层远离你身体旋转90' 15.后面一层旋转180' 16.右边两层旋转180' 0.0.2 特殊情况：最后四对棱角只有两对还原1.黄色面已经还原的情况下，黄色面朝上 2.右面夹层旋转180' 3.上面一层旋转180‘ 4.右面夹层旋转180' 5.上面两层旋转180' 6.右面夹层旋转180' 7.上面两层旋转180' ","date":"2017-03-04","objectID":"https://samzong.me/%E5%9B%9B%E9%98%B6%E9%AD%94%E6%96%B9%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E4%B9%8B%E5%A4%84%E7%90%86/:0:0","series":null,"tags":["随笔"],"title":"四阶魔方特殊情况之处理","uri":"https://samzong.me/%E5%9B%9B%E9%98%B6%E9%AD%94%E6%96%B9%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E4%B9%8B%E5%A4%84%E7%90%86/#特殊情况顶层黄色无法形成十或l"},{"categories":null,"content":"在还原高阶魔方(四阶及以上)时，采用的处理方法是，将魔方降级为三阶魔方，然后按照三阶魔方的技巧进行还原即可，但是在还原四阶魔方时会遇到2个不可能出现在三阶魔方的特殊情况，下面是针对这两个特殊情况的公式。 注意，本文不是四阶魔方的还原教程。 0.0.1 特殊情况：顶层黄色无法形成“十”或“L”1.手势：黄色面朝上 2.右边两层旋转180’（这时应该黄色面有右面两层为白色） 3.后面一层旋转180' 4.上面一层旋转180' 5.左边两层靠近你身体旋转90' 6.上面一层旋转180' 7.右面两层靠近你身体旋转90' 8.上面一层旋转180' 9.右面两层远离你身体旋转90' 10.上面一层旋转180' 11.前面一层旋转180' 12.右面两层远离你身体旋转90' 13.前面一层旋转180' 14.左边两层远离你身体旋转90' 15.后面一层旋转180' 16.右边两层旋转180' 0.0.2 特殊情况：最后四对棱角只有两对还原1.黄色面已经还原的情况下，黄色面朝上 2.右面夹层旋转180' 3.上面一层旋转180‘ 4.右面夹层旋转180' 5.上面两层旋转180' 6.右面夹层旋转180' 7.上面两层旋转180' ","date":"2017-03-04","objectID":"https://samzong.me/%E5%9B%9B%E9%98%B6%E9%AD%94%E6%96%B9%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E4%B9%8B%E5%A4%84%E7%90%86/:0:0","series":null,"tags":["随笔"],"title":"四阶魔方特殊情况之处理","uri":"https://samzong.me/%E5%9B%9B%E9%98%B6%E9%AD%94%E6%96%B9%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E4%B9%8B%E5%A4%84%E7%90%86/#特殊情况最后四对棱角只有两对还原"},{"categories":["mac"],"content":"今天在给妹妹调试新的MacBookAir 13’时遇到一个问题，无法检测到她家的WiFi，一开始怀疑是不是无线路由器长时间未重启导致，所以重启了路由器，但是问题依然没有解决，于是我们将问题转向排查设备，因我们基本正好有iPad，iPhone，MacBook这些设备，发现唯独他的这个Macbook无法识别WiFi，后来在Google的帮助下，发现多个版本的Mac OS X都出现了类似的问题，可以通过重启AirPort解决问题，但是AirPort在System Preferences找不到选项，所以需要使用命令行来重启。 0.0.0.1 查看网络接口 ifconfig en0: flags=8863\u003cUP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST\u003e mtu 1500 ether 60:f8:1d:ad:85:76 inet6 fe80::18a9:fa23:b02f:5d8a%en0 prefixlen 64 secured scopeid 0x4 inet 192.168.199.200 netmask 0xffffff00 broadcast 192.168.199.255 nd6 options=201\u003cPERFORMNUD,DAD\u003e media: autoselect status: active 0.0.0.2 关闭AirPort有时候设备的名称是en0、en1这样，所以，可以用过设备名称来重启airport，例如en0 networksetup -setairportpower en0 off 0.0.0.3 查看状态 networksetup -getairportpower en0 0.0.0.4 关闭AirPort networksetup -setairportpower en0 on ","date":"2017-02-27","objectID":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/:0:0","series":null,"tags":["mac"],"title":"MacTips 使用命令关闭和启动AirPort","uri":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/#"},{"categories":["mac"],"content":"今天在给妹妹调试新的MacBookAir 13’时遇到一个问题，无法检测到她家的WiFi，一开始怀疑是不是无线路由器长时间未重启导致，所以重启了路由器，但是问题依然没有解决，于是我们将问题转向排查设备，因我们基本正好有iPad，iPhone，MacBook这些设备，发现唯独他的这个Macbook无法识别WiFi，后来在Google的帮助下，发现多个版本的Mac OS X都出现了类似的问题，可以通过重启AirPort解决问题，但是AirPort在System Preferences找不到选项，所以需要使用命令行来重启。 0.0.0.1 查看网络接口 ifconfig en0: flags=8863 mtu 1500 ether 60:f8:1d:ad:85:76 inet6 fe80::18a9:fa23:b02f:5d8a%en0 prefixlen 64 secured scopeid 0x4 inet 192.168.199.200 netmask 0xffffff00 broadcast 192.168.199.255 nd6 options=201 media: autoselect status: active 0.0.0.2 关闭AirPort有时候设备的名称是en0、en1这样，所以，可以用过设备名称来重启airport，例如en0 networksetup -setairportpower en0 off 0.0.0.3 查看状态 networksetup -getairportpower en0 0.0.0.4 关闭AirPort networksetup -setairportpower en0 on ","date":"2017-02-27","objectID":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/:0:0","series":null,"tags":["mac"],"title":"MacTips 使用命令关闭和启动AirPort","uri":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/#查看网络接口"},{"categories":["mac"],"content":"今天在给妹妹调试新的MacBookAir 13’时遇到一个问题，无法检测到她家的WiFi，一开始怀疑是不是无线路由器长时间未重启导致，所以重启了路由器，但是问题依然没有解决，于是我们将问题转向排查设备，因我们基本正好有iPad，iPhone，MacBook这些设备，发现唯独他的这个Macbook无法识别WiFi，后来在Google的帮助下，发现多个版本的Mac OS X都出现了类似的问题，可以通过重启AirPort解决问题，但是AirPort在System Preferences找不到选项，所以需要使用命令行来重启。 0.0.0.1 查看网络接口 ifconfig en0: flags=8863 mtu 1500 ether 60:f8:1d:ad:85:76 inet6 fe80::18a9:fa23:b02f:5d8a%en0 prefixlen 64 secured scopeid 0x4 inet 192.168.199.200 netmask 0xffffff00 broadcast 192.168.199.255 nd6 options=201 media: autoselect status: active 0.0.0.2 关闭AirPort有时候设备的名称是en0、en1这样，所以，可以用过设备名称来重启airport，例如en0 networksetup -setairportpower en0 off 0.0.0.3 查看状态 networksetup -getairportpower en0 0.0.0.4 关闭AirPort networksetup -setairportpower en0 on ","date":"2017-02-27","objectID":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/:0:0","series":null,"tags":["mac"],"title":"MacTips 使用命令关闭和启动AirPort","uri":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/#关闭airport"},{"categories":["mac"],"content":"今天在给妹妹调试新的MacBookAir 13’时遇到一个问题，无法检测到她家的WiFi，一开始怀疑是不是无线路由器长时间未重启导致，所以重启了路由器，但是问题依然没有解决，于是我们将问题转向排查设备，因我们基本正好有iPad，iPhone，MacBook这些设备，发现唯独他的这个Macbook无法识别WiFi，后来在Google的帮助下，发现多个版本的Mac OS X都出现了类似的问题，可以通过重启AirPort解决问题，但是AirPort在System Preferences找不到选项，所以需要使用命令行来重启。 0.0.0.1 查看网络接口 ifconfig en0: flags=8863 mtu 1500 ether 60:f8:1d:ad:85:76 inet6 fe80::18a9:fa23:b02f:5d8a%en0 prefixlen 64 secured scopeid 0x4 inet 192.168.199.200 netmask 0xffffff00 broadcast 192.168.199.255 nd6 options=201 media: autoselect status: active 0.0.0.2 关闭AirPort有时候设备的名称是en0、en1这样，所以，可以用过设备名称来重启airport，例如en0 networksetup -setairportpower en0 off 0.0.0.3 查看状态 networksetup -getairportpower en0 0.0.0.4 关闭AirPort networksetup -setairportpower en0 on ","date":"2017-02-27","objectID":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/:0:0","series":null,"tags":["mac"],"title":"MacTips 使用命令关闭和启动AirPort","uri":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/#查看状态"},{"categories":["mac"],"content":"今天在给妹妹调试新的MacBookAir 13’时遇到一个问题，无法检测到她家的WiFi，一开始怀疑是不是无线路由器长时间未重启导致，所以重启了路由器，但是问题依然没有解决，于是我们将问题转向排查设备，因我们基本正好有iPad，iPhone，MacBook这些设备，发现唯独他的这个Macbook无法识别WiFi，后来在Google的帮助下，发现多个版本的Mac OS X都出现了类似的问题，可以通过重启AirPort解决问题，但是AirPort在System Preferences找不到选项，所以需要使用命令行来重启。 0.0.0.1 查看网络接口 ifconfig en0: flags=8863 mtu 1500 ether 60:f8:1d:ad:85:76 inet6 fe80::18a9:fa23:b02f:5d8a%en0 prefixlen 64 secured scopeid 0x4 inet 192.168.199.200 netmask 0xffffff00 broadcast 192.168.199.255 nd6 options=201 media: autoselect status: active 0.0.0.2 关闭AirPort有时候设备的名称是en0、en1这样，所以，可以用过设备名称来重启airport，例如en0 networksetup -setairportpower en0 off 0.0.0.3 查看状态 networksetup -getairportpower en0 0.0.0.4 关闭AirPort networksetup -setairportpower en0 on ","date":"2017-02-27","objectID":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/:0:0","series":null,"tags":["mac"],"title":"MacTips 使用命令关闭和启动AirPort","uri":"https://samzong.me/mactips%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%85%B3%E9%97%AD%E5%92%8C%E5%90%AF%E5%8A%A8airport/#关闭airport-1"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#运行环境"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#搭建lnmp环境"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#软件版本"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#基础环境安装"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#install-lnmp"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#下载nextcloud"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#配置nginx和php-fpm"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#文件权限调整"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#创建mysql数据库"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#初始化nextcloud"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#other"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#修改默认data目录"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#无法登陆到个人用户界面"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#增加redis组件提高性能"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#ssl证书"},{"categories":["OpenSource"],"content":"随着最近一个云盘厂家不再提供个人服务，或者开始各种收费限速，自己存放在第三方云盘厂商的数据被盗取，数据的安全性和数据的稳定性都得不到保证，而且随着智能终端的普及，我也有一些更加高质量的图片文件需要大量储存，所以我想到了自建存储服务的方式，在甄别了OwnCloud，Seafiles和NextCloud，最后选择了NextCloud作为自己今后数据存储节点，NextCloud源自OwnCloud，但是近些年来OwnCloud的发展进度几乎停滞，多数开发者也转战NextCloud，当然NextCloud也继承了搭建简单，依赖于PHP环境的特性。 0.0.1 运行环境 阿里云ECS CentOS 6.x 免费SSL证书(腾讯云申请) 0.0.2 搭建LNMP环境 0.0.2.1 软件版本 PHP 5.6.30 安装教程 MySQL 5.6.35 安装教程 Nginx 1.10.2 0.0.2.2 基础环境安装 [root@ultraera ~]# yum update -y [root@ultraera ~]# yum groupinstall -y \"Base\" [root@ultraera ~]# yum groupinstall -y \"Development tools\" # Install epel [root@ultraera ~]# yum install -y epel-release # Install remi [root@ultraera ~]# yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm # Install mysql-community [root@ultraera ~]# yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm 0.0.2.3 Install LNMP # Install MySQL [root@ultraera ~]# yum --enablerepo=mysql-community install -y mysql-server mysql-libs mysql-devel [root@ultraera ~]# service mysqld start [root@ultraera ~]# mysql_secure_installation [root@ultraera ~]# chkconfig mysqld on # Install Nginx [root@ultraera ~]# yum --enablerepo=epel install -y nginx [root@ultraera ~]# service nginx start [root@ultraera ~]# chkconfig nginx on # Install PHP and php-fpm [root@ultraera ~]# yum --enablerepo=remi-php56 install php php-fpm php-mysql php-gd php-xml php-redis php-libs php-devel php-zlib [root@ultraera ~]# service php-fpm start [root@ultraera ~]# chkconfig php-fpm on [root@ultraera ~]# service nginx restart 0.0.2.4 下载NextCloud [root@ultraera ~]# wget https://download.nextcloud.com/server/releases/nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# tar xf nextcloud-11.0.1.tar.bz2 [root@ultraera ~]# mv nextcloud-11.0.1 /opt/nextcloud 0.0.2.5 配置Nginx和php-fpm因为php-fpm默认运行的用户身份是apache，我们这里使用的环境是nginx，所有要修改php-fpm配置文件的用户和组，注意不要为了省事直接改为root，这在php-fpm中是不允许的 [root@ultraera ~]# vim /etc/php-fpm.d/www.conf user=nginx group=nginx [root@ultraera ~]# service php-fpm restart 因为NextCloud默认是以Apache的身份运行的，所以我们需要单独配置NextCloud的Nginx配置文件，以下配置文件，你可以直接拿去用，注意在文件中说明了，需要修改的地方： [root@ultraera ~]# vim /etc/nginx/conf.d/nextcloud.conf upstream php-handler { # 这里是你php-fpm的服务端口，默认是9000 server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock; } server { # 你的域名 listen pan.ultraera.org:80; server_name pan.ultraera.org; # enforce https return 301 https://$server_name$request_uri; } server { # 你的域名 listen pan.ultraera.org:443 ssl; server_name pan.ultraera.org; # 以下是你的ssl证书文件存放路径 ssl_certificate /etc/nginx/ssl/1_pan.ultraera.org_bundle.crt; ssl_certificate_key /etc/nginx/ssl/2_pan.ultraera.org.key; # Add headers to serve security related headers # Before enabling Strict-Transport-Security headers please read into this # topic first. # add_header Strict-Transport-Security \"max-age=15768000; # includeSubDomains; preload;\"; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \"SAMEORIGIN\"; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Robots-Tag none; add_header X-Download-Options noopen; add_header X-Permitted-Cross-Domain-Policies none; add_header Strict-Transport-Security \"max-age=15552000; includeSubdomains; \"; # 设定你的NextCloud的根目录，请根据实际修改 root /opt/nextcloud/; location = /robots.txt { allow all; log_not_found off; access_log off; } # The following 2 rules are only needed for the user_webfinger app. # Uncomment it if you're planning to use this app. #rewrite ^/.well-known/host-meta /public.php?service=host-meta last; #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json # last; location = /.well-known/carddav { return 301 $scheme://$host/remote.php/dav; } location = /.well-known/caldav { return 301 $scheme://$host/remote.php/dav; } # set max upload size client_max_body_size 512M; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; error_pa","date":"2017-02-27","objectID":"https://samzong.me/howto-install-nextcloud/:0:0","series":null,"tags":["NextCloud"],"title":"HowTo Install NextCloud","uri":"https://samzong.me/howto-install-nextcloud/#使用现状"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#runtime-environment"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装rvm"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#导入公钥"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#加载rvm环境并安装基础依赖包"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装ruby"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装rails"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#更换gem源"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装-1"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装mysql"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装redmine"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#下载redmine-332"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装管理ruby的包管理工具bundler"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#安装redmine运行所需要的依赖包"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#为rails生产cookies秘钥"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#创建redmine的数据库"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#修改redmine的databaseyml"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#创建数据库结构"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#生产缺省数据"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#测试是否安装成功"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#配置redmine在nginx上运行"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#采用passenger提供脚本安装"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#采用重新编译nginx增加passenger模块"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#增加http模块内以下配置"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#配置nginxconf-修改server模块中location的配置"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#启动nginx"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#其他"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#71-could-not-find-gem-mysql2--0311-in-any-of-the-gem-sources-listed-in-your-gemfile"},{"categories":["OpenSource","Redmine"],"content":" 0.0.1 Runtime environment CentOS 6.x Redmine 3.3.2 Ruby 2.2.6 rails 4.2 MySQL 5.1 Nginx 1.10 0.0.2 安装rvm 0.0.2.1 导入公钥 [root@localhost ~]# curl -sSL https://rvm.io/mpapis.asc | gpg --import 0.0.2.2 安装 [root@localhost ~]# curl -L https://get.rvm.io | bash -s stable 0.0.2.3 加载rvm环境并安装基础依赖包 [root@localhost ~]# source /etc/profile.d/rvm.sh [root@localhost ~]# rvm requirements 0.0.3 安装ruby [root@localhost ~]# rvm install 2.2.6 ... [root@localhost ~]# rvm use 2.2.6 --default 0.0.4 安装rails 0.0.4.1 更换gem源默认gem的源站点是https://rubygems.org 由于国内的网络原因导致无法连接，所以导致无法使用gem安装，这里换成国内淘宝的gem镜像站点 [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://rubygems.org/ [root@localhost ~]# gem sources --remove https://rubygems.org/ [root@localhost ~]# gem sources -a https://ruby.taobao.org/ [root@localhost ~]# gem sources -l *** CURRENT SOURCES *** https://ruby.taobao.org/ 0.0.4.2 安装 [root@localhost ~]# gem install rails -v=4.2 0.0.5 安装MySQL [root@localhost ~]# yum install -y mysql-server mysql-libs mysql-devel mysql [root@localhost ~]# service mysqld start [root@localhost ~]# mysql_secure_installation 0.0.6 安装redmine 0.0.6.1 下载Redmine 3.3.2 [root@localhost ~]# wget http://www.redmine.org/releases/redmine-3.3.2.tar.gz [root@localhost ~]# tar xf redmine-3.3.2.tar.gz [root@localhost ~]# mv redmine-3.3.2 /opt 0.0.6.2 安装管理ruby的包管理工具bundler # 注意，一定要在redmine目录下操作 [root@localhost ~]# cd /opt/redmine-3.3.2 [root@localhost redmine-3.3.2]# gem install bundler 0.0.6.3 安装redmine运行所需要的依赖包 [root@localhost redmine-3.3.2]# bundle install --without development test rmagick 0.0.6.4 为rails生产cookies秘钥 [root@localhost redmine-3.3.2]# rake generate_secret_token 0.0.6.5 创建redmine的数据库 mysql\u003e create database redmine character set utf8; mysql\u003e grant all privileges on redmine.* to 'redmine'@'localhost' identified by 'redmine_pass'; 0.0.6.6 修改redmine的database.yml [root@localhost redmine-3.3.2]# cp config/database.yml.example config/database.yml [root@localhost redmine-3.3.2]# vim config/database.yml production: adapter: mysql2 database: redmine host: localhost username: redmine password: \"redmine_pass\" encoding: utf8 0.0.6.7 创建数据库结构 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake db:migrate 0.0.6.8 生产缺省数据 [root@localhost redmine-3.3.2]# RAILS_ENV=production bundle exec rake redmine:load_default_data # 选择默认语言，之后可更改，初始为en 0.0.6.9 测试是否安装成功 [root@localhost redmine-3.3.2]# bundle exec rails server webrick -e production -b 0.0.0.0 默认运行3000端口，默认管理员admin/admin 0.0.7 配置Redmine在Nginx上运行Redmine常用的解决办法是使用passenger+nginx，但是Nginx不支持装载模块，所以需要重新编译安装Nginx，安装Nginx的Passenger有两种方式 采用Passenger提供的脚本进行安装，适合新环境 手动编译安装Nginx增加Passenger模块，适合已存在Nginx环境 0.0.7.1 采用Passenger提供脚本安装 [root@localhost redmine-3.3.2]# gem install passenger [root@localhost redmine-3.3.2]# passenger-install-nginx-module --auto --prefix=/opt/nginx 0.0.7.2 采用重新编译Nginx增加Passenger模块 # 获取passenger的安装路径 [root@localhost ~]# passenger-config --root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 # 重新编译Nginx并添加模块 [root@localhost ~]# wget http://nginx.org/download/nginx-1.10.3.tar.gz [root@localhost ~]# tar xf nginx-1.10.3.tar.gz [root@localhost ~]# cd nginx-1.10.3 [root@localhost nginx-1.10.3]# ./configure ... -add-module=/usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.3 增加HTTP模块内以下配置 passenger_root /usr/local/rvm/gems/ruby-2.2.6/gems/passenger-5.1.2 0.0.7.4 配置nginx.conf 修改server模块中location的配置 # ... server { # ... passenger_enabled on; location / { root /opt/redmine-3.3.2/public; index index.html index.htm; } } # ... 0.0.7.5 启动Nginx [root@localhost ~]# /root/nginx-1.10.3/sbin/nginx -c /root/nginx-1.10.3/conf/nginx.conf 0.0.8 其他到这里，所有的安装都完成了，过程中我遇到这些问题，你也注意下： 0.0.8.1 7.1 Could not find gem ‘mysql2 (~\u003e 0.3.11)’ in any of the gem sources listed in your Gemfile. [root@localhost redmine-3.3.2]# rm -f Gemfile.lock [root@localhost redmine-3.3.2]# bundle install 0.0.8.2 7.2 curl-tools yum install libcurl-devel ","date":"2017-02-22","objectID":"https://samzong.me/howto-install-redmine/:0:0","series":null,"tags":["Redmine"],"title":"HowTo Install Redmine","uri":"https://samzong.me/howto-install-redmine/#72-curl-tools"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#2-创建临时目录并解压ghost-latestzip到此"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#3-进入到原ghost目录删除core"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#4进入到新版本的ghost临时目录"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#5-拷贝所需文件到ghost升级目录"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#6-可选升级casperghost默认主题"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#7-切换回到ghost安装目录"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#8-修改文件目录所有者和所属组为ghost"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#9-重新安装环境"},{"categories":["Blog","Ghost"],"content":" #### 1. 下载最新版的Ghost curl -LOk https://ghost.org/zip/ghost-latest.zip 0.0.1 2. 创建临时目录，并解压ghost-latest.zip到此 mkdir /usr/ghost-tmp unzip ghost-latest.zip -d /usr/ghost-tmp 0.0.2 3. 进入到原ghost目录，删除core cd /usr/ghost rm -rf core 0.0.3 4.进入到新版本的ghost临时目录 cd /usr/ghost-tmp 0.0.4 5. 拷贝所需文件到ghost升级目录 cp -R core /usr/ghost cp index.js *.json /usr/ghost 0.0.5 6. (可选)升级casper，ghost默认主题 cp -R content/themes/casper /usr/ghost/content/themes/ 0.0.6 7. 切换回到ghost安装目录 cd /usr/ghost 0.0.7 8. 修改文件目录所有者和所属组为ghost chown -R ghost:ghost ./* 0.0.8 9. 重新安装环境 npm install --production 0.0.9 10. 重启Ghost pm2 restart ghost ","date":"2017-02-20","objectID":"https://samzong.me/howto-upgrade-your-ghost-version/:0:0","series":null,"tags":["Ghost"],"title":"HowTo Upgrade Your Ghost Version","uri":"https://samzong.me/howto-upgrade-your-ghost-version/#10-重启ghost"},{"categories":["Linux","CentOS"],"content":"大家若工作遇到需要管理的Linux集群机器较多时，同时我们知道系统的安全更新补丁维护这些非常重要，无论你在安装时优化维护做的再好，随着时间的推移，如果不去更新的话，系统早晚都会不安全，所以定期更新我们的系统补丁是一个运维人员的基本工作内容 ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:0","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#"},{"categories":["Linux","CentOS"],"content":" 0.1 Install yum-cron sudo yum install -y yum-cron 因为我的服务器系统多为CentOS 6，6的配置文件在/etc/sysconfig/yum-cron，你可以用以下命令查看配置文件位置： rpm -ql yum-cron /etc/cron.daily/0yum.cron /etc/rc.d/init.d/yum-cron /etc/sysconfig/yum-cron /etc/yum/yum-daily.yum /etc/yum/yum-weekly.yum /usr/share/doc/yum-cron-3.2.29 /usr/share/doc/yum-cron-3.2.29/COPYING /usr/share/man/man8/yum-cron.8.gz ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:1","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#install-yum-cron"},{"categories":["Linux","CentOS"],"content":" 0.2 Configure “/etc/sysconfig/yum-cron”yum-cron的默认设置是会在每天自动检查和安装系统更新包，在安装完成后有些配置需要注意下： 0.2.0.1 1. 对于不需要更新的可以忽略掉 YUM_PARAMETER=\"--exclude='kernel*' --exclude='php*'\" 0.2.0.2 2. 设置管理员邮箱 MAILTO=\"luchuanjia@msn.com\" 0.2.0.3 3. 不自动安装，仅检查，通知管理邮箱 CHECK_ONLY=yes 0.2.0.4 4. 不自动安装，仅下载 DOWNLOAD_ONLY=yes ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:2","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#configure-etcsysconfigyum-cron"},{"categories":["Linux","CentOS"],"content":" 0.2 Configure “/etc/sysconfig/yum-cron”yum-cron的默认设置是会在每天自动检查和安装系统更新包，在安装完成后有些配置需要注意下： 0.2.0.1 1. 对于不需要更新的可以忽略掉 YUM_PARAMETER=\"--exclude='kernel*' --exclude='php*'\" 0.2.0.2 2. 设置管理员邮箱 MAILTO=\"luchuanjia@msn.com\" 0.2.0.3 3. 不自动安装，仅检查，通知管理邮箱 CHECK_ONLY=yes 0.2.0.4 4. 不自动安装，仅下载 DOWNLOAD_ONLY=yes ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:2","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#1-对于不需要更新的可以忽略掉"},{"categories":["Linux","CentOS"],"content":" 0.2 Configure “/etc/sysconfig/yum-cron”yum-cron的默认设置是会在每天自动检查和安装系统更新包，在安装完成后有些配置需要注意下： 0.2.0.1 1. 对于不需要更新的可以忽略掉 YUM_PARAMETER=\"--exclude='kernel*' --exclude='php*'\" 0.2.0.2 2. 设置管理员邮箱 MAILTO=\"luchuanjia@msn.com\" 0.2.0.3 3. 不自动安装，仅检查，通知管理邮箱 CHECK_ONLY=yes 0.2.0.4 4. 不自动安装，仅下载 DOWNLOAD_ONLY=yes ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:2","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#2-设置管理员邮箱"},{"categories":["Linux","CentOS"],"content":" 0.2 Configure “/etc/sysconfig/yum-cron”yum-cron的默认设置是会在每天自动检查和安装系统更新包，在安装完成后有些配置需要注意下： 0.2.0.1 1. 对于不需要更新的可以忽略掉 YUM_PARAMETER=\"--exclude='kernel*' --exclude='php*'\" 0.2.0.2 2. 设置管理员邮箱 MAILTO=\"luchuanjia@msn.com\" 0.2.0.3 3. 不自动安装，仅检查，通知管理邮箱 CHECK_ONLY=yes 0.2.0.4 4. 不自动安装，仅下载 DOWNLOAD_ONLY=yes ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:2","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#3-不自动安装仅检查通知管理邮箱"},{"categories":["Linux","CentOS"],"content":" 0.2 Configure “/etc/sysconfig/yum-cron”yum-cron的默认设置是会在每天自动检查和安装系统更新包，在安装完成后有些配置需要注意下： 0.2.0.1 1. 对于不需要更新的可以忽略掉 YUM_PARAMETER=\"--exclude='kernel*' --exclude='php*'\" 0.2.0.2 2. 设置管理员邮箱 MAILTO=\"luchuanjia@msn.com\" 0.2.0.3 3. 不自动安装，仅检查，通知管理邮箱 CHECK_ONLY=yes 0.2.0.4 4. 不自动安装，仅下载 DOWNLOAD_ONLY=yes ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:2","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#4-不自动安装仅下载"},{"categories":["Linux","CentOS"],"content":" 0.3 Automatic Starting yum-cron chkconfig yum-cron on ","date":"2017-02-19","objectID":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/:0:3","series":null,"tags":["CentOS"],"title":"HowTo Automatic Updates CENTOS/RHEL Using YUM","uri":"https://samzong.me/howto-automatic-updates-centos-rhel-using-yum/#automatic-starting-yum-cron"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#1-索引的作用"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#2-创建索引"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#21-alter-table"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#22-create-index"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#3-索引类型"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#4-删除索引"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 索引的作用在索引列上，数据库利用各种各样的快速定位技术，能够大大的提高查询效率，特别是当数据量非常大和查询设计到多个表时，索引的利用能够将效率提高成千上万倍，当然要合理的利用索引。 0.0.2 2. 创建索引​ 在执行CREATE TABLE时可以创建索引，也可以在之后单独使用CREATE INDEX或ALTER TABLE来为表增加索引。 0.0.2.0.1 2.1 ALTER TABLE​ ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。 ALTER TABLE tb_name ADD INDEX index_Name (column_list); ALTER TABLE tb_name ADD UNIQUE (column_list); ALTER TABLE tb_name ADD PRIMARY KEY (column_list); ​ tb_name 是要增加索引的表名，column_list 是要增加索引的列，多列用逗号隔开，index_Name 是可选，缺省为第一个索引列赋名称，ALTER TABLE允许在单个语句中更改多个表，因此可以也可以同时创建多个索引。 0.0.2.0.2 2.2 CREATE INDEX​ CREATE INDEX 可对表增加普通索引或者UNIQUE索引。 CREATE INDEX index_Name ON tb_name(column_list); CREATE UNIQUE INDEX index_Name ON tb_name(column_list); ​ tb_name、index_Name和column_list具有ALTER TABLE语句中相同的含义，索引名称不可自定义，也不能创建PRIMARY KEY。 0.0.3 3. 索引类型​ 在创建索引时，可以规定索引能否包含重复的值，如果不包含，则索引应该为PRIMARY KEY或UNIQUE索引，对于单列唯一索引，这能保证单列不包含重复的值，对于多列唯一索引，保证多值的组合不重复。 ​ PRIMAY KEY索引与UNIQUE索引非常类似，实际上PRIMAY KEY索引仅是一个具有名称PRIMAY的UNIQUE索引，这表示一个表只能包含一个PRIMAY KEY索引，因为一个表中不可能具有两个同名的索引。 0.0.4 4. 删除索引​ 可以使用ALTER TABLE或DROP INDEX语句来删除索引： DROP INDEX index_Name On tb_name; ALTER TABLE tb_Name DROP TABLE index_Name; ALTER TABLE tb_Name DROP PRIMAY KEY; ​ 第一条和第二条作用是一样的，删除tb_Name中index_Name索引；第三条仅适用于删除PRIMAY KEY时，因为一个只可能有一个PRIMAY KEY索引。 ​ 另外，如果在表中删除了某列，则索引会受到影响，对于多列组合的索引，如果删除其中某列，则该列也会在索引中删除，如果删除所有列，则该索引也会被删除。 0.0.5 5. 查看索引 mysql\u003e show index from tb_name; mysql\u003e show keys from tb_name; Table : 表名 Non_unique： 如果索引不能包含重复值为0，如果可以为1 Key_name： 索引的名称 Seq_in_index：索引中列的序号，从1开始 Column_name： 列的名称 Collation：列以什么方式存储在索引中，在MySQL中有值‘A’(升序)和NULL(无分类) Cardinality： 索引中唯一值的数量估计值，通过运行ANALYZE TABLE或者 myisamchk -a 可以更新，基数根据被存储的整数的统计数据来计数，所以，即使对于小型表，该值也没有必要是精确的，基数越大，当进行联合时，MySQL使用该索引的机会就越大。 Sub_part： 如果列只是被部分编入，则为编入索引的字符数目，如果整列被编入索引，则为NULL Packed：关键字如何被压缩，没有压缩为NULL Null： 如果列含有NULL为YES，如果没有则为NO Index_type： 用过的索引方法，BTREE，FULLTEXT，HASH，RTREE Comment： 备注 ","date":"2017-02-09","objectID":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 索引创建、删除和查看","uri":"https://samzong.me/mysql-8-%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E6%9F%A5%E7%9C%8B/#5-查看索引"},{"categories":["OpenSource","Zabbix"],"content":"最近项目上由于BUG问题导致Tomcat程序在运行过程中经常内存泄漏,而本身监控系统之中没有更好的检测到Tomcat堆空间(Head Memory)的使用情况导致报警频发，这篇文章主要讲述，如何在Zabbix之中调用jmx监控服务器上Tomcat堆空间的使用情况并增加对应报警功能。 测试环境: CentOS 6.8 Zabbix 2.4 Tomcat 7.0 实验前提默认是各位已经安装Zabbix Server服务器，并且至少有一台Zabbix agent服务器正常监控。关于如何搭建Zabbix监控集群，会有专门文章描述。 0.0.1 zabbix-java-gateway的工作机制 首先我们需要配置我们的Tomcat服务启用监控服务，这个是默认不启用的 之后需要在Zabbix的管理页面添加对应Tomcat服务器的jmx监控接口 最后zabbix端会自动获取zabbix-java-gateway的数据并根据相应模板进行展 示 工作流: [Zabbix-Server]–\u003e(port:10053 on zabbix server)–\u003e [zabbix-java-gateway] –(port:12345 on tomcatserver)–\u003e [JMX enabled] 0.0.2 1. Install zabbix-java-gateway on Zabbix Server因为我的zabbix是使用zabbix 2.4官方源安装，所以只需要用yum在安装即可: [root@6 ~]# sudo yum install -y zabbix-java-gateway 如果你没有官方源可能先安装该源，注意我的服务器zabbix版本是2.4 如果你是不同的版本，请到[这里]查找对应版本。 # 查看zabbix server版本 [root@6 ~]# zabbix_server --version Zabbix server v2.4.8 (revision 59539) (20 April 2016) Compilation time: May 4 2016 01:32:12 在使用yum安装zabbix-java-gateway源时,会自动关联安装openjdk，尽管这段程序没多大影响，如果你想保证系统JAVA环境不受到改变的话，可以在/etc/profile文件最后，增加如下内容: # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar 0.0.3 2. Confiure Tomcat host with enable jmx首先在$tomcatdir/bin/catalina.sh文件开头处增加如下： #!/bin/sh CATALINA_OPTS=\"-Dcom.sun.management.jmxremote \\ -Dcom.sun.management.jmxremote.authenticate=false \\ -Dcom.sun.management.jmxremote.ssl=false \\ -Dcom.sun.management.jmxremote.port=12345\" 然后,启动Tomcat，你会发现多了一个12345端口，这就是jmx的监听端口，请保证zabbix-java-gateway可以访问到这台服务器。 [root@6 ~]# /tomcat7/bin/startup.sh Starting Tomcat7: Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@6 ~]# netstat -ntlp | grep 12345 tcp 0 0 :::12345 :::* LISTEN 8793/java [root@6 ~]# #### ==*fix 1* == : zabbix agent与server存在复杂网络环境 这里疏忽了1个问题，如果您的zabbix server与agent端之间有防火墙规则，而按照我上面的所述只是增加了12345这个端口，那么很可能，您在/var/log/zabbix/zabbix_java_gateway.log 中会看到“No route to host”的报错，这是因为JMX不光开启了12345端口，还开启了另外两个随机端口，而在获取监控数据时会使用到其中一个，这就导致了无法通过固定的防火墙规则来开放该端口。其实有另外一个替代方式来使该监听端口固定下来——使用Tomcat提供的额外组件 catalina-jmx-remote.jar，这个组件是需要另外下载的： # 查看当前Tomcat版本. [root@6 bin]# ./catalina.sh version Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Server version: Apache Tomcat/7.0.64 Server built: Aug 19 2015 17:18:06 UTC Server number: 7.0.64.0 OS Name: Linux OS Version: 2.6.32-642.11.1.el6.x86_64 Architecture: amd64 JVM Version: 1.8.0_111-b15 JVM Vendor: Oracle Corporation # 下载 catalina-jmx-remote.jar # 请注意下载版本不要高于当前tomcat版本. wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.57/bin/extras/catalina-jmx-remote.jar -O lib/catalina-jmx-remote.jar 增加如下内容，在conf/server.xml中： \u003cListener className=\"org.apache.catalina.mbeans.JmxRemoteLifecycleListener\" rmiRegistryPortPlatform=\"12345\" rmiServerPortPlatform=\"12346\" /\u003e 因为我们已经在conf/server.xml定义了rmiRegistryPortPlatform，所以要将bin/catalina.sh中CATALINA_OPTS的com.sun.management.jmxremote.port去掉，否则会因为jmxremote.port配置有优先级更高而导致配置失效。 CATALINA_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\" 完成之后，重启tomcat这时会发现jmx默认端口已经固定为12345何12346，而server依然可以正常获取监控数据. #### 3. Configure Zabbix Server 首先需要修改zabbix_server.conf启用zabbix-java-gateway，让zabbix可以检测到服务,修改如下: ``` ### Option: JavaGateway # IP address (or hostname) of Zabbix Java gateway. # Only required if Java pollers are started. # # Mandatory: no # Default: JavaGateway=10.211.55.4 # 设置为你的zabbixsever IP ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#"},{"categories":["OpenSource","Zabbix"],"content":"最近项目上由于BUG问题导致Tomcat程序在运行过程中经常内存泄漏,而本身监控系统之中没有更好的检测到Tomcat堆空间(Head Memory)的使用情况导致报警频发，这篇文章主要讲述，如何在Zabbix之中调用jmx监控服务器上Tomcat堆空间的使用情况并增加对应报警功能。 测试环境: CentOS 6.8 Zabbix 2.4 Tomcat 7.0 实验前提默认是各位已经安装Zabbix Server服务器，并且至少有一台Zabbix agent服务器正常监控。关于如何搭建Zabbix监控集群，会有专门文章描述。 0.0.1 zabbix-java-gateway的工作机制 首先我们需要配置我们的Tomcat服务启用监控服务，这个是默认不启用的 之后需要在Zabbix的管理页面添加对应Tomcat服务器的jmx监控接口 最后zabbix端会自动获取zabbix-java-gateway的数据并根据相应模板进行展 示 工作流: [Zabbix-Server]–\u003e(port:10053 on zabbix server)–\u003e [zabbix-java-gateway] –(port:12345 on tomcatserver)–\u003e [JMX enabled] 0.0.2 1. Install zabbix-java-gateway on Zabbix Server因为我的zabbix是使用zabbix 2.4官方源安装，所以只需要用yum在安装即可: [root@6 ~]# sudo yum install -y zabbix-java-gateway 如果你没有官方源可能先安装该源，注意我的服务器zabbix版本是2.4 如果你是不同的版本，请到[这里]查找对应版本。 # 查看zabbix server版本 [root@6 ~]# zabbix_server --version Zabbix server v2.4.8 (revision 59539) (20 April 2016) Compilation time: May 4 2016 01:32:12 在使用yum安装zabbix-java-gateway源时,会自动关联安装openjdk，尽管这段程序没多大影响，如果你想保证系统JAVA环境不受到改变的话，可以在/etc/profile文件最后，增加如下内容: # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar 0.0.3 2. Confiure Tomcat host with enable jmx首先在$tomcatdir/bin/catalina.sh文件开头处增加如下： #!/bin/sh CATALINA_OPTS=\"-Dcom.sun.management.jmxremote \\ -Dcom.sun.management.jmxremote.authenticate=false \\ -Dcom.sun.management.jmxremote.ssl=false \\ -Dcom.sun.management.jmxremote.port=12345\" 然后,启动Tomcat，你会发现多了一个12345端口，这就是jmx的监听端口，请保证zabbix-java-gateway可以访问到这台服务器。 [root@6 ~]# /tomcat7/bin/startup.sh Starting Tomcat7: Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@6 ~]# netstat -ntlp | grep 12345 tcp 0 0 :::12345 :::* LISTEN 8793/java [root@6 ~]# #### ==*fix 1* == : zabbix agent与server存在复杂网络环境 这里疏忽了1个问题，如果您的zabbix server与agent端之间有防火墙规则，而按照我上面的所述只是增加了12345这个端口，那么很可能，您在/var/log/zabbix/zabbix_java_gateway.log 中会看到“No route to host”的报错，这是因为JMX不光开启了12345端口，还开启了另外两个随机端口，而在获取监控数据时会使用到其中一个，这就导致了无法通过固定的防火墙规则来开放该端口。其实有另外一个替代方式来使该监听端口固定下来——使用Tomcat提供的额外组件 catalina-jmx-remote.jar，这个组件是需要另外下载的： # 查看当前Tomcat版本. [root@6 bin]# ./catalina.sh version Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Server version: Apache Tomcat/7.0.64 Server built: Aug 19 2015 17:18:06 UTC Server number: 7.0.64.0 OS Name: Linux OS Version: 2.6.32-642.11.1.el6.x86_64 Architecture: amd64 JVM Version: 1.8.0_111-b15 JVM Vendor: Oracle Corporation # 下载 catalina-jmx-remote.jar # 请注意下载版本不要高于当前tomcat版本. wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.57/bin/extras/catalina-jmx-remote.jar -O lib/catalina-jmx-remote.jar 增加如下内容，在conf/server.xml中： 因为我们已经在conf/server.xml定义了rmiRegistryPortPlatform，所以要将bin/catalina.sh中CATALINA_OPTS的com.sun.management.jmxremote.port去掉，否则会因为jmxremote.port配置有优先级更高而导致配置失效。 CATALINA_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\" 完成之后，重启tomcat这时会发现jmx默认端口已经固定为12345何12346，而server依然可以正常获取监控数据. #### 3. Configure Zabbix Server 首先需要修改zabbix_server.conf启用zabbix-java-gateway，让zabbix可以检测到服务,修改如下: ``` ### Option: JavaGateway # IP address (or hostname) of Zabbix Java gateway. # Only required if Java pollers are started. # # Mandatory: no # Default: JavaGateway=10.211.55.4 # 设置为你的zabbixsever IP ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#zabbix-java-gateway的工作机制"},{"categories":["OpenSource","Zabbix"],"content":"最近项目上由于BUG问题导致Tomcat程序在运行过程中经常内存泄漏,而本身监控系统之中没有更好的检测到Tomcat堆空间(Head Memory)的使用情况导致报警频发，这篇文章主要讲述，如何在Zabbix之中调用jmx监控服务器上Tomcat堆空间的使用情况并增加对应报警功能。 测试环境: CentOS 6.8 Zabbix 2.4 Tomcat 7.0 实验前提默认是各位已经安装Zabbix Server服务器，并且至少有一台Zabbix agent服务器正常监控。关于如何搭建Zabbix监控集群，会有专门文章描述。 0.0.1 zabbix-java-gateway的工作机制 首先我们需要配置我们的Tomcat服务启用监控服务，这个是默认不启用的 之后需要在Zabbix的管理页面添加对应Tomcat服务器的jmx监控接口 最后zabbix端会自动获取zabbix-java-gateway的数据并根据相应模板进行展 示 工作流: [Zabbix-Server]–\u003e(port:10053 on zabbix server)–\u003e [zabbix-java-gateway] –(port:12345 on tomcatserver)–\u003e [JMX enabled] 0.0.2 1. Install zabbix-java-gateway on Zabbix Server因为我的zabbix是使用zabbix 2.4官方源安装，所以只需要用yum在安装即可: [root@6 ~]# sudo yum install -y zabbix-java-gateway 如果你没有官方源可能先安装该源，注意我的服务器zabbix版本是2.4 如果你是不同的版本，请到[这里]查找对应版本。 # 查看zabbix server版本 [root@6 ~]# zabbix_server --version Zabbix server v2.4.8 (revision 59539) (20 April 2016) Compilation time: May 4 2016 01:32:12 在使用yum安装zabbix-java-gateway源时,会自动关联安装openjdk，尽管这段程序没多大影响，如果你想保证系统JAVA环境不受到改变的话，可以在/etc/profile文件最后，增加如下内容: # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar 0.0.3 2. Confiure Tomcat host with enable jmx首先在$tomcatdir/bin/catalina.sh文件开头处增加如下： #!/bin/sh CATALINA_OPTS=\"-Dcom.sun.management.jmxremote \\ -Dcom.sun.management.jmxremote.authenticate=false \\ -Dcom.sun.management.jmxremote.ssl=false \\ -Dcom.sun.management.jmxremote.port=12345\" 然后,启动Tomcat，你会发现多了一个12345端口，这就是jmx的监听端口，请保证zabbix-java-gateway可以访问到这台服务器。 [root@6 ~]# /tomcat7/bin/startup.sh Starting Tomcat7: Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@6 ~]# netstat -ntlp | grep 12345 tcp 0 0 :::12345 :::* LISTEN 8793/java [root@6 ~]# #### ==*fix 1* == : zabbix agent与server存在复杂网络环境 这里疏忽了1个问题，如果您的zabbix server与agent端之间有防火墙规则，而按照我上面的所述只是增加了12345这个端口，那么很可能，您在/var/log/zabbix/zabbix_java_gateway.log 中会看到“No route to host”的报错，这是因为JMX不光开启了12345端口，还开启了另外两个随机端口，而在获取监控数据时会使用到其中一个，这就导致了无法通过固定的防火墙规则来开放该端口。其实有另外一个替代方式来使该监听端口固定下来——使用Tomcat提供的额外组件 catalina-jmx-remote.jar，这个组件是需要另外下载的： # 查看当前Tomcat版本. [root@6 bin]# ./catalina.sh version Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Server version: Apache Tomcat/7.0.64 Server built: Aug 19 2015 17:18:06 UTC Server number: 7.0.64.0 OS Name: Linux OS Version: 2.6.32-642.11.1.el6.x86_64 Architecture: amd64 JVM Version: 1.8.0_111-b15 JVM Vendor: Oracle Corporation # 下载 catalina-jmx-remote.jar # 请注意下载版本不要高于当前tomcat版本. wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.57/bin/extras/catalina-jmx-remote.jar -O lib/catalina-jmx-remote.jar 增加如下内容，在conf/server.xml中： 因为我们已经在conf/server.xml定义了rmiRegistryPortPlatform，所以要将bin/catalina.sh中CATALINA_OPTS的com.sun.management.jmxremote.port去掉，否则会因为jmxremote.port配置有优先级更高而导致配置失效。 CATALINA_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\" 完成之后，重启tomcat这时会发现jmx默认端口已经固定为12345何12346，而server依然可以正常获取监控数据. #### 3. Configure Zabbix Server 首先需要修改zabbix_server.conf启用zabbix-java-gateway，让zabbix可以检测到服务,修改如下: ``` ### Option: JavaGateway # IP address (or hostname) of Zabbix Java gateway. # Only required if Java pollers are started. # # Mandatory: no # Default: JavaGateway=10.211.55.4 # 设置为你的zabbixsever IP ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#1-install-zabbix-java-gateway-on-zabbix-server"},{"categories":["OpenSource","Zabbix"],"content":"最近项目上由于BUG问题导致Tomcat程序在运行过程中经常内存泄漏,而本身监控系统之中没有更好的检测到Tomcat堆空间(Head Memory)的使用情况导致报警频发，这篇文章主要讲述，如何在Zabbix之中调用jmx监控服务器上Tomcat堆空间的使用情况并增加对应报警功能。 测试环境: CentOS 6.8 Zabbix 2.4 Tomcat 7.0 实验前提默认是各位已经安装Zabbix Server服务器，并且至少有一台Zabbix agent服务器正常监控。关于如何搭建Zabbix监控集群，会有专门文章描述。 0.0.1 zabbix-java-gateway的工作机制 首先我们需要配置我们的Tomcat服务启用监控服务，这个是默认不启用的 之后需要在Zabbix的管理页面添加对应Tomcat服务器的jmx监控接口 最后zabbix端会自动获取zabbix-java-gateway的数据并根据相应模板进行展 示 工作流: [Zabbix-Server]–\u003e(port:10053 on zabbix server)–\u003e [zabbix-java-gateway] –(port:12345 on tomcatserver)–\u003e [JMX enabled] 0.0.2 1. Install zabbix-java-gateway on Zabbix Server因为我的zabbix是使用zabbix 2.4官方源安装，所以只需要用yum在安装即可: [root@6 ~]# sudo yum install -y zabbix-java-gateway 如果你没有官方源可能先安装该源，注意我的服务器zabbix版本是2.4 如果你是不同的版本，请到[这里]查找对应版本。 # 查看zabbix server版本 [root@6 ~]# zabbix_server --version Zabbix server v2.4.8 (revision 59539) (20 April 2016) Compilation time: May 4 2016 01:32:12 在使用yum安装zabbix-java-gateway源时,会自动关联安装openjdk，尽管这段程序没多大影响，如果你想保证系统JAVA环境不受到改变的话，可以在/etc/profile文件最后，增加如下内容: # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar 0.0.3 2. Confiure Tomcat host with enable jmx首先在$tomcatdir/bin/catalina.sh文件开头处增加如下： #!/bin/sh CATALINA_OPTS=\"-Dcom.sun.management.jmxremote \\ -Dcom.sun.management.jmxremote.authenticate=false \\ -Dcom.sun.management.jmxremote.ssl=false \\ -Dcom.sun.management.jmxremote.port=12345\" 然后,启动Tomcat，你会发现多了一个12345端口，这就是jmx的监听端口，请保证zabbix-java-gateway可以访问到这台服务器。 [root@6 ~]# /tomcat7/bin/startup.sh Starting Tomcat7: Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@6 ~]# netstat -ntlp | grep 12345 tcp 0 0 :::12345 :::* LISTEN 8793/java [root@6 ~]# #### ==*fix 1* == : zabbix agent与server存在复杂网络环境 这里疏忽了1个问题，如果您的zabbix server与agent端之间有防火墙规则，而按照我上面的所述只是增加了12345这个端口，那么很可能，您在/var/log/zabbix/zabbix_java_gateway.log 中会看到“No route to host”的报错，这是因为JMX不光开启了12345端口，还开启了另外两个随机端口，而在获取监控数据时会使用到其中一个，这就导致了无法通过固定的防火墙规则来开放该端口。其实有另外一个替代方式来使该监听端口固定下来——使用Tomcat提供的额外组件 catalina-jmx-remote.jar，这个组件是需要另外下载的： # 查看当前Tomcat版本. [root@6 bin]# ./catalina.sh version Using CATALINA_BASE: /tomcat7 Using CATALINA_HOME: /tomcat7 Using CATALINA_TMPDIR: /tomcat7/temp Using JRE_HOME: /usr Using CLASSPATH: /tomcat7/bin/bootstrap.jar:/tomcat7/bin/tomcat-juli.jar Server version: Apache Tomcat/7.0.64 Server built: Aug 19 2015 17:18:06 UTC Server number: 7.0.64.0 OS Name: Linux OS Version: 2.6.32-642.11.1.el6.x86_64 Architecture: amd64 JVM Version: 1.8.0_111-b15 JVM Vendor: Oracle Corporation # 下载 catalina-jmx-remote.jar # 请注意下载版本不要高于当前tomcat版本. wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.57/bin/extras/catalina-jmx-remote.jar -O lib/catalina-jmx-remote.jar 增加如下内容，在conf/server.xml中： 因为我们已经在conf/server.xml定义了rmiRegistryPortPlatform，所以要将bin/catalina.sh中CATALINA_OPTS的com.sun.management.jmxremote.port去掉，否则会因为jmxremote.port配置有优先级更高而导致配置失效。 CATALINA_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\" 完成之后，重启tomcat这时会发现jmx默认端口已经固定为12345何12346，而server依然可以正常获取监控数据. #### 3. Configure Zabbix Server 首先需要修改zabbix_server.conf启用zabbix-java-gateway，让zabbix可以检测到服务,修改如下: ``` ### Option: JavaGateway # IP address (or hostname) of Zabbix Java gateway. # Only required if Java pollers are started. # # Mandatory: no # Default: JavaGateway=10.211.55.4 # 设置为你的zabbixsever IP ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#2-confiure-tomcat-host-with-enable-jmx"},{"categories":["OpenSource","Zabbix"],"content":" 0.1 Option: JavaGatewayPort","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:1","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#option-javagatewayport"},{"categories":["OpenSource","Zabbix"],"content":" Port that Zabbix Java gateway listens on.","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#port-that-zabbix-java-gateway-listens-on"},{"categories":["OpenSource","Zabbix"],"content":" Mandatory: no","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#mandatory-no"},{"categories":["OpenSource","Zabbix"],"content":" Range: 1024-32767","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#range-1024-32767"},{"categories":["OpenSource","Zabbix"],"content":" Default:JavaGatewayPort=10053 # 设置服务端监听接口 ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#default"},{"categories":["OpenSource","Zabbix"],"content":" 0.2 Option: StartJavaPollers","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:1","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#option-startjavapollers"},{"categories":["OpenSource","Zabbix"],"content":" Number of pre-forked instances of Java pollers.","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#number-of-pre-forked-instances-of-java-pollers"},{"categories":["OpenSource","Zabbix"],"content":" Mandatory: no","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#mandatory-no-1"},{"categories":["OpenSource","Zabbix"],"content":" Range: 0-1000","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#range-0-1000"},{"categories":["OpenSource","Zabbix"],"content":" Default:StartJavaPollers=5 # 设置多线程启动 然后修改zabbix\\_java\\_gateway.conf 配置如下: ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#default-1"},{"categories":["OpenSource","Zabbix"],"content":" 0.3 Option: zabbix.listenIP","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:1","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#option-zabbixlistenip"},{"categories":["OpenSource","Zabbix"],"content":" IP address to listen on.","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#ip-address-to-listen-on"},{"categories":["OpenSource","Zabbix"],"content":" Mandatory: no","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#mandatory-no-2"},{"categories":["OpenSource","Zabbix"],"content":" Default:LISTEN_IP=“10.211.55.4” # 配置监听IP ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#default-2"},{"categories":["OpenSource","Zabbix"],"content":" 0.4 Option: zabbix.listenPort","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:1","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#option-zabbixlistenport"},{"categories":["OpenSource","Zabbix"],"content":" Port to listen on.","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#port-to-listen-on"},{"categories":["OpenSource","Zabbix"],"content":" Mandatory: no","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#mandatory-no-3"},{"categories":["OpenSource","Zabbix"],"content":" Range: 1024-32767","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#range-1024-32767-1"},{"categories":["OpenSource","Zabbix"],"content":" Default:LISTEN_PORT=10053 # 配置监听端口 ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#default-3"},{"categories":["OpenSource","Zabbix"],"content":" 0.5 Option: zabbix.pidFile","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:1","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#option-zabbixpidfile"},{"categories":["OpenSource","Zabbix"],"content":" Name of PID file.","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#name-of-pid-file"},{"categories":["OpenSource","Zabbix"],"content":" If omitted, Zabbix Java Gateway is started as a console application.","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#if-omitted-zabbix-java-gateway-is-started-as-a-console-application"},{"categories":["OpenSource","Zabbix"],"content":" Mandatory: no","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#mandatory-no-4"},{"categories":["OpenSource","Zabbix"],"content":" Default:","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#default-4"},{"categories":["OpenSource","Zabbix"],"content":" PID_FILE=PID_FILE=\"/var/run/zabbix/zabbix_java.pid\" ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#pid_file"},{"categories":["OpenSource","Zabbix"],"content":" 0.6 Option: zabbix.startPollers","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:1","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#option-zabbixstartpollers"},{"categories":["OpenSource","Zabbix"],"content":" Number of worker threads to start.","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#number-of-worker-threads-to-start"},{"categories":["OpenSource","Zabbix"],"content":" Mandatory: no","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#mandatory-no-5"},{"categories":["OpenSource","Zabbix"],"content":" Range: 1-1000","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#range-1-1000"},{"categories":["OpenSource","Zabbix"],"content":" Default:","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#default-5"},{"categories":["OpenSource","Zabbix"],"content":" 不能大于zabbix_server.conf的值，否则可能导致当连接Java gateway时没有多余的线程进行处理START_POLLERS=5 最后启动启动zabbix-java-gateway，并重启zabbix-server [root@6 ~]# service zabbix-java-gateway start Starting zabbix java gateway: [ OK ] [root@6 ~]# service zabbix-server restart Stopping zabbix server: [ OK ] Starting zabbix server: [ OK ] 我在尝试重启发现一问题，zabbix-java-gateway通过service命令管理stop不能删除pid文件导致服务无法启动，如果你也碰到，解决办法如下: [root@6 zabbix]# vim /etc/rc.d/init.d/zabbix-java-gateway ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#不能大于zabbix_serverconf的值否则可能导致当连接java-gateway时没有多余的线程进行处理"},{"categories":["OpenSource","Zabbix"],"content":" line 97, 注释修改为如下：","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#line-97-注释修改为如下"},{"categories":["OpenSource","Zabbix"],"content":" kill cat $PID_FILE \u0026\u0026 rm $PID_FILE rm -f $PID_FILE #### 4. Adding jmx host on Zabbix Web consloe 首先，上传Template Tomcat Head Memory模板，这个我做了一个简单的模板，只针对了堆内存空间的监控，并针对使用率超过60%以及80%，不同的警报。需要的同学可以直接从我这里下载，然后在Configuration-Templates导入到zabbix模板库内。\u003cbr\u003e 下载请点击:[Template App Tomcat Head Memory](https://samzong.oss-cn-shenzhen.aliyuncs.com/2016/12/zbx_template_app_tomcat_head_memory.xml) 然后，增加服务器的jmx监控\u003cbr\u003e ![](https://samzong.oss-cn-shenzhen.aliyuncs.com/2016/12/zabbix-jmx-settings.png) \u003cbr\u003e 关联模板\u003cbr\u003e ![](https://samzong.oss-cn-shenzhen.aliyuncs.com/2016/12/zabbix-host-select-template.png) #### 5. View the Head Memory Monitoring. ![](https://samzong.oss-cn-shenzhen.aliyuncs.com/2016/12/zabbix-view-monitor.png) ","date":"2017-01-18","objectID":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/:0:0","series":null,"tags":["Zabbix","Tomcat"],"title":"HowTo Monitor Tomcat HeadMemory for Zabbix","uri":"https://samzong.me/howto-monitor-tomcat-head-memory-for-zabbix/#kill-cat-pid_file--rm-pid_file"},{"categories":["数据库","MySQL"],"content":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 0.0.1 1. mysqldump导出但张表的表结构及数据 mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName \u003e tbName.sql 0.0.2 2. 新增数据库，专做临时每日数据备份库 # loginTo your DBserver mysql\u003e create database bakdbName character set utf8; 0.0.3 3. 导入该表数据到新增数据库内 mysql -h dbServer -P dbServerPort -u db_user -p bakdbName \u003c tbName.sql 0.0.4 4 . 重命名导入的表名 mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 0.0.5 5. 编写脚本 [root@testServer01 ~]# cat /usr/local/bin/bakTable.sh #!/bin/bash #Create by SAMZONG DATE=`date +%Y%m%d` TMPDIR=/tmp/baksql # modify your DB configure DBSERVER1=localhost DBSERVER1_PORT=3306 DBSERVER1_USER=root DBSERVER1_PASSWORD=password MASTER_DBNAME=zabbix MASTER_TBNAME=users DBSERVER2=localhost DBSERVER2_PORT=3306 DBSERVER2_USER=root DBSERVER2_PASSWORD=password BAKDBNAME=z3 # creat tmp folder if [ ! -d $TMPDIR ]; then mkdir $TMPDIR fi # dump tbName mysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME \u003e $TMPDIR/$MASTER_TBNAME.sql # insert tbNAME to bakdbName if [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME \u003c $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fi fi 0.0.6 6. 添加到Linux计划任务 00 00 * * * /usr/local/bin/bakTable.sh ","date":"2017-01-15","objectID":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/:0:0","series":null,"tags":["MySQL","Shell"],"title":"每日备份MySQL单表数据","uri":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/#"},{"categories":["数据库","MySQL"],"content":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 0.0.1 1. mysqldump导出但张表的表结构及数据 mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName \u003e tbName.sql 0.0.2 2. 新增数据库，专做临时每日数据备份库 # loginTo your DBserver mysql\u003e create database bakdbName character set utf8; 0.0.3 3. 导入该表数据到新增数据库内 mysql -h dbServer -P dbServerPort -u db_user -p bakdbName \u003c tbName.sql 0.0.4 4 . 重命名导入的表名 mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 0.0.5 5. 编写脚本 [root@testServer01 ~]# cat /usr/local/bin/bakTable.sh #!/bin/bash #Create by SAMZONG DATE=`date +%Y%m%d` TMPDIR=/tmp/baksql # modify your DB configure DBSERVER1=localhost DBSERVER1_PORT=3306 DBSERVER1_USER=root DBSERVER1_PASSWORD=password MASTER_DBNAME=zabbix MASTER_TBNAME=users DBSERVER2=localhost DBSERVER2_PORT=3306 DBSERVER2_USER=root DBSERVER2_PASSWORD=password BAKDBNAME=z3 # creat tmp folder if [ ! -d $TMPDIR ]; then mkdir $TMPDIR fi # dump tbName mysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME \u003e $TMPDIR/$MASTER_TBNAME.sql # insert tbNAME to bakdbName if [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME \u003c $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fi fi 0.0.6 6. 添加到Linux计划任务 00 00 * * * /usr/local/bin/bakTable.sh ","date":"2017-01-15","objectID":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/:0:0","series":null,"tags":["MySQL","Shell"],"title":"每日备份MySQL单表数据","uri":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/#1-mysqldump导出但张表的表结构及数据"},{"categories":["数据库","MySQL"],"content":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 0.0.1 1. mysqldump导出但张表的表结构及数据 mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName \u003e tbName.sql 0.0.2 2. 新增数据库，专做临时每日数据备份库 # loginTo your DBserver mysql\u003e create database bakdbName character set utf8; 0.0.3 3. 导入该表数据到新增数据库内 mysql -h dbServer -P dbServerPort -u db_user -p bakdbName \u003c tbName.sql 0.0.4 4 . 重命名导入的表名 mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 0.0.5 5. 编写脚本 [root@testServer01 ~]# cat /usr/local/bin/bakTable.sh #!/bin/bash #Create by SAMZONG DATE=`date +%Y%m%d` TMPDIR=/tmp/baksql # modify your DB configure DBSERVER1=localhost DBSERVER1_PORT=3306 DBSERVER1_USER=root DBSERVER1_PASSWORD=password MASTER_DBNAME=zabbix MASTER_TBNAME=users DBSERVER2=localhost DBSERVER2_PORT=3306 DBSERVER2_USER=root DBSERVER2_PASSWORD=password BAKDBNAME=z3 # creat tmp folder if [ ! -d $TMPDIR ]; then mkdir $TMPDIR fi # dump tbName mysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME \u003e $TMPDIR/$MASTER_TBNAME.sql # insert tbNAME to bakdbName if [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME \u003c $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fi fi 0.0.6 6. 添加到Linux计划任务 00 00 * * * /usr/local/bin/bakTable.sh ","date":"2017-01-15","objectID":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/:0:0","series":null,"tags":["MySQL","Shell"],"title":"每日备份MySQL单表数据","uri":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/#2-新增数据库专做临时每日数据备份库"},{"categories":["数据库","MySQL"],"content":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 0.0.1 1. mysqldump导出但张表的表结构及数据 mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName \u003e tbName.sql 0.0.2 2. 新增数据库，专做临时每日数据备份库 # loginTo your DBserver mysql\u003e create database bakdbName character set utf8; 0.0.3 3. 导入该表数据到新增数据库内 mysql -h dbServer -P dbServerPort -u db_user -p bakdbName \u003c tbName.sql 0.0.4 4 . 重命名导入的表名 mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 0.0.5 5. 编写脚本 [root@testServer01 ~]# cat /usr/local/bin/bakTable.sh #!/bin/bash #Create by SAMZONG DATE=`date +%Y%m%d` TMPDIR=/tmp/baksql # modify your DB configure DBSERVER1=localhost DBSERVER1_PORT=3306 DBSERVER1_USER=root DBSERVER1_PASSWORD=password MASTER_DBNAME=zabbix MASTER_TBNAME=users DBSERVER2=localhost DBSERVER2_PORT=3306 DBSERVER2_USER=root DBSERVER2_PASSWORD=password BAKDBNAME=z3 # creat tmp folder if [ ! -d $TMPDIR ]; then mkdir $TMPDIR fi # dump tbName mysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME \u003e $TMPDIR/$MASTER_TBNAME.sql # insert tbNAME to bakdbName if [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME \u003c $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fi fi 0.0.6 6. 添加到Linux计划任务 00 00 * * * /usr/local/bin/bakTable.sh ","date":"2017-01-15","objectID":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/:0:0","series":null,"tags":["MySQL","Shell"],"title":"每日备份MySQL单表数据","uri":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/#3-导入该表数据到新增数据库内"},{"categories":["数据库","MySQL"],"content":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 0.0.1 1. mysqldump导出但张表的表结构及数据 mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName \u003e tbName.sql 0.0.2 2. 新增数据库，专做临时每日数据备份库 # loginTo your DBserver mysql\u003e create database bakdbName character set utf8; 0.0.3 3. 导入该表数据到新增数据库内 mysql -h dbServer -P dbServerPort -u db_user -p bakdbName \u003c tbName.sql 0.0.4 4 . 重命名导入的表名 mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 0.0.5 5. 编写脚本 [root@testServer01 ~]# cat /usr/local/bin/bakTable.sh #!/bin/bash #Create by SAMZONG DATE=`date +%Y%m%d` TMPDIR=/tmp/baksql # modify your DB configure DBSERVER1=localhost DBSERVER1_PORT=3306 DBSERVER1_USER=root DBSERVER1_PASSWORD=password MASTER_DBNAME=zabbix MASTER_TBNAME=users DBSERVER2=localhost DBSERVER2_PORT=3306 DBSERVER2_USER=root DBSERVER2_PASSWORD=password BAKDBNAME=z3 # creat tmp folder if [ ! -d $TMPDIR ]; then mkdir $TMPDIR fi # dump tbName mysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME \u003e $TMPDIR/$MASTER_TBNAME.sql # insert tbNAME to bakdbName if [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME \u003c $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fi fi 0.0.6 6. 添加到Linux计划任务 00 00 * * * /usr/local/bin/bakTable.sh ","date":"2017-01-15","objectID":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/:0:0","series":null,"tags":["MySQL","Shell"],"title":"每日备份MySQL单表数据","uri":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/#4--重命名导入的表名"},{"categories":["数据库","MySQL"],"content":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 0.0.1 1. mysqldump导出但张表的表结构及数据 mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName \u003e tbName.sql 0.0.2 2. 新增数据库，专做临时每日数据备份库 # loginTo your DBserver mysql\u003e create database bakdbName character set utf8; 0.0.3 3. 导入该表数据到新增数据库内 mysql -h dbServer -P dbServerPort -u db_user -p bakdbName \u003c tbName.sql 0.0.4 4 . 重命名导入的表名 mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 0.0.5 5. 编写脚本 [root@testServer01 ~]# cat /usr/local/bin/bakTable.sh #!/bin/bash #Create by SAMZONG DATE=`date +%Y%m%d` TMPDIR=/tmp/baksql # modify your DB configure DBSERVER1=localhost DBSERVER1_PORT=3306 DBSERVER1_USER=root DBSERVER1_PASSWORD=password MASTER_DBNAME=zabbix MASTER_TBNAME=users DBSERVER2=localhost DBSERVER2_PORT=3306 DBSERVER2_USER=root DBSERVER2_PASSWORD=password BAKDBNAME=z3 # creat tmp folder if [ ! -d $TMPDIR ]; then mkdir $TMPDIR fi # dump tbName mysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME \u003e $TMPDIR/$MASTER_TBNAME.sql # insert tbNAME to bakdbName if [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME \u003c $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fi fi 0.0.6 6. 添加到Linux计划任务 00 00 * * * /usr/local/bin/bakTable.sh ","date":"2017-01-15","objectID":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/:0:0","series":null,"tags":["MySQL","Shell"],"title":"每日备份MySQL单表数据","uri":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/#5-编写脚本"},{"categories":["数据库","MySQL"],"content":"最近愈近年底，客户业务涉及对账操作，所以同事提出需求需要单独备份某张表数据，并且每日备份；思考之后解决办法如下： mysqldump导出单张表的表结构及数据 新增数据库，专做临时每日数据备份库 导入该表数据到新增数据库内 重命名导入的表名（预防计划任务下次导入时数据覆盖） 编写脚本，添加Linux计划任务 0.0.1 1. mysqldump导出但张表的表结构及数据 mysqldump -h dbServer -PdbServerPort -u db_user -p -d dbName tbName \u003e tbName.sql 0.0.2 2. 新增数据库，专做临时每日数据备份库 # loginTo your DBserver mysql\u003e create database bakdbName character set utf8; 0.0.3 3. 导入该表数据到新增数据库内 mysql -h dbServer -P dbServerPort -u db_user -p bakdbName \u003c tbName.sql 0.0.4 4 . 重命名导入的表名 mysql -u db_user -p -e \"rename table bakdbName.tbName to bakdbName.tbName_$DATE\" 0.0.5 5. 编写脚本 [root@testServer01 ~]# cat /usr/local/bin/bakTable.sh #!/bin/bash #Create by SAMZONG DATE=`date +%Y%m%d` TMPDIR=/tmp/baksql # modify your DB configure DBSERVER1=localhost DBSERVER1_PORT=3306 DBSERVER1_USER=root DBSERVER1_PASSWORD=password MASTER_DBNAME=zabbix MASTER_TBNAME=users DBSERVER2=localhost DBSERVER2_PORT=3306 DBSERVER2_USER=root DBSERVER2_PASSWORD=password BAKDBNAME=z3 # creat tmp folder if [ ! -d $TMPDIR ]; then mkdir $TMPDIR fi # dump tbName mysqldump -h $DBSERVER1 -P $DBSERVER1_PORT -u $DBSERVER1_USER -p\"$DBSERVER1_PASSWORD\" -d $MASTER_DBNAME $MASTER_TBNAME \u003e $TMPDIR/$MASTER_TBNAME.sql # insert tbNAME to bakdbName if [ $? -eq 0 ]; then mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" $BAKDBNAME \u003c $TMPDIR/$MASTER_TBNAME.sql if [ $? -eq 0 ]; then # rename tbName mysql -h $DBSERVER2 -P $DBSERVER2_PORT -u $DBSERVER2_USER -p\"$DBSERVER2_PASSWORD\" -e \"rename table \"$BAKDBNAME\".\"$MASTER_TBNAME\" to \"$BAKDBNAME\".\"$MASTER_TBNAME\"_\"$DATE\";\" fi fi 0.0.6 6. 添加到Linux计划任务 00 00 * * * /usr/local/bin/bakTable.sh ","date":"2017-01-15","objectID":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/:0:0","series":null,"tags":["MySQL","Shell"],"title":"每日备份MySQL单表数据","uri":"https://samzong.me/%E6%AF%8F%E6%97%A5%E5%A4%87%E4%BB%BDmysql%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE/#6-添加到linux计划任务"},{"categories":null,"content":" 小时候，爷爷跟我说：有一天，你会遇到一个如彩虹般绚丽的人，那时候，你会觉得其他一切都是浮云。 我今年26岁，在这个世界上生存了8938天，喜欢过三个如彩虹般的姑娘，却始终没有明白一个道理。 怎么样才算喜欢一个人 ? 从那时个性张扬的我总爱逗气同桌的你，有一次把你气的都哭了，我忐忑了一节课，忍不住写纸条给你问还生不生气，你说刚开始有点，现在不生气了；扭头给了我一个微笑，这个微笑整整充满了我整个的青春岁月，直到看到你扮上美丽的红妆嫁衣，而且新郎不是我，写下“恭喜”二字，便再也没出现在你生活，也没让你出现在我的生活里。我们身边所有的朋友都知道我是多么喜欢你，很难想象最后结婚的不是我们；我那时一直以为人生最幸福的一件事：与我结婚的人就是我的初恋，于是，我之后便开始幻想我们的美好未来，高中辍学之后便从业，我那时想你大到学毕业还要5年时间，我努力奋斗，你大学毕业之后我们就结婚；好像所有的努力都不累，浑身上下像个超人，总是充满力量，可是高考前夕的你告诉我，你在学校谈了一个男生被分手了没心思学习不想读了，我安慰你批评你无论怎样都要完成高考读大学，感情问题放到大学里去谈，你虽然顺利读了大学，却大一还没读完，就休学开始工作了。之后我便经常奔走于上海这座城市中，你换一个工作地方，那个地方就是我常去之处，陪你下班，帮你收拾工作，待收拾完之后，我再顶着茫茫夜色回家，教你不能忘记学习，努力工作，我们一起努力；我总是舍不得放弃你，你是我第一个喜欢的人啊，你是第一个听到我哭泣的人啊，总是有太多太多的回忆拉扯着不让我往前走，可是听到你结婚的消息，我最终还是放弃了；朋友说，为了一个女孩，放弃了自己的大好青春值得吗？我不清楚，我只是明白，我喜欢你，拼了命的喜欢，拼尽全力对她好，可是我输了，我一直不明白为什么你会与一个毫不起眼的人结婚而不是我。 现在想起来，那时的我的确很好，只是缺少了点自我。 第二个彩虹姑娘是在一家公司做了快一年了，第一次去总部，摸索到地址，看到一个姑娘问：这里是xx公司吗？她说是的，我说我们是同事，我从分部过来。之后下班，互加了微信，晚上聊到很晚，我半开玩笑说，我们这么合拍，做我女朋友怎样？她说考虑下；周末收到消息：我在yy上课，如果你能在下课之前到这里我就做你女朋友，我爬起来直接打车过去；然后，我们开始疯狂的约会，每个周末都粘在一起，尝试各种黑暗料理，窝在沙发里看电影，于是，我又开始把某个地方变成我常去之处，为了能节省到她家的时间，我从父母哪里搬出来；可是，随着时间的推移，我们都发现了彼此的问题，我一直不愿意去说，我又开始改变自己去适应她的节奏，我说我可以为你去改变，我说我努力去做，可是，我们最后还是分手了，我是喜欢她的，分手都很温和。于是，我开始拼命工作，拼命去学习，努力去忘记她，没想到就真的忘记了。 我开始害怕爱情了，我不太敢拥有，就是不明白什么是：不可爱的时候要适可而止。 换了几份工作，也开始了新的所有生活，直到一个姑娘走进我的心里，她就好像代表了美好出现在我生活里，可是，我不敢说出来，可是，我喜欢她啊，我怎么能轻易放弃；我记得第一次成功约她出去，我内心的激动，朋友做军师帮我打扮，竭尽所能让自己表现的很好；于是我开始傻傻幻想我们的将来，我要努力做事，我让她幸福，我要为了她奋不顾身，我要…，可是我今年26岁，在这个世界上生存了8938天，喜欢过三个如彩虹般的姑娘，却始终没有明白一个道理；“从朋友变成男朋友需要一个过程，而这个过程不是让我看到你对我好，而是让我看到你的好，欣赏你的好。” 一语惊醒梦中人，我总是在爱情昏了头脑，我一直以为我努力对她好是爱，其实，我更爱的为了这份感情努力的自己，爱一个人，其实不需要改变，努力做好你自己就可以。 我说我想给你一个家，其实，我是想给自己一个家。 可是，我还是会努力，我会耐心等你，我会对爱情一直充满期待，我还是那个充满力量的超人，我会一直努力去守护我爱的人，我希望在她孤单委屈的时候，我是她的依靠，为她阻挡这世界的风风雨雨；为了爱的人，抛头颅洒热血，无非换来一句：你想怎样。 ","date":"2017-01-15","objectID":"https://samzong.me/%E5%BD%A9%E8%99%B9%E5%A7%91%E5%A8%98%E4%BB%AC/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"斯人若彩虹","uri":"https://samzong.me/%E5%BD%A9%E8%99%B9%E5%A7%91%E5%A8%98%E4%BB%AC/#"},{"categories":null,"content":"生活在别处，第一次看到这句话的时候是初中，便在之后的许多年间未曾忘记。 第一我不懂为何“生活在别处”，生活如何在别处？生活不应再当下？生活如影随行，在你忙忙碌碌烦烦烦烦时，生活就在这里，在你快快乐乐时，生活还在这里，我一直以为所见所行就是生活；可是，随着生长，你依旧在这里，而生活早已飘落别处。 “生活在别处”是法国诗人兰波的一句名言，而他用一生践行了这句话，他一生都在出走，从法国到英国而后非洲，兰波一生都在出走，直到最后死去；他是一位无法被归类的诗人，放荡不羁，与魏尔伦的爱情，新世界的开创者，兰波一生都在尝试不同的人生，就像他说的：“我愿成为任何人”。 《全蝕狂愛》 1995 ，描述了兰波的故事，与魏尔伦的爱情。由李奥纳多扮演。 我不会写故事，更多的用来记录我的生活，本来今天晚上准备写些什么，如何关于整理笔记之类，下班日常刷知乎，看到《这个杀手不太冷》中一句话，“生活一直是那么艰难吗？还是只有小时候是这样？” “一直是。”脑海里就浮现了“生活在别处”这句话，随着人生阅历的成长，对这几句话的理解，也是不断加深； 所以，回来写下这段文字。 我一直试着找出自身的问题，我一直努力和生活更好地相处，我其实并不知道如何规划，我能感受到生命中特别重要的东西，要拼尽所有力气去抓住；我不喜欢去做承诺，我所能做的就是一直努力去做；在我们的人生中肯定会存在一些望不到顶的大山，可能我穷尽一生也无法看到山顶的景色和山的那边的一切，这的确是一件想想就很难过的事情，并且这一切无法逃避，听起来是那么地令人绝望，但是，亲爱的，我们总要去面对，或是大步向前，冲向那满是荆棘望不到顶的大山，要打败可以吃掉我们的大老虎，一次又一次，我们会经常失败，摔倒，伤痕累累，可是我总要爬起来，一次又一次，每次都像是用尽整个生命的力量，也许我们真的最后跌倒爬不起来了，也许我们最后真的无法凝聚一丝力量，那至少，我们明白我是真的做不到，而不是说从一开始就放弃，努力让自己变更好；嗯，方向也很重要。 好了，我还要去整理笔记，然后早点睡觉，今天心情不太好，可身边总有些美丽的人，谢谢！ 最后，生活一直是那么艰难吗？ ","date":"2017-01-10","objectID":"https://samzong.me/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"生活在别处","uri":"https://samzong.me/%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%88%AB%E5%A4%84/#"},{"categories":["虚拟化","Docker"],"content":"因为Docker Hub没有在国内部署站点或者增加了国内的CDN，这导致国内的开发者在使用docker pull 获取images的时候速度非常的慢，甚至于因为网络的原因会失败。 但是Docker Hub有着非常丰富的镜像资源，所以我这一直是个问题困扰着我，一次偶然机会发现了DaoCloud提供了国内镜像加速服务，并且提供的Docker Hub Mirror详细的文档。 0.0.1 1. 注册DaoCloud账号首先，你需要到一DaoCloud账号，注册很方便，点击地址：signup 0.0.2 2. 登录到你的DaoCloud账号内，然后入下图操作 0.0.3 3. 查看你的DaoCloud加速器地址链接 选择你相对应平台的的加速器设置 ","date":"2017-01-07","objectID":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/:0:0","series":null,"tags":["Docker"],"title":"Docker Hub 国内加速","uri":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/#"},{"categories":["虚拟化","Docker"],"content":"因为Docker Hub没有在国内部署站点或者增加了国内的CDN，这导致国内的开发者在使用docker pull 获取images的时候速度非常的慢，甚至于因为网络的原因会失败。 但是Docker Hub有着非常丰富的镜像资源，所以我这一直是个问题困扰着我，一次偶然机会发现了DaoCloud提供了国内镜像加速服务，并且提供的Docker Hub Mirror详细的文档。 0.0.1 1. 注册DaoCloud账号首先，你需要到一DaoCloud账号，注册很方便，点击地址：signup 0.0.2 2. 登录到你的DaoCloud账号内，然后入下图操作 0.0.3 3. 查看你的DaoCloud加速器地址链接 选择你相对应平台的的加速器设置 ","date":"2017-01-07","objectID":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/:0:0","series":null,"tags":["Docker"],"title":"Docker Hub 国内加速","uri":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/#1-注册daocloud账号"},{"categories":["虚拟化","Docker"],"content":"因为Docker Hub没有在国内部署站点或者增加了国内的CDN，这导致国内的开发者在使用docker pull 获取images的时候速度非常的慢，甚至于因为网络的原因会失败。 但是Docker Hub有着非常丰富的镜像资源，所以我这一直是个问题困扰着我，一次偶然机会发现了DaoCloud提供了国内镜像加速服务，并且提供的Docker Hub Mirror详细的文档。 0.0.1 1. 注册DaoCloud账号首先，你需要到一DaoCloud账号，注册很方便，点击地址：signup 0.0.2 2. 登录到你的DaoCloud账号内，然后入下图操作 0.0.3 3. 查看你的DaoCloud加速器地址链接 选择你相对应平台的的加速器设置 ","date":"2017-01-07","objectID":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/:0:0","series":null,"tags":["Docker"],"title":"Docker Hub 国内加速","uri":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/#2-登录到你的daocloud账号内然后入下图操作"},{"categories":["虚拟化","Docker"],"content":"因为Docker Hub没有在国内部署站点或者增加了国内的CDN，这导致国内的开发者在使用docker pull 获取images的时候速度非常的慢，甚至于因为网络的原因会失败。 但是Docker Hub有着非常丰富的镜像资源，所以我这一直是个问题困扰着我，一次偶然机会发现了DaoCloud提供了国内镜像加速服务，并且提供的Docker Hub Mirror详细的文档。 0.0.1 1. 注册DaoCloud账号首先，你需要到一DaoCloud账号，注册很方便，点击地址：signup 0.0.2 2. 登录到你的DaoCloud账号内，然后入下图操作 0.0.3 3. 查看你的DaoCloud加速器地址链接 选择你相对应平台的的加速器设置 ","date":"2017-01-07","objectID":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/:0:0","series":null,"tags":["Docker"],"title":"Docker Hub 国内加速","uri":"https://samzong.me/docker-hub-%E5%9B%BD%E5%86%85%E5%8A%A0%E9%80%9F/#3-查看你的daocloud加速器地址"},{"categories":["云服务","Aliyun"],"content":" From 阿里云官方Github Demo: CentOS 6.8 on ECS ossfs 是通过磁盘挂载的形式，将oss存储挂载到linux、类unix等操作系统，而且不仅仅可以挂载阿里云内的ECS上，理论上所有网络能到达oss的都可以挂载，但还是要以实际问题为准。 0.0.0.1 1.Download \u0026 Install官方版本发布页面，请根据你的系统类型进行选择，我这演示的环境是CentOS 6.8；ossfs目前最新的版本是v1.79.9，您可以根据自己当时版本进行选择，建议选择最新版本。 # 请先将包上传到服务器上 sudo yum localinstall ossfs_1.79.9_centos6.5_x86_64.rpm 注意使用localinstall，因为在安装过程，yum 可以很好的解决依赖关系，会节省我们很多时间 0.0.0.2 2. OSS \u0026 Bucket需要获取以下信息，在后面我们都会用到的： Bucket 名称 Access Key ID Access Key Secret 4. Location，这需要注意点，不要加上Bucket的名字，区域对应表如下，注意你的Bucket所在区域: Region中文名称Region英文表示外网EndpointECS访问的内网Endpoint华东 1oss-cn-hangzhouoss-cn-hangzhou.aliyuncs.comoss-cn-hangzhou-internal.aliyuncs.com华东 2oss-cn-shanghaioss-cn-shanghai.aliyuncs.comoss-cn-shanghai-internal.aliyuncs.com华北 1oss-cn-qingdaooss-cn-qingdao.aliyuncs.comoss-cn-qingdao-internal.aliyuncs.com华北 2oss-cn-beijingoss-cn-beijing.aliyuncs.comoss-cn-beijing-internal.aliyuncs.com华南 1oss-cn-shenzhenoss-cn-shenzhen.aliyuncs.comoss-cn-shenzhen-internal.aliyuncs.com香港数据中心oss-cn-hongkongoss-cn-hongkong.aliyuncs.comoss-cn-hongkong-internal.aliyuncs.com美国硅谷数据中心oss-us-west-1oss-us-west-1.aliyuncs.comoss-us-west-1-internal.aliyuncs.com美国弗吉尼亚数据中心oss-us-east-1oss-us-east-1.aliyuncs.comoss-us-east-1-internal.aliyuncs.com亚太（新加坡）数据中心oss-ap-southeast-1oss-ap-southeast-1.aliyuncs.comoss-ap-southeast-1-internal.aliyuncs.com亚太东北 1（日本）数据中心oss-ap-northeast-1oss-ap-northeast-1.aliyuncs.comoss-ap-northeast-1-internal.aliyuncs.com ``` # 设置bucket/access key/id的信息，将其存放在/etc/passwd-ossfs 文件中 # 注意这个文件的权限必须正确设置，建议设为640 sudo echo my-bucket:my-access-key-id:my-access-key-secret \u003e /etc/passwd-ossfs sudo chmod 640 /etc/passwd-ossfs ``` ##### 3. Mount \u0026 Uasge 将oss bucket mount到指定目录: ``` # 我碰到安装后找不到ossfs命令，查看下因为ossfs没有x权限，目录路径为/usr/local/bin，如果您也碰到这个问题，可以增加x权限后再测试 sudo ossfs my-bucket /mnt/ossdir -ourl=http://oss-location.aliyuncs.com ","date":"2016-12-20","objectID":"https://samzong.me/howto-mount-oss-bucket-on-ecs/:0:0","series":null,"tags":["Aliyun","CentOS"],"title":"HowTo Mount OSS Bucket On ECS","uri":"https://samzong.me/howto-mount-oss-bucket-on-ecs/#"},{"categories":["云服务","Aliyun"],"content":" From 阿里云官方Github Demo: CentOS 6.8 on ECS ossfs 是通过磁盘挂载的形式，将oss存储挂载到linux、类unix等操作系统，而且不仅仅可以挂载阿里云内的ECS上，理论上所有网络能到达oss的都可以挂载，但还是要以实际问题为准。 0.0.0.1 1.Download \u0026 Install官方版本发布页面，请根据你的系统类型进行选择，我这演示的环境是CentOS 6.8；ossfs目前最新的版本是v1.79.9，您可以根据自己当时版本进行选择，建议选择最新版本。 # 请先将包上传到服务器上 sudo yum localinstall ossfs_1.79.9_centos6.5_x86_64.rpm 注意使用localinstall，因为在安装过程，yum 可以很好的解决依赖关系，会节省我们很多时间 0.0.0.2 2. OSS \u0026 Bucket需要获取以下信息，在后面我们都会用到的： Bucket 名称 Access Key ID Access Key Secret 4. Location，这需要注意点，不要加上Bucket的名字，区域对应表如下，注意你的Bucket所在区域: Region中文名称Region英文表示外网EndpointECS访问的内网Endpoint华东 1oss-cn-hangzhouoss-cn-hangzhou.aliyuncs.comoss-cn-hangzhou-internal.aliyuncs.com华东 2oss-cn-shanghaioss-cn-shanghai.aliyuncs.comoss-cn-shanghai-internal.aliyuncs.com华北 1oss-cn-qingdaooss-cn-qingdao.aliyuncs.comoss-cn-qingdao-internal.aliyuncs.com华北 2oss-cn-beijingoss-cn-beijing.aliyuncs.comoss-cn-beijing-internal.aliyuncs.com华南 1oss-cn-shenzhenoss-cn-shenzhen.aliyuncs.comoss-cn-shenzhen-internal.aliyuncs.com香港数据中心oss-cn-hongkongoss-cn-hongkong.aliyuncs.comoss-cn-hongkong-internal.aliyuncs.com美国硅谷数据中心oss-us-west-1oss-us-west-1.aliyuncs.comoss-us-west-1-internal.aliyuncs.com美国弗吉尼亚数据中心oss-us-east-1oss-us-east-1.aliyuncs.comoss-us-east-1-internal.aliyuncs.com亚太（新加坡）数据中心oss-ap-southeast-1oss-ap-southeast-1.aliyuncs.comoss-ap-southeast-1-internal.aliyuncs.com亚太东北 1（日本）数据中心oss-ap-northeast-1oss-ap-northeast-1.aliyuncs.comoss-ap-northeast-1-internal.aliyuncs.com ``` # 设置bucket/access key/id的信息，将其存放在/etc/passwd-ossfs 文件中 # 注意这个文件的权限必须正确设置，建议设为640 sudo echo my-bucket:my-access-key-id:my-access-key-secret \u003e /etc/passwd-ossfs sudo chmod 640 /etc/passwd-ossfs ``` ##### 3. Mount \u0026 Uasge 将oss bucket mount到指定目录: ``` # 我碰到安装后找不到ossfs命令，查看下因为ossfs没有x权限，目录路径为/usr/local/bin，如果您也碰到这个问题，可以增加x权限后再测试 sudo ossfs my-bucket /mnt/ossdir -ourl=http://oss-location.aliyuncs.com ","date":"2016-12-20","objectID":"https://samzong.me/howto-mount-oss-bucket-on-ecs/:0:0","series":null,"tags":["Aliyun","CentOS"],"title":"HowTo Mount OSS Bucket On ECS","uri":"https://samzong.me/howto-mount-oss-bucket-on-ecs/#1download--install"},{"categories":["云服务","Aliyun"],"content":" From 阿里云官方Github Demo: CentOS 6.8 on ECS ossfs 是通过磁盘挂载的形式，将oss存储挂载到linux、类unix等操作系统，而且不仅仅可以挂载阿里云内的ECS上，理论上所有网络能到达oss的都可以挂载，但还是要以实际问题为准。 0.0.0.1 1.Download \u0026 Install官方版本发布页面，请根据你的系统类型进行选择，我这演示的环境是CentOS 6.8；ossfs目前最新的版本是v1.79.9，您可以根据自己当时版本进行选择，建议选择最新版本。 # 请先将包上传到服务器上 sudo yum localinstall ossfs_1.79.9_centos6.5_x86_64.rpm 注意使用localinstall，因为在安装过程，yum 可以很好的解决依赖关系，会节省我们很多时间 0.0.0.2 2. OSS \u0026 Bucket需要获取以下信息，在后面我们都会用到的： Bucket 名称 Access Key ID Access Key Secret 4. Location，这需要注意点，不要加上Bucket的名字，区域对应表如下，注意你的Bucket所在区域: Region中文名称Region英文表示外网EndpointECS访问的内网Endpoint华东 1oss-cn-hangzhouoss-cn-hangzhou.aliyuncs.comoss-cn-hangzhou-internal.aliyuncs.com华东 2oss-cn-shanghaioss-cn-shanghai.aliyuncs.comoss-cn-shanghai-internal.aliyuncs.com华北 1oss-cn-qingdaooss-cn-qingdao.aliyuncs.comoss-cn-qingdao-internal.aliyuncs.com华北 2oss-cn-beijingoss-cn-beijing.aliyuncs.comoss-cn-beijing-internal.aliyuncs.com华南 1oss-cn-shenzhenoss-cn-shenzhen.aliyuncs.comoss-cn-shenzhen-internal.aliyuncs.com香港数据中心oss-cn-hongkongoss-cn-hongkong.aliyuncs.comoss-cn-hongkong-internal.aliyuncs.com美国硅谷数据中心oss-us-west-1oss-us-west-1.aliyuncs.comoss-us-west-1-internal.aliyuncs.com美国弗吉尼亚数据中心oss-us-east-1oss-us-east-1.aliyuncs.comoss-us-east-1-internal.aliyuncs.com亚太（新加坡）数据中心oss-ap-southeast-1oss-ap-southeast-1.aliyuncs.comoss-ap-southeast-1-internal.aliyuncs.com亚太东北 1（日本）数据中心oss-ap-northeast-1oss-ap-northeast-1.aliyuncs.comoss-ap-northeast-1-internal.aliyuncs.com ``` # 设置bucket/access key/id的信息，将其存放在/etc/passwd-ossfs 文件中 # 注意这个文件的权限必须正确设置，建议设为640 sudo echo my-bucket:my-access-key-id:my-access-key-secret \u003e /etc/passwd-ossfs sudo chmod 640 /etc/passwd-ossfs ``` ##### 3. Mount \u0026 Uasge 将oss bucket mount到指定目录: ``` # 我碰到安装后找不到ossfs命令，查看下因为ossfs没有x权限，目录路径为/usr/local/bin，如果您也碰到这个问题，可以增加x权限后再测试 sudo ossfs my-bucket /mnt/ossdir -ourl=http://oss-location.aliyuncs.com ","date":"2016-12-20","objectID":"https://samzong.me/howto-mount-oss-bucket-on-ecs/:0:0","series":null,"tags":["Aliyun","CentOS"],"title":"HowTo Mount OSS Bucket On ECS","uri":"https://samzong.me/howto-mount-oss-bucket-on-ecs/#2-oss--bucket"},{"categories":["云服务","Aliyun"],"content":" 如果使用ossfs的机器是阿里云ECS，可以使用内网域名来避免流量收费和 提高速度：sudo ossfs my-bucket /tmp/ossfs -ourl=http://oss-location-internal.aliyuncs.com 磁盘空间达到上百T： ![](https://samzong.oss-cn-shenzhen.aliyuncs.com/2016/11/0B78E099-5488-4839-AE48-09A074E7415D.png) \u003cbr\u003e umount： ","date":"2016-12-20","objectID":"https://samzong.me/howto-mount-oss-bucket-on-ecs/:0:0","series":null,"tags":["Aliyun","CentOS"],"title":"HowTo Mount OSS Bucket On ECS","uri":"https://samzong.me/howto-mount-oss-bucket-on-ecs/#如果使用ossfs的机器是阿里云ecs可以使用内网域名来避免流量收费和-提高速度"},{"categories":["云服务","Aliyun"],"content":" 注意用户身份umount /tmp/ossfs # root user sudo fusermount -u /tmp/ossfs # non-root user \u003cbr\u003e ##### 4. Debug \u0026 FAQ 当遇到错误的时候，可以试着打开Debug日志信息，然后分析问题原因： ","date":"2016-12-20","objectID":"https://samzong.me/howto-mount-oss-bucket-on-ecs/:0:0","series":null,"tags":["Aliyun","CentOS"],"title":"HowTo Mount OSS Bucket On ECS","uri":"https://samzong.me/howto-mount-oss-bucket-on-ecs/#注意用户身份"},{"categories":["云服务","Aliyun"],"content":" 使用 -o dbglevel=debug -f -d参数打印日志信息sudo ossfs my-bucket /tmp/ossfs -ourl=http://oss-location-internal.aliyuncs.com -o dbglevel=debug -f -d \u003e /mnt/ossfs.log 2\u003e\u00261 更多的问题，请移步查看[官方的FAQ文档](https://github.com/aliyun/ossfs/wiki/FAQ)。 \u003cbr\u003e ##### 5. About ossfs提供的功能和性能和本地文件系统相比，具有一些局限性。具体包括： * 随机或者追加写文件会导致整个文件的重写。 * 元数据操作，例如list directory，性能较差，因为需要远程访问oss服务器。 * 文件/文件夹的rename操作不是原子的。 * 多个客户端挂载同一个oss bucket时，依赖用户自行协调各个客户端的行为。例如避免多个客户端写同一个文件等等。 * 不支持hard link。 * 不适合用在高并发读/写的场景，这样会让系统的load升高 \u003e 另外，ossfs的稳定性很大一部分依赖于网络环境，建议的使用场景更多是作为临时数据迁移或定期备份，虽然ossfs挂载到系统中会有着几百TB的空间，但是稳定性并不高。 ","date":"2016-12-20","objectID":"https://samzong.me/howto-mount-oss-bucket-on-ecs/:0:0","series":null,"tags":["Aliyun","CentOS"],"title":"HowTo Mount OSS Bucket On ECS","uri":"https://samzong.me/howto-mount-oss-bucket-on-ecs/#使用--o-dbgleveldebug--f--d参数打印日志信息"},{"categories":null,"content":"上海天冷了啊！上海天冷了啊啊！！上海天冷了啊啊！！！ 重要的事情说三遍，这是一个好习惯，有了冬天的感觉，早上起床的时候有感觉，下班路上有感觉，现在坐在键盘前打字也很有感觉；前几天在微博上写了几句话:如今算是最好的季节，褪去夏日的燥热与汗渍，又不像冬日那么干冷凛冽，穿的衣服也是刚刚好，单条牛仔裤加个风衣或冲锋衣既藏住身上的赘肉，又不失潇洒，正是装逼好时节，而最最好的是这个季节的女子，美丽更胜其它季节。朋友嘲笑说其实想看黑丝，哈哈！谁知才过几天，就感受到了那种“干冷凛冽”。但是，我喜欢这种感觉，就像我喜欢这座城市，我说我喜欢冬天，自小就喜欢，我说我喜欢这座城市，就像自小就喜欢；我说不出来为什么喜欢，就像很多说不出来为什么喜欢，就像有些人，就像有些事，就像有些讨厌，人终是要顺了自己的心意，不然不会开心，但是要懂事，不懂事就不可爱了。 最近一直比较忙，弄得心烦意乱。 生活上，最近外公有生病，母亲十分挂念，原本外公外婆年岁已高且身体不好，家里几位舅父却又不有作为，也令母亲十分苦恼，本来她身体也有不好，我却不能帮上她一二，内心也是颇为着急挂念，只能尽力安慰。说起外公外婆，也是难过不已，近两年，因些事每年都要回去两三趟，而又匆忙，故无多时间陪陪他们，外婆已多年卧病在床，起居生活全有外公照顾，我一次尝试想搀扶外婆起床，是异常艰难，可外公80多岁老人一扶就是8年多。有时，自己也想，若是自己到了这般年纪，该如何处置，想想也难过不已，想二位老人，到了这个年纪，早已不在乎吃穿用度如何如何，多年孤苦在家，更想要的子女多多陪伴，所以每次母亲打电话回去都哭泣不止；最怕“子欲养而亲不待”的事，我也劝说母亲有空就多多回老家陪陪，而母亲却担心我的婚娶生活，更令我难过不已，暗恨自己无用；昨今两日，父母又相继回老家，也希望外公身体早日恢复。 工作上，自从去年与领导夸下豪言便一直不敢懈怠，但实际做下来的确是要比想象中困难许多，本来自己就不是聪明，这段时间做项目需求，改了许多稿总算通过，开心，感叹领导是好性格，如此耐心指导我；而前段时间，这个项目好几处也是几近失控，和其他公司的人沟通协调处理等一团糟，还好如今都渐回正轨；第一项目还未做完，就打退堂鼓，幸亏领导的指导，同事的帮助，当然还有我的好妹妹，每次感觉扛不住的找她聊聊发发牢骚，都能耐心听并给我加油打气。感谢这些人，当然也感谢自己，总有各种办法给自己恢复元气，今早，用思维导图把最近的烦心事要做的事全部写出来，然后一条一条的分析处理，最后恢复了好心情，又一如既往的工作生活。 又23点过半了，要抓紧早睡了，调整正常作息才能更充沛的工作生活，记录走出了这一段不好的日子，恢复元气的自己，但是不能懈怠，毕竟“革命尚未成功，同志仍需努力”。 ","date":"2016-12-17","objectID":"https://samzong.me/%E4%B8%8A%E6%B5%B7%E5%A4%A9%E5%86%B7%E4%BA%86/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"上海天冷了","uri":"https://samzong.me/%E4%B8%8A%E6%B5%B7%E5%A4%A9%E5%86%B7%E4%BA%86/#"},{"categories":null,"content":"你们一起看过很多风景 走过很多路 因为小事争吵 为了让对方委曲求全过 你们花光了所有力气 竟还是没有逃过分开的命运 于是从此以后 你走那条路都会想起当时的嬉笑怒骂 你经过街角的那间咖啡馆会记得甜得发腻的糖霜 可是人啊 总要学会告别 无论如何 我们的生命中 都逃脱不了 永无休止的告别 ","date":"2016-12-17","objectID":"https://samzong.me/%E5%91%8A%E5%88%AB/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"告别","uri":"https://samzong.me/%E5%91%8A%E5%88%AB/#"},{"categories":null,"content":"历史才是最好的教科书，我们从一段又一段历史中汲取经验和教训，尽量让人生走得不去更加艰难，而这毫无疑问战争是最好的老师，最残酷的史实，人类从千百的历史中依然没能学会和平，战争，让这个世界变得满目疮痍。 今天去看了《血战钢锯岭》，有多久没有感动到流下眼泪，很好，前半段在讲述道斯如何与军队抗争，坚守自己的信仰，信仰是个好东西，但愿你我都有。后半段战争的场面极其的血腥暴力，电影尚是如此，真实又怎样想象，人生从来没有NG，因为真实，才最有力量；我们都喜欢甜美的故事，我也为了道斯的爱情而感动，也因战争的残酷而愤怒。 这是我最喜欢的电影了，最让我感动的话是在军事法庭上道斯说：世界已经分崩离析，我要把它拼成原来的样子。看到这里心都碎了，这个世界上总有些人，哪怕与所有人为敌，所有人不信任，经受磨难羞辱，也坚持自己的信仰，这才是英雄；放下枪的人才是勇敢，他教会我们，我们应该成为怎样的人，不能忘记历史带给我们的伤痛，不能忘记而不是去恨，珍惜美好生活，不要战争。 在这段时期，同样想起的是南京大屠杀，同样是二战时期日军留下的暴行，他们是魔鬼，他们终将会受到应有的惩罚；首先，我们都不能忘记，这是我们的伤痛，真实的历史远比想象的更加残酷，哪些被迫害的人，哪些南京大屠杀纪念馆的人名册，这些人是多么的绝望啊，数以千万计的道斯奋战的美好世界，怎能让战争败类去迫害，我不喜欢战争，任何一个国家。 同样的选择给我，我会选择拿起枪，鲁迅先生说过：学医是救不了中国的，我终于不是道斯，看到咫尺近前的战友被日本人用刺刀刺死，却选择不拿起枪，我做不到；实际上，我也是一个有信仰的人，我的信仰的是我在乎的人，我愿意为了他们奋不顾身直到死亡，因为，他们是我的逆鳞啊！ 小时候，常听老人家说，要忆苦思甜，实际上应该是要铭记战争带给我们的伤痛，要铭记那段时期，勇敢的坚持的信仰，更加重要的是珍惜现在的美好。 ","date":"2016-12-11","objectID":"https://samzong.me/%E8%A1%80%E6%88%98%E9%92%A2%E9%94%AF%E5%B2%AD/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"血战钢锯岭","uri":"https://samzong.me/%E8%A1%80%E6%88%98%E9%92%A2%E9%94%AF%E5%B2%AD/#"},{"categories":["Python"],"content":"接触过Python2.x与Python3.x的应该知道，它们二者的区别也是蛮大的，而随着Python3.x的盛行，越来越多的应用运行与Python3.x的环境之上，但是我们的CentOS的系列，目前都默认安装时Python2.x（CentOS 7.x也是），所以不得不我们需要自己行动手安装Python 3.x的环境。 Mirosoft平台与Mac平台，不在考虑范围，他们都有相应的软件包与图形化安装工具，可以很好的解决这个问题，所以今天我们的环境是在CentOS 6.x系列上进行。 Demo ：CentOS 6.8 0.0.1 Method 1. Build \u0026 Install From Source-File Python3.x 源码文件下载，请选择适合的版本。 下载页面 我这里使用版本 Python 3.5 [cent@demo ~]$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz 安装系统基本工具： # yum-utils [cent@demo ~]$ sudo yum install -y yum-utils # 构建python 编译环境 [cent@demo ~]$ sudo yum-builddep python 开始编译 \u0026 安装 并且源码安装的同时，会将pip3与setuptools一同安装. [cent@demo ~]$ tar xf Python-3.5.0.tgz [cent@demo ~]$ cd Python-3.5.0 [cent@demo ~]$ ./configure [cent@demo ~]$ make [cent@demo ~]$ sudo make install 检查版本 [cent@demo ~]$ python3 -V Python 3.5.0 # 如果希望系统默认为Python3 [cent@demo ~]$ alias python='usr/bin/python3.5' 0.0.2 Method 2. Install From EPEL repos也许有的同学会说，编译安装，那是上古时期的做法了，yum在线安装才是王道，当然这种说法也有可取之处，所以接下来讲下如何使用yum安装，需要注意的是yum安装是需要时间测试和增加到相应的源仓库，一般会稍慢于源码安装的方式，这里采用EPEL源，这是一个非常棒的第三方源仓库，之前的文章中也多次提到，这里就不做过多描述，请看下面的命令： [cent@demo ~]$ sudo yum install -y epel-release [cent@demo ~]$ sudo yum install -y python34 # 因为yum安装时没能同时安装pip与setuptools，所以我们要手动安装，这里采用拿第三方包解决问题 [cent@demo ~]$ curl -O https://bootstrap.pypa.io/get-pip.py [cent@demo ~]$ sudo python3 get-pip.py [cent@demo ~]$ python3 -V Python 3.4.3 ","date":"2016-12-08","objectID":"https://samzong.me/howto-install-python3-on-centos-6-x/:0:0","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python3 on CentOS 6.x","uri":"https://samzong.me/howto-install-python3-on-centos-6-x/#"},{"categories":["Python"],"content":"接触过Python2.x与Python3.x的应该知道，它们二者的区别也是蛮大的，而随着Python3.x的盛行，越来越多的应用运行与Python3.x的环境之上，但是我们的CentOS的系列，目前都默认安装时Python2.x（CentOS 7.x也是），所以不得不我们需要自己行动手安装Python 3.x的环境。 Mirosoft平台与Mac平台，不在考虑范围，他们都有相应的软件包与图形化安装工具，可以很好的解决这个问题，所以今天我们的环境是在CentOS 6.x系列上进行。 Demo ：CentOS 6.8 0.0.1 Method 1. Build \u0026 Install From Source-File Python3.x 源码文件下载，请选择适合的版本。 下载页面 我这里使用版本 Python 3.5 [cent@demo ~]$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz 安装系统基本工具： # yum-utils [cent@demo ~]$ sudo yum install -y yum-utils # 构建python 编译环境 [cent@demo ~]$ sudo yum-builddep python 开始编译 \u0026 安装 并且源码安装的同时，会将pip3与setuptools一同安装. [cent@demo ~]$ tar xf Python-3.5.0.tgz [cent@demo ~]$ cd Python-3.5.0 [cent@demo ~]$ ./configure [cent@demo ~]$ make [cent@demo ~]$ sudo make install 检查版本 [cent@demo ~]$ python3 -V Python 3.5.0 # 如果希望系统默认为Python3 [cent@demo ~]$ alias python='usr/bin/python3.5' 0.0.2 Method 2. Install From EPEL repos也许有的同学会说，编译安装，那是上古时期的做法了，yum在线安装才是王道，当然这种说法也有可取之处，所以接下来讲下如何使用yum安装，需要注意的是yum安装是需要时间测试和增加到相应的源仓库，一般会稍慢于源码安装的方式，这里采用EPEL源，这是一个非常棒的第三方源仓库，之前的文章中也多次提到，这里就不做过多描述，请看下面的命令： [cent@demo ~]$ sudo yum install -y epel-release [cent@demo ~]$ sudo yum install -y python34 # 因为yum安装时没能同时安装pip与setuptools，所以我们要手动安装，这里采用拿第三方包解决问题 [cent@demo ~]$ curl -O https://bootstrap.pypa.io/get-pip.py [cent@demo ~]$ sudo python3 get-pip.py [cent@demo ~]$ python3 -V Python 3.4.3 ","date":"2016-12-08","objectID":"https://samzong.me/howto-install-python3-on-centos-6-x/:0:0","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python3 on CentOS 6.x","uri":"https://samzong.me/howto-install-python3-on-centos-6-x/#method-1-build--install-from-source-file"},{"categories":["Python"],"content":"接触过Python2.x与Python3.x的应该知道，它们二者的区别也是蛮大的，而随着Python3.x的盛行，越来越多的应用运行与Python3.x的环境之上，但是我们的CentOS的系列，目前都默认安装时Python2.x（CentOS 7.x也是），所以不得不我们需要自己行动手安装Python 3.x的环境。 Mirosoft平台与Mac平台，不在考虑范围，他们都有相应的软件包与图形化安装工具，可以很好的解决这个问题，所以今天我们的环境是在CentOS 6.x系列上进行。 Demo ：CentOS 6.8 0.0.1 Method 1. Build \u0026 Install From Source-File Python3.x 源码文件下载，请选择适合的版本。 下载页面 我这里使用版本 Python 3.5 [cent@demo ~]$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz 安装系统基本工具： # yum-utils [cent@demo ~]$ sudo yum install -y yum-utils # 构建python 编译环境 [cent@demo ~]$ sudo yum-builddep python 开始编译 \u0026 安装 并且源码安装的同时，会将pip3与setuptools一同安装. [cent@demo ~]$ tar xf Python-3.5.0.tgz [cent@demo ~]$ cd Python-3.5.0 [cent@demo ~]$ ./configure [cent@demo ~]$ make [cent@demo ~]$ sudo make install 检查版本 [cent@demo ~]$ python3 -V Python 3.5.0 # 如果希望系统默认为Python3 [cent@demo ~]$ alias python='usr/bin/python3.5' 0.0.2 Method 2. Install From EPEL repos也许有的同学会说，编译安装，那是上古时期的做法了，yum在线安装才是王道，当然这种说法也有可取之处，所以接下来讲下如何使用yum安装，需要注意的是yum安装是需要时间测试和增加到相应的源仓库，一般会稍慢于源码安装的方式，这里采用EPEL源，这是一个非常棒的第三方源仓库，之前的文章中也多次提到，这里就不做过多描述，请看下面的命令： [cent@demo ~]$ sudo yum install -y epel-release [cent@demo ~]$ sudo yum install -y python34 # 因为yum安装时没能同时安装pip与setuptools，所以我们要手动安装，这里采用拿第三方包解决问题 [cent@demo ~]$ curl -O https://bootstrap.pypa.io/get-pip.py [cent@demo ~]$ sudo python3 get-pip.py [cent@demo ~]$ python3 -V Python 3.4.3 ","date":"2016-12-08","objectID":"https://samzong.me/howto-install-python3-on-centos-6-x/:0:0","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python3 on CentOS 6.x","uri":"https://samzong.me/howto-install-python3-on-centos-6-x/#method-2-install-from-epel-repos"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 处理的状态首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。 因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的 状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对 外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全 状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。 0.0.2 2. 重置密码 修改mysql配置文件，增加skip-grant-tables [root@demo ~]# vim /etc/my.cnf [mysqld] skip-grant-tables 重启mysqld [root@demo ~]# service mysqld restart Stopping mysqld: [ OK ] Starting mysqld: [ OK ] 登录mysql，并修改root密码. [root@demo ~]# mysql -u root Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 3 Server version: 5.5.53 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e use mysql Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e update user set password=password('new-pass') where user='root'; Query OK, 5 rows affected (0.00 sec) Rows matched: 5 Changed: 5 Warnings: 0 配置文件去除skip-grant-tables，并重启服务器. [root@demo ~]# vim /etc/my.cnf [root@demo ~]# service mysqld restart 使用新密码登录到mysql [root@demo ~]# mysql -h localhost -u root -p ","date":"2016-12-04","objectID":"https://samzong.me/howto-reset-mysql-root-password/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Reset MySQL Root Password","uri":"https://samzong.me/howto-reset-mysql-root-password/#"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 处理的状态首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。 因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的 状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对 外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全 状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。 0.0.2 2. 重置密码 修改mysql配置文件，增加skip-grant-tables [root@demo ~]# vim /etc/my.cnf [mysqld] skip-grant-tables 重启mysqld [root@demo ~]# service mysqld restart Stopping mysqld: [ OK ] Starting mysqld: [ OK ] 登录mysql，并修改root密码. [root@demo ~]# mysql -u root Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 3 Server version: 5.5.53 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e use mysql Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e update user set password=password('new-pass') where user='root'; Query OK, 5 rows affected (0.00 sec) Rows matched: 5 Changed: 5 Warnings: 0 配置文件去除skip-grant-tables，并重启服务器. [root@demo ~]# vim /etc/my.cnf [root@demo ~]# service mysqld restart 使用新密码登录到mysql [root@demo ~]# mysql -h localhost -u root -p ","date":"2016-12-04","objectID":"https://samzong.me/howto-reset-mysql-root-password/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Reset MySQL Root Password","uri":"https://samzong.me/howto-reset-mysql-root-password/#1-处理的状态"},{"categories":["数据库","MySQL"],"content":" 0.0.1 1. 处理的状态首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。 因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的 状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对 外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全 状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。 0.0.2 2. 重置密码 修改mysql配置文件，增加skip-grant-tables [root@demo ~]# vim /etc/my.cnf [mysqld] skip-grant-tables 重启mysqld [root@demo ~]# service mysqld restart Stopping mysqld: [ OK ] Starting mysqld: [ OK ] 登录mysql，并修改root密码. [root@demo ~]# mysql -u root Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 3 Server version: 5.5.53 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e use mysql Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e update user set password=password('new-pass') where user='root'; Query OK, 5 rows affected (0.00 sec) Rows matched: 5 Changed: 5 Warnings: 0 配置文件去除skip-grant-tables，并重启服务器. [root@demo ~]# vim /etc/my.cnf [root@demo ~]# service mysqld restart 使用新密码登录到mysql [root@demo ~]# mysql -h localhost -u root -p ","date":"2016-12-04","objectID":"https://samzong.me/howto-reset-mysql-root-password/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Reset MySQL Root Password","uri":"https://samzong.me/howto-reset-mysql-root-password/#2-重置密码"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for \u003ctomcat\u003e (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用：\u003c!-- XXXX --\u003e ）,如何也想保留http访问，可以不注释 \u003c!-- \u003cConnector executor=\"tomcatThreadPool\" port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /\u003e --\u003e 0.0.3.0.2 b. 取消下面注释 \u003cConnector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" sslProtocol=\"TLS\" /\u003e 0.0.3.0.3 c. 增加keystoreFile和keystorePass \u003cConnector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" sslProtocol=\"TLS\" keystoreFile=\"conf/mykeystore\" keystorePass=\"123456\"/\u003e keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用： ）,如何也想保留http访问，可以不注释 0.0.3.0.2 b. 取消下面注释 0.0.3.0.3 c. 增加keystoreFile和keystorePass keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#1-生成-keystore"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用： ）,如何也想保留http访问，可以不注释 0.0.3.0.2 b. 取消下面注释 0.0.3.0.3 c. 增加keystoreFile和keystorePass keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#2-备份tomcatdirconfserverxml"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用： ）,如何也想保留http访问，可以不注释 0.0.3.0.2 b. 取消下面注释 0.0.3.0.3 c. 增加keystoreFile和keystorePass keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#3-修改serverxml"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用： ）,如何也想保留http访问，可以不注释 0.0.3.0.2 b. 取消下面注释 0.0.3.0.3 c. 增加keystoreFile和keystorePass keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#a-注释以下tomcat注释用---xxxx----如何也想保留http访问可以不注释"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用： ）,如何也想保留http访问，可以不注释 0.0.3.0.2 b. 取消下面注释 0.0.3.0.3 c. 增加keystoreFile和keystorePass keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#b-取消下面注释"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用： ）,如何也想保留http访问，可以不注释 0.0.3.0.2 b. 取消下面注释 0.0.3.0.3 c. 增加keystoreFile和keystorePass keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#c-增加keystorefile和keystorepass"},{"categories":["Tomcat"],"content":"因为一个偶然机会，想把自己的webserver通过https加密访问，这里就采用JDK自带的keytool工具实现，tomcat官方也推荐这种方式，英文好的同学走这里：官方配置 demo: CentOS 6.6 \u0026 Tomcat 7 \u0026 JDK 1.7 0.0.1 1. 生成 keystore [root@test conf]# keytool -genkey -v -alias tomcat -keyalg RSA -keystore mykeystore Enter keystore password: #设置密码 Re-enter new password: #重复一次 What is your first and last name? [Unknown]: Alex Lu #随便填 What is the name of your organizational unit? [Unknown]: visionet #随便填 What is the name of your organization? [Unknown]: visionet #随便填 What is the name of your City or Locality? [Unknown]: SH #随便填 What is the name of your State or Province? [Unknown]: SH #随便填 What is the two-letter country code for this unit? [Unknown]: ZH #随便填 Is CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH correct? [no]: Y #这里要Y，确认前面信息。 Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 90 days for: CN=Alex Lu, OU=visionet, O=visionet, L=SH, ST=SH, C=ZH Enter key password for (RETURN if same as keystore password): #默认回车即可，不需要设置太多密码 [Storing mykeystore] [root@test conf]# ls Catalina catalina.policy catalina.properties context.xml logging.properties mykeystore server.xml tomcat-users.xml web.xml 注意：-keystore是用来指定keystore保存位置，如果不加参数默认保存的当前用户家目录为~/.keystore -validity 可以用来指定证书有效期，单位为天，缺省值为90天。 0.0.2 2. 备份$tomcatdir/conf/server.xml cp $tomcatdir/conf/server.xml $tomcatdir/conf/server.xml 0.0.3 3. 修改server.xml 0.0.3.0.1 a. 注释以下：（tomcat注释用： ）,如何也想保留http访问，可以不注释 0.0.3.0.2 b. 取消下面注释 0.0.3.0.3 c. 增加keystoreFile和keystorePass keystoreFile=跟keystore文件位置 keystorePass=跟当时keytool命令执行时输入的密码 0.0.4 4. 重启tomcat [root@test conf]# ../bin/catalina.sh stop \u0026\u0026 ../bin/catalina.sh start Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar Using CATALINA_BASE: /home/pms/apache-tomcat-6.0.44 Using CATALINA_HOME: /home/pms/apache-tomcat-6.0.44 Using CATALINA_TMPDIR: /home/pms/apache-tomcat-6.0.44/temp Using JRE_HOME: /home/pms/jdk1.7.0_65 Using CLASSPATH: /home/pms/apache-tomcat-6.0.44/bin/bootstrap.jar [root@test conf]# netstat -ntlup | grep -e \"80\\|443\" tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 21960/java tcp 0 0 127.0.0.1:8005 0.0.0.0:* LISTEN 21960/java tcp 0 0 0.0.0.0:8009 0.0.0.0:* LISTEN 21960/java [root@test conf]# OK ! ","date":"2016-12-03","objectID":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 利用JDK自身keytool实现HTTPS","uri":"https://samzong.me/tomcat-2-%E5%88%A9%E7%94%A8jdk%E8%87%AA%E8%BA%ABkeytool%E5%AE%9E%E7%8E%B0https/#4-重启tomcat"},{"categories":["云服务","AWS"],"content":"S3 是AWS公有云服务提供的云存储服务，提供海量数据存储服务，同时基于AWS S3提供的一系列网络服务接口，也有大量已经开发完成的工具供我们使用，以利用起AWS庞大的存储资源，这篇文章的目录选取了其中一个用Linux命令行工具s3cmd来管理AWS S3云存储其中的数据。 s3cmd 是非常优秀的S3命令行管理工具，用python编写，支持python 2.6 \u0026 2.7 ，但是尚不支持python3，但是目前绝大多数的Linux发行版默认都是python2.x 系列。 Demo CentOS 6.x ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:0:0","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#"},{"categories":["云服务","AWS"],"content":" 1. Install s3cmd","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:1:0","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#install-s3cmd"},{"categories":["云服务","AWS"],"content":" 1.1 1. 无论是Denbian系还是Rehat系列，软件仓库内已经加入了s3cmd： # 1.1 Ubuntu \u0026 Debian $ sudo apt-get install -y s3cmd # 1.2 RHEL \u0026 CentOS $ sudo yum install s3cmd ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:1:1","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#1-无论是denbian系还是rehat系列软件仓库内已经加入了s3cmd"},{"categories":["云服务","AWS"],"content":" 1.2 2. 如果您的系统比较特殊，软件仓库内找不到s3cmd，还有s3cmd的Github上去获取相关安装信息：链接","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:1:2","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#2-如果您的系统比较特殊软件仓库内找不到s3cmd还有s3cmd的github上去获取相关安装信息链接httpsgithubcoms3toolss3cmd"},{"categories":["云服务","AWS"],"content":" 2. Configure s3cmd","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:2:0","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#configure-s3cmd"},{"categories":["云服务","AWS"],"content":" 2.1 1. 第一次运行s3cmd 需要首先预配置相关s3信息: $ s3cmd --configure 它会问你一系列问题： AWS S3 中IAM账户的Access Key以及Secret Key (建议单独创建IAM) 对AWS S3双向传输的加密密码 （自行设定不要忘记） 为加密数据设定GPG程序的路径（默认即可） 是否使用https协议 （默认即可） 如果不是https协议，需要设定名字和端口 配置完成之后，配置信息以普通文本保存在~/.s3cfg ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:2:1","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#1-第一次运行s3cmd-需要首先预配置相关s3信息"},{"categories":["云服务","AWS"],"content":" 2.2 2. China 与Global 的区别笔者在第一次运行时，始终无法添加成功，报错信息如下： ERROR: Test failed: 403 (InvalidAccessKeyId): The AWS Accecc Key Id you provided does not exist in our records. 起初以为是Access Key 不对，在经过多次测试之后，才发现问题，这是因为s3cmd 内置s3的Domain为Global的信息，而中国与Global是独立存在的所以查找不到我们的Access Key。所以，如果你使用的Global AWS那么上面一步应该已经配置好了你的s3cmd，如果你是AWS China的用户，那么你要做以下操作。 在Retry configuration? [Y/n]选择“n” Save settings? [y/N] 选择“y” 保存设置之后，编辑配置文件（~/.s3cfg ) 修改其中的如下字段，并将其中%(bucket)s用您实际的某一个存储桶名字代替掉 bucket_location = %(location) host_base = s3.cn-north-1.amazonaws.com.cn host_bucket = %(bucket)s.s3.cn-north-1.amazonaws.com.cn website_endpoint = http://%(bucket)s.s3-website-%(location)s.amazonaws.com.cn/ 例如，你的存储桶的名字为s3chinatest: 地域为北京。 bucket_location = cn-north-1 host_base = s3.cn-north-1.amazonaws.com.cn host_bucket = s3chinatest.s3.cn-north-1.amazonaws.com.cn website_endpoint = http://s3chinatest.s3-website.amazonaws.com.cn/ ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:2:2","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#2-china-与global-的区别"},{"categories":["云服务","AWS"],"content":" 2.3 3. 保存配置文件，然后用命令测试一下，确认s3cmd可以正常工作 $ s3cmd ls 2016-11-18 22:30 s3://s3chinatest 2016-10-29 00:14 s3://bucket2 ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:2:3","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#3-保存配置文件然后用命令测试一下确认s3cmd可以正常工作"},{"categories":["云服务","AWS"],"content":" 3. s3cmd 的基本使用","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:0","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#s3cmd-的基本使用"},{"categories":["云服务","AWS"],"content":" 3.1 1. 查看当前账户下所有现有的桶(bucket)： $ s3cmd ls 2016-11-18 22:30 s3://s3chinatest 2016-10-29 00:14 s3://bucket2 ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:1","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#1-查看当前账户下所有现有的桶bucket"},{"categories":["云服务","AWS"],"content":" 3.2 2. 创建新的bucket $ s3cmd mb s3://s3chinatest2 Bucket ’s3://s3chinatest2/’ created ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:2","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#2-创建新的bucket"},{"categories":["云服务","AWS"],"content":" 3.3 3. 上传文件到bucket $ s3cmd put file1.txt file2.txt file3.txt s3://s3chinatest2 upload: 'file1.txt' -\u003e 's3://s3chinatest2/file1.txt' [1 of 3] 2432 of 2432 100% in 0s 43.27 kB/s done upload: 'file2.txt' -\u003e 's3://s3chinatest2/file2.txt' [2 of 3] 2432 of 2432 100% in 0s 59.83 kB/s done upload: 'file3.txt' -\u003e 's3://s3chinatest2/file3.txt' [3 of 3] 2432 of 2432 100% in 0s 58.93 kB/s done $ s3cmd ls s3://s3chinatest2 2016-11-18 15:11 2432 s3://s3chinatest2/file1.txt 2016-11-18 15:11 2432 s3://s3chinatest2/file2.txt 2016-11-18 15:11 2432 s3://s3chinatest2/file3.txt 上传的文件默认访问权限为私有(private)，只能用户自己可以访问，使用正确的访问和安全密码即可。 如果要上传公开访问权限的文件，需要添加 –acl-public 参数. $ s3cmd put --acl-public file4.txt s3://s3chinatest2 upload: 'file4.txt' -\u003e 's3://s3chinatest2/file1.txt' [1 of 1] 2432 of 2432 100% in 0s 43.27 kB/s done ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:3","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#3-上传文件到bucket"},{"categories":["云服务","AWS"],"content":" 3.4 4. 下载bucket内的文件 $ s3cmd get s3://s3chinatest2/file1.txt download: 's3://s3chinatest2/file1.txt' -\u003e './file1.txt' [1 of 1] 2432 of 2432 100% in 0s 27.65 kB/s done # 支持 \" * \"匹配任意字符 $ s3cmd get s3://s3chinatest2/file*.txt download: 's3://s3chinatest2/file1.txt' -\u003e './file1.txt' [1 of 3] 2432 of 2432 100% in 0s 48.11 kB/s done download: 's3://s3chinatest2/file2.txt' -\u003e './file2.txt' [2 of 3] 2432 of 2432 100% in 0s 84.76 kB/s done download: 's3://s3chinatest2/file3.txt' -\u003e './file3.txt' [3 of 3] 2432 of 2432 100% in 0s 75.28 kB/s done 注意若当前目录有相同文件时，可以使用–skip-existing 参数跳过这些文件。 ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:4","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#4-下载bucket内的文件"},{"categories":["云服务","AWS"],"content":" 3.5 5. 删除bucket内的文件 # del 与 rm 都可以使用. $ s3cmd del s3://s3chinatest2/file1.txt delete: 's3://s3chinatest2/file1.txt' ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:5","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#5-删除bucket内的文件"},{"categories":["云服务","AWS"],"content":" 3.6 6. 获取当前bucket 信息 # bucket的存储位置及访问权限设置 s3cmd info s3://s3chinatest2 s3://s3chinatest2/ (bucket): Location: cn-north-1 Payer: BucketOwner Expiration Rule: none policy: none cors: none ACL: 2fe63da8137b85d9868d240869945287b285a58b5d7e07e21ac813b486dcabea: FULL_CONTROL ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:6","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#6-获取当前bucket-信息"},{"categories":["云服务","AWS"],"content":" 3.7 7. 上传文件到bucket时加密当用s3cmd下载一个加密过的文件时，它会自动检测加密并在下载过程解密，因此下载和访问加密文件时，就像通常所做的一样 $ s3cmd -e put t_result.java s3://s3chinatest2 upload: '/tmp/tmpfile-S9lUXERAEUdnNaz5zHba' -\u003e 's3://s3chinatest2/t_result.java' [1 of 1] 3355 of 3355 100% in 0s 39.25 kB/s done ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:7","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#7-上传文件到bucket时加密"},{"categories":["云服务","AWS"],"content":" 3.8 8. 查看bucket使用情况 $ s3cmd du s3://s3chinatest2 8219 3 objects s3://s3chinatest2/ ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:8","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#8-查看bucket使用情况"},{"categories":["云服务","AWS"],"content":" 3.9 9. 删除一个bucket $ s3cmd rb s3://s3chinatest2 ERROR: S3 error: 409 (BucketNotEmpty): The bucket you tried to delete is not empty # 默认不能删除非空的bucket，所以要先清空存储桶内数据 $ s3cmd rm s3://s3chinatest2/* delete: 's3://s3chinatest2/file2.txt' delete: 's3://s3chinatest2/file3.txt' delete: 's3://s3chinatest2/t_result.java' $ s3cmd rb s3://s3chinatest2 Bucket 's3://s3chinatest2/' removed ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:3:9","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#9-删除一个bucket"},{"categories":["云服务","AWS"],"content":" 4. Other 关于s3cmd 还有非常多的功能，这里只是列举简单的一部分，有兴趣的同学，可以使用man s3cmd 查看详细的帮助文档. s3cmd 适用的场景主要利用脚本做cron任务，例如定时备份，然后推送到s3，降低成本，持久保存. Windows平台也支持s3cmd哦，有兴趣的同学可以去研究下。 ","date":"2016-11-30","objectID":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/:4:0","series":null,"tags":["AWS"],"title":"AWS Use s3cmd命令行管理S3存储","uri":"https://samzong.me/aws-1-use-s3cmd%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%A1%E7%90%86s3%E5%AD%98%E5%82%A8/#other"},{"categories":["Tomcat"],"content":" 0.1 1. 什么是 PermGen space ?PermGen space的全称是Permanent Generation space，是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的，Class在被Loader时就会被放到PermGen space中，它和存放类实例(Instance)的Heap区域不同，GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的应用中有很CLASS的话，就很可能出现PermGen space错误，这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下都用了大量的第三方jar，其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。 ","date":"2016-11-29","objectID":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/:0:1","series":null,"tags":["Tomcat"],"title":"Tomcat java.lang.OutOfMemoryError","uri":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/#1-什么是-permgen-space-"},{"categories":["Tomcat"],"content":" 0.2 2. 解决方法 0.2.0.1 2.1 手动设置MaxPermSize大小 # 修改$TOMCAT_HOME/bin/catalina.sh，在“echo \"Using CATALINA_BASE: $CATALINA_BASE\"”上面加入以下行： JAVA_OPTS=\"-server -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m\" ","date":"2016-11-29","objectID":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/:0:2","series":null,"tags":["Tomcat"],"title":"Tomcat java.lang.OutOfMemoryError","uri":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/#2-解决方法"},{"categories":["Tomcat"],"content":" 0.2 2. 解决方法 0.2.0.1 2.1 手动设置MaxPermSize大小 # 修改$TOMCAT_HOME/bin/catalina.sh，在“echo \"Using CATALINA_BASE: $CATALINA_BASE\"”上面加入以下行： JAVA_OPTS=\"-server -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m\" ","date":"2016-11-29","objectID":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/:0:2","series":null,"tags":["Tomcat"],"title":"Tomcat java.lang.OutOfMemoryError","uri":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/#21-手动设置maxpermsize大小"},{"categories":["Tomcat"],"content":" 0.3 3. Java heap space 0.3.1 解释：Heap size 设置 JVM堆的设置是指java程序运行过程中JVM可以调配使用的内存空间的设置.JVM在启动的时候会自动设置Heap size的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)是物理内存的1/4。可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap size 的大小是Young Generation 和Tenured Generaion 之和。 提示：在JVM中如果98％的时间是用于GC且可用的Heap size 不足2％的时候将抛出此异常信息。 提示：Heap Size 最大不要超过可用物理内存的80％，一般的要将-Xms和-Xmx选项设置为相同，而-Xmn为1/4的-Xmx值。 修改设置方法如PermGen space ","date":"2016-11-29","objectID":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/:0:3","series":null,"tags":["Tomcat"],"title":"Tomcat java.lang.OutOfMemoryError","uri":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/#3-java-heap-space"},{"categories":["Tomcat"],"content":" 0.3 3. Java heap space 0.3.1 解释：Heap size 设置 JVM堆的设置是指java程序运行过程中JVM可以调配使用的内存空间的设置.JVM在启动的时候会自动设置Heap size的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)是物理内存的1/4。可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap size 的大小是Young Generation 和Tenured Generaion 之和。 提示：在JVM中如果98％的时间是用于GC且可用的Heap size 不足2％的时候将抛出此异常信息。 提示：Heap Size 最大不要超过可用物理内存的80％，一般的要将-Xms和-Xmx选项设置为相同，而-Xmn为1/4的-Xmx值。 修改设置方法如PermGen space ","date":"2016-11-29","objectID":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/:0:3","series":null,"tags":["Tomcat"],"title":"Tomcat java.lang.OutOfMemoryError","uri":"https://samzong.me/tomcat-1-java-lang-outofmemoryerror/#解释"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#demo-system"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#install-httpd"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#configure-httpd--replace-the-server-name-to-you-own-one"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#create-a-html-test-page"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#install-php"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#create-a-php-test-page"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#install-mysql"},{"categories":["Linux","CentOS"],"content":" egrep -v “^ *#|^ *$” 去除所有以#号开头的文件 0.0.1 Demo system [Alex@Test01 ~]$ uname -a Linux Test01 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux [Alex@Test01 ~]$ ip addr | grep eth0 2: eth0: mtu 1500 qdisc pfifo_fast state UP qlen 1000 inet 10.0.2.128/24 brd 10.0.2.255 scope global eth0 0.0.2 Install httpd [Alex@Test01 yum.repos.d]$ sudo yum install -y httpd [Alex@Test01 ~]$ rpm -qa | grep httpd httpd-2.2.15-39.el6.centos.x86_64 httpd-tools-2.2.15-39.el6.centos.x86_64 # remove welcome page [Alex@Test01 yum.repos.d]$ sudo rm -f /etc/httpd/conf.d/welcome.conf # remove default error page [Alex@Test01 yum.repos.d]$ sudo rm -f /var/www/error/noindex.html 0.0.3 Configure httpd . Replace the server name to you own one. [Alex@Test01 ~]# sudo vi /etc/httpd/conf/httpd.conf # line 44: change ServerTokens Prod # line 76: change to ON KeepAlive On # line 262: Admin's address ServerAdmin luchuanjia@msn.com # line 338: change AllowOverride All # line 276: change to your server's name ServerName www.ultraera.org:80 # line 402: add file name that it can access only with directory's name DirectoryIndex index.html index.htm # line 536: change ServerSignature Off # line 759: comment out # AddDefaultCharset UTF-8 [Alex@Test01 ~]# sudo /etc/init.d/httpd start Starting httpd:[ OK ] [Alex@Test01 ~]# sudo chkconfig httpd on # set httpd start with system. 0.0.4 create a HTML test page [Alex@Test01 ~]# sudo vi /var/www/html/index.html it's ok. 0.0.5 Install PHP. [Alex@Test01 ~]$ sudo yum install -y php php-mbstring php-pear [Alex@Test01 ~]$ rpm -qa | grep php php-common-5.3.3-46.el6_6.x86_64 php-5.3.3-46.el6_6.x86_64 php-mbstring-5.3.3-46.el6_6.x86_64 php-cli-5.3.3-46.el6_6.x86_64 php-pear-1.9.4-4.el6.noarch [Alex@Test01 ~]$ sudo vi /etc/httpd/conf/httpd.conf # line 402 add file name that it can access only with directory's name DirectoryIndex index.html index.htm index.php [Alex@Test01 ~]$ sudo vi /etc/php.ini # line 946 set your timezone date.timezone = \"Asia/Shanghai\" [Alex@Test01 ~]$ sudo /etc/init.d/httpd restart Stopping httpd:[ OK ] Starting httpd:[ OK ] 0.0.6 create a php test page. [Alex@Test01 ~]# sudo vi /var/www/html/index.php \u003c?php phpinfo(); ?\u003e 0.0.7 Install MySQL [Alex@Test01 ~]$ sudo -y install mysql-server [Alex@Test01 ~]$ rpm -qa | grep mysql-server mysql-server-5.1.73-5.el6_6.x86_64 [Alex@Test01 ~]$ sudo vi /etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock user=mysql # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # add character-set-server=utf8 [Alex@Test01 ~]$ sudo /etc/rc.d/init.d/mysqld start Initializing MySQL database: WARNING: The host 'www.ultraera.org' could not be looked up with resolveip. This probably means that your libc libraries are not 100 % compatible with this binary MySQL version. The MySQL daemon, mysqld, should work normally with the exception that host name resolving will not work. This means that you should use IP addresses instead of hostnames when specifying MySQL privileges ! Installing MySQL system tables... OK Filling help tables... OK ... ... ... You can test the MySQL daemon with mysql-test-run.pl cd /usr/mysql-test ; perl mysql-test-run.pl Please report any problems with the /usr/bin/mysqlbug script! [ OK ] Starting mysqld: [ OK ] [Alex@Test01 ~]$ sudo chkconfig mysqld on 0.0.8 Initial settings for MySQL [root@www ~]#mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. # Enter Enter current password for root (enter for none): OK, successfully used password, moving on... Setting the root password ensures that nobody can log into the MySQL","date":"2016-11-28","objectID":"https://samzong.me/howto-install-lnmp-on-centos-6-x/:0:0","series":null,"tags":["LNMP"],"title":"HowTo Install LNMP on CentOS 6.x","uri":"https://samzong.me/howto-install-lnmp-on-centos-6-x/#initial-settings-for-mysql"},{"categories":null,"content":"知乎 @匿名用户 旧手机的充电器 暗恋时的独角戏 情人节后的鲜花 单身狗的第二杯半价 政客上任的许诺 渴望理解的诉说 花前月下的誓言 回忆里微笑的脸 过期的悔恨 懦弱的容忍 寒假前的作息表 满街的宣传口号 天赋不足的认真 无疾而终的情深 所谓寂寞空虚冷 不可说与人知的疼 失败后的借口 酒桌上的朋友 年轻时为你写的诗 心血来潮时的雄心壮志 收藏夹里的心灵鸡汤 总结汇报的官样文章 额度不够的信用卡 ","date":"2016-11-27","objectID":"https://samzong.me/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E6%B2%A1%E7%94%A8%E7%9A%84%E4%B8%9C%E8%A5%BF/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"世界上最没用的东西","uri":"https://samzong.me/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E6%B2%A1%E7%94%A8%E7%9A%84%E4%B8%9C%E8%A5%BF/#"},{"categories":["Linux","CentOS"],"content":" 0.0.0.1 查看当前服务器失败登录的统计： cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | sort -n | awk '{print $2\" = \"$1}' 0.0.0.2 Install denyhosts # 需要预先安装epel源 sudo yum install -y epel-release sudo yum install -y denyhosts 0.0.0.3 配置文件解析默认配置文件/etc/denyhosts。 # 查看的sshd日志文件 SECURE_LOG = /var/log/secure # 将阻止IP写入的配置文件 HOSTS_DENY = /etc/hosts.deny # 过多久之后清除，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟。 PURGE_DENY = 4h # 阻止的服务名称 BLOCK_SERVICE = sshd # 允许无效用户（在/etc/passwd未列出）登录失败次数,允许无效用户登录失败的次数. DENY_THRESHOLD_INVALID = 1 # 允许普通用户登录失败的次数 DENY_THRESHOLD_VALID = 5 # 允许root登录失败的次数 DENY_THRESHOLD_ROOT = 2 DENY_THRESHOLD_RESTRICTED = 1 # 设定 deny host 写入到该资料夹 WORK_DIR = /var/lib/denyhosts # 将deny的host或ip纪录到Work_dir中 SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES # 是否做域名反解 HOSTNAME_LOOKUP=YES # 将DenyHOts启动的pid纪录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务。 LOCK_FILE = /var/lock/subsys/denyhosts # 设置管理员邮件地址 ADMIN_EMAIL = luchuanjia@msn.com SMTP_HOST = localhost SMTP_PORT = 25 SMTP_FROM = DenyHosts \u003cnobody@localhost\u003e SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME] # 有效用户登录失败计数归零的时间 AGE_RESET_VALID=1d # root用户登录失败计数归零的时间 AGE_RESET_ROOT=25d # 用户的失败登录计数重置为0的时间(/usr/share/denyhosts/data/restricted-usernames) AGE_RESET_RESTRICTED=25d # 无效用户登录失败计数归零的时间 AGE_RESET_INVALID=10d # denyhosts的日志文件位置 DAEMON_LOG = /var/log/denyhosts # denyhosts的轮询时间 DAEMON_SLEEP = 30s # 该项与PURGE_DENY 设置一样，也是清除hosts.deny中 ssh用户的时间 DAEMON_PURGE = 1h 0.0.0.4 FAQ 如果想删除一个已经禁止的主机IP，并加入到允许主机例表，只在 /etc/hosts.deny 删除是没用的,还需要以下： /var/lib/denyhosts 目录，进入以下操作： # 停止denyhosts服务 sudo service denyhosts stop # 进入denyhosts的目录 cd /var/lib/denyhosts # 查看哪些文件添加了ssh限制,将IP_addr替换成你的IP sudo grep IP_addr /usr/share/denyhosts/data/* # 然后一个个删除文件中你想取消的主机IP所在的行: /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts # 添加你想允许的主机IP地址到allowed-hosts: sudo echo IP_addr \u003e\u003e/usr/share/denyhosts/data/allowed-hostsps # 启动 DenyHosts服务： service denyhosts start 0.0.0.5 Tips 尽量是用key验证登录服务器 尽量从固定IP点登录服务器，然后将该地址加入白名单 ","date":"2016-11-23","objectID":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/:0:0","series":null,"tags":["DenyHosts","Tools"],"title":"Denyhosts增加服务器SSH黑名单机制","uri":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/#"},{"categories":["Linux","CentOS"],"content":" 0.0.0.1 查看当前服务器失败登录的统计： cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | sort -n | awk '{print $2\" = \"$1}' 0.0.0.2 Install denyhosts # 需要预先安装epel源 sudo yum install -y epel-release sudo yum install -y denyhosts 0.0.0.3 配置文件解析默认配置文件/etc/denyhosts。 # 查看的sshd日志文件 SECURE_LOG = /var/log/secure # 将阻止IP写入的配置文件 HOSTS_DENY = /etc/hosts.deny # 过多久之后清除，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟。 PURGE_DENY = 4h # 阻止的服务名称 BLOCK_SERVICE = sshd # 允许无效用户（在/etc/passwd未列出）登录失败次数,允许无效用户登录失败的次数. DENY_THRESHOLD_INVALID = 1 # 允许普通用户登录失败的次数 DENY_THRESHOLD_VALID = 5 # 允许root登录失败的次数 DENY_THRESHOLD_ROOT = 2 DENY_THRESHOLD_RESTRICTED = 1 # 设定 deny host 写入到该资料夹 WORK_DIR = /var/lib/denyhosts # 将deny的host或ip纪录到Work_dir中 SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES # 是否做域名反解 HOSTNAME_LOOKUP=YES # 将DenyHOts启动的pid纪录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务。 LOCK_FILE = /var/lock/subsys/denyhosts # 设置管理员邮件地址 ADMIN_EMAIL = luchuanjia@msn.com SMTP_HOST = localhost SMTP_PORT = 25 SMTP_FROM = DenyHosts SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME] # 有效用户登录失败计数归零的时间 AGE_RESET_VALID=1d # root用户登录失败计数归零的时间 AGE_RESET_ROOT=25d # 用户的失败登录计数重置为0的时间(/usr/share/denyhosts/data/restricted-usernames) AGE_RESET_RESTRICTED=25d # 无效用户登录失败计数归零的时间 AGE_RESET_INVALID=10d # denyhosts的日志文件位置 DAEMON_LOG = /var/log/denyhosts # denyhosts的轮询时间 DAEMON_SLEEP = 30s # 该项与PURGE_DENY 设置一样，也是清除hosts.deny中 ssh用户的时间 DAEMON_PURGE = 1h 0.0.0.4 FAQ 如果想删除一个已经禁止的主机IP，并加入到允许主机例表，只在 /etc/hosts.deny 删除是没用的,还需要以下： /var/lib/denyhosts 目录，进入以下操作： # 停止denyhosts服务 sudo service denyhosts stop # 进入denyhosts的目录 cd /var/lib/denyhosts # 查看哪些文件添加了ssh限制,将IP_addr替换成你的IP sudo grep IP_addr /usr/share/denyhosts/data/* # 然后一个个删除文件中你想取消的主机IP所在的行: /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts # 添加你想允许的主机IP地址到allowed-hosts: sudo echo IP_addr \u003e\u003e/usr/share/denyhosts/data/allowed-hostsps # 启动 DenyHosts服务： service denyhosts start 0.0.0.5 Tips 尽量是用key验证登录服务器 尽量从固定IP点登录服务器，然后将该地址加入白名单 ","date":"2016-11-23","objectID":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/:0:0","series":null,"tags":["DenyHosts","Tools"],"title":"Denyhosts增加服务器SSH黑名单机制","uri":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/#查看当前服务器失败登录的统计"},{"categories":["Linux","CentOS"],"content":" 0.0.0.1 查看当前服务器失败登录的统计： cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | sort -n | awk '{print $2\" = \"$1}' 0.0.0.2 Install denyhosts # 需要预先安装epel源 sudo yum install -y epel-release sudo yum install -y denyhosts 0.0.0.3 配置文件解析默认配置文件/etc/denyhosts。 # 查看的sshd日志文件 SECURE_LOG = /var/log/secure # 将阻止IP写入的配置文件 HOSTS_DENY = /etc/hosts.deny # 过多久之后清除，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟。 PURGE_DENY = 4h # 阻止的服务名称 BLOCK_SERVICE = sshd # 允许无效用户（在/etc/passwd未列出）登录失败次数,允许无效用户登录失败的次数. DENY_THRESHOLD_INVALID = 1 # 允许普通用户登录失败的次数 DENY_THRESHOLD_VALID = 5 # 允许root登录失败的次数 DENY_THRESHOLD_ROOT = 2 DENY_THRESHOLD_RESTRICTED = 1 # 设定 deny host 写入到该资料夹 WORK_DIR = /var/lib/denyhosts # 将deny的host或ip纪录到Work_dir中 SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES # 是否做域名反解 HOSTNAME_LOOKUP=YES # 将DenyHOts启动的pid纪录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务。 LOCK_FILE = /var/lock/subsys/denyhosts # 设置管理员邮件地址 ADMIN_EMAIL = luchuanjia@msn.com SMTP_HOST = localhost SMTP_PORT = 25 SMTP_FROM = DenyHosts SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME] # 有效用户登录失败计数归零的时间 AGE_RESET_VALID=1d # root用户登录失败计数归零的时间 AGE_RESET_ROOT=25d # 用户的失败登录计数重置为0的时间(/usr/share/denyhosts/data/restricted-usernames) AGE_RESET_RESTRICTED=25d # 无效用户登录失败计数归零的时间 AGE_RESET_INVALID=10d # denyhosts的日志文件位置 DAEMON_LOG = /var/log/denyhosts # denyhosts的轮询时间 DAEMON_SLEEP = 30s # 该项与PURGE_DENY 设置一样，也是清除hosts.deny中 ssh用户的时间 DAEMON_PURGE = 1h 0.0.0.4 FAQ 如果想删除一个已经禁止的主机IP，并加入到允许主机例表，只在 /etc/hosts.deny 删除是没用的,还需要以下： /var/lib/denyhosts 目录，进入以下操作： # 停止denyhosts服务 sudo service denyhosts stop # 进入denyhosts的目录 cd /var/lib/denyhosts # 查看哪些文件添加了ssh限制,将IP_addr替换成你的IP sudo grep IP_addr /usr/share/denyhosts/data/* # 然后一个个删除文件中你想取消的主机IP所在的行: /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts # 添加你想允许的主机IP地址到allowed-hosts: sudo echo IP_addr \u003e\u003e/usr/share/denyhosts/data/allowed-hostsps # 启动 DenyHosts服务： service denyhosts start 0.0.0.5 Tips 尽量是用key验证登录服务器 尽量从固定IP点登录服务器，然后将该地址加入白名单 ","date":"2016-11-23","objectID":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/:0:0","series":null,"tags":["DenyHosts","Tools"],"title":"Denyhosts增加服务器SSH黑名单机制","uri":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/#install-denyhosts"},{"categories":["Linux","CentOS"],"content":" 0.0.0.1 查看当前服务器失败登录的统计： cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | sort -n | awk '{print $2\" = \"$1}' 0.0.0.2 Install denyhosts # 需要预先安装epel源 sudo yum install -y epel-release sudo yum install -y denyhosts 0.0.0.3 配置文件解析默认配置文件/etc/denyhosts。 # 查看的sshd日志文件 SECURE_LOG = /var/log/secure # 将阻止IP写入的配置文件 HOSTS_DENY = /etc/hosts.deny # 过多久之后清除，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟。 PURGE_DENY = 4h # 阻止的服务名称 BLOCK_SERVICE = sshd # 允许无效用户（在/etc/passwd未列出）登录失败次数,允许无效用户登录失败的次数. DENY_THRESHOLD_INVALID = 1 # 允许普通用户登录失败的次数 DENY_THRESHOLD_VALID = 5 # 允许root登录失败的次数 DENY_THRESHOLD_ROOT = 2 DENY_THRESHOLD_RESTRICTED = 1 # 设定 deny host 写入到该资料夹 WORK_DIR = /var/lib/denyhosts # 将deny的host或ip纪录到Work_dir中 SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES # 是否做域名反解 HOSTNAME_LOOKUP=YES # 将DenyHOts启动的pid纪录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务。 LOCK_FILE = /var/lock/subsys/denyhosts # 设置管理员邮件地址 ADMIN_EMAIL = luchuanjia@msn.com SMTP_HOST = localhost SMTP_PORT = 25 SMTP_FROM = DenyHosts SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME] # 有效用户登录失败计数归零的时间 AGE_RESET_VALID=1d # root用户登录失败计数归零的时间 AGE_RESET_ROOT=25d # 用户的失败登录计数重置为0的时间(/usr/share/denyhosts/data/restricted-usernames) AGE_RESET_RESTRICTED=25d # 无效用户登录失败计数归零的时间 AGE_RESET_INVALID=10d # denyhosts的日志文件位置 DAEMON_LOG = /var/log/denyhosts # denyhosts的轮询时间 DAEMON_SLEEP = 30s # 该项与PURGE_DENY 设置一样，也是清除hosts.deny中 ssh用户的时间 DAEMON_PURGE = 1h 0.0.0.4 FAQ 如果想删除一个已经禁止的主机IP，并加入到允许主机例表，只在 /etc/hosts.deny 删除是没用的,还需要以下： /var/lib/denyhosts 目录，进入以下操作： # 停止denyhosts服务 sudo service denyhosts stop # 进入denyhosts的目录 cd /var/lib/denyhosts # 查看哪些文件添加了ssh限制,将IP_addr替换成你的IP sudo grep IP_addr /usr/share/denyhosts/data/* # 然后一个个删除文件中你想取消的主机IP所在的行: /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts # 添加你想允许的主机IP地址到allowed-hosts: sudo echo IP_addr \u003e\u003e/usr/share/denyhosts/data/allowed-hostsps # 启动 DenyHosts服务： service denyhosts start 0.0.0.5 Tips 尽量是用key验证登录服务器 尽量从固定IP点登录服务器，然后将该地址加入白名单 ","date":"2016-11-23","objectID":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/:0:0","series":null,"tags":["DenyHosts","Tools"],"title":"Denyhosts增加服务器SSH黑名单机制","uri":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/#配置文件解析"},{"categories":["Linux","CentOS"],"content":" 0.0.0.1 查看当前服务器失败登录的统计： cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | sort -n | awk '{print $2\" = \"$1}' 0.0.0.2 Install denyhosts # 需要预先安装epel源 sudo yum install -y epel-release sudo yum install -y denyhosts 0.0.0.3 配置文件解析默认配置文件/etc/denyhosts。 # 查看的sshd日志文件 SECURE_LOG = /var/log/secure # 将阻止IP写入的配置文件 HOSTS_DENY = /etc/hosts.deny # 过多久之后清除，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟。 PURGE_DENY = 4h # 阻止的服务名称 BLOCK_SERVICE = sshd # 允许无效用户（在/etc/passwd未列出）登录失败次数,允许无效用户登录失败的次数. DENY_THRESHOLD_INVALID = 1 # 允许普通用户登录失败的次数 DENY_THRESHOLD_VALID = 5 # 允许root登录失败的次数 DENY_THRESHOLD_ROOT = 2 DENY_THRESHOLD_RESTRICTED = 1 # 设定 deny host 写入到该资料夹 WORK_DIR = /var/lib/denyhosts # 将deny的host或ip纪录到Work_dir中 SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES # 是否做域名反解 HOSTNAME_LOOKUP=YES # 将DenyHOts启动的pid纪录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务。 LOCK_FILE = /var/lock/subsys/denyhosts # 设置管理员邮件地址 ADMIN_EMAIL = luchuanjia@msn.com SMTP_HOST = localhost SMTP_PORT = 25 SMTP_FROM = DenyHosts SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME] # 有效用户登录失败计数归零的时间 AGE_RESET_VALID=1d # root用户登录失败计数归零的时间 AGE_RESET_ROOT=25d # 用户的失败登录计数重置为0的时间(/usr/share/denyhosts/data/restricted-usernames) AGE_RESET_RESTRICTED=25d # 无效用户登录失败计数归零的时间 AGE_RESET_INVALID=10d # denyhosts的日志文件位置 DAEMON_LOG = /var/log/denyhosts # denyhosts的轮询时间 DAEMON_SLEEP = 30s # 该项与PURGE_DENY 设置一样，也是清除hosts.deny中 ssh用户的时间 DAEMON_PURGE = 1h 0.0.0.4 FAQ 如果想删除一个已经禁止的主机IP，并加入到允许主机例表，只在 /etc/hosts.deny 删除是没用的,还需要以下： /var/lib/denyhosts 目录，进入以下操作： # 停止denyhosts服务 sudo service denyhosts stop # 进入denyhosts的目录 cd /var/lib/denyhosts # 查看哪些文件添加了ssh限制,将IP_addr替换成你的IP sudo grep IP_addr /usr/share/denyhosts/data/* # 然后一个个删除文件中你想取消的主机IP所在的行: /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts # 添加你想允许的主机IP地址到allowed-hosts: sudo echo IP_addr \u003e\u003e/usr/share/denyhosts/data/allowed-hostsps # 启动 DenyHosts服务： service denyhosts start 0.0.0.5 Tips 尽量是用key验证登录服务器 尽量从固定IP点登录服务器，然后将该地址加入白名单 ","date":"2016-11-23","objectID":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/:0:0","series":null,"tags":["DenyHosts","Tools"],"title":"Denyhosts增加服务器SSH黑名单机制","uri":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/#faq"},{"categories":["Linux","CentOS"],"content":" 0.0.0.1 查看当前服务器失败登录的统计： cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | sort -n | awk '{print $2\" = \"$1}' 0.0.0.2 Install denyhosts # 需要预先安装epel源 sudo yum install -y epel-release sudo yum install -y denyhosts 0.0.0.3 配置文件解析默认配置文件/etc/denyhosts。 # 查看的sshd日志文件 SECURE_LOG = /var/log/secure # 将阻止IP写入的配置文件 HOSTS_DENY = /etc/hosts.deny # 过多久之后清除，其中w代表周，d代表天，h代表小时，s代表秒，m代表分钟。 PURGE_DENY = 4h # 阻止的服务名称 BLOCK_SERVICE = sshd # 允许无效用户（在/etc/passwd未列出）登录失败次数,允许无效用户登录失败的次数. DENY_THRESHOLD_INVALID = 1 # 允许普通用户登录失败的次数 DENY_THRESHOLD_VALID = 5 # 允许root登录失败的次数 DENY_THRESHOLD_ROOT = 2 DENY_THRESHOLD_RESTRICTED = 1 # 设定 deny host 写入到该资料夹 WORK_DIR = /var/lib/denyhosts # 将deny的host或ip纪录到Work_dir中 SUSPICIOUS_LOGIN_REPORT_ALLOWED_HOSTS=YES # 是否做域名反解 HOSTNAME_LOOKUP=YES # 将DenyHOts启动的pid纪录到LOCK_FILE中，已确保服务正确启动，防止同时启动多个服务。 LOCK_FILE = /var/lock/subsys/denyhosts # 设置管理员邮件地址 ADMIN_EMAIL = luchuanjia@msn.com SMTP_HOST = localhost SMTP_PORT = 25 SMTP_FROM = DenyHosts SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME] # 有效用户登录失败计数归零的时间 AGE_RESET_VALID=1d # root用户登录失败计数归零的时间 AGE_RESET_ROOT=25d # 用户的失败登录计数重置为0的时间(/usr/share/denyhosts/data/restricted-usernames) AGE_RESET_RESTRICTED=25d # 无效用户登录失败计数归零的时间 AGE_RESET_INVALID=10d # denyhosts的日志文件位置 DAEMON_LOG = /var/log/denyhosts # denyhosts的轮询时间 DAEMON_SLEEP = 30s # 该项与PURGE_DENY 设置一样，也是清除hosts.deny中 ssh用户的时间 DAEMON_PURGE = 1h 0.0.0.4 FAQ 如果想删除一个已经禁止的主机IP，并加入到允许主机例表，只在 /etc/hosts.deny 删除是没用的,还需要以下： /var/lib/denyhosts 目录，进入以下操作： # 停止denyhosts服务 sudo service denyhosts stop # 进入denyhosts的目录 cd /var/lib/denyhosts # 查看哪些文件添加了ssh限制,将IP_addr替换成你的IP sudo grep IP_addr /usr/share/denyhosts/data/* # 然后一个个删除文件中你想取消的主机IP所在的行: /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts # 添加你想允许的主机IP地址到allowed-hosts: sudo echo IP_addr \u003e\u003e/usr/share/denyhosts/data/allowed-hostsps # 启动 DenyHosts服务： service denyhosts start 0.0.0.5 Tips 尽量是用key验证登录服务器 尽量从固定IP点登录服务器，然后将该地址加入白名单 ","date":"2016-11-23","objectID":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/:0:0","series":null,"tags":["DenyHosts","Tools"],"title":"Denyhosts增加服务器SSH黑名单机制","uri":"https://samzong.me/denyhosts%E5%A2%9E%E5%8A%A0%E6%9C%8D%E5%8A%A1%E5%99%A8ssh%E9%BB%91%E5%90%8D%E5%8D%95%E6%9C%BA%E5%88%B6/#tips"},{"categories":["Blog","Ghost"],"content":"Ghost作为一个更加纯粹的博客平台，并没有打算为其开发内置的文章评论功能。而是将评论功能托管给第三方，好处也是让用户更有精力集中于网站内容的建设。实现的办法也很简单，只需要向Ghost主题的模板Handlebars(.hbs)插入第三方评论组件的JavaScript代码来为Ghost博客增加评论功能。 国内最常用的多说评论框，支持国内常见的社交网络一键注册登录、盖楼讨论和分享而且对新用户上手简单。而Disqus功能强大、完善的社交网络和多国语言支持并且为其插件启用全球CDN加速。总的来说两个插件各有所长。 基于默认主题Casper的安装指南： 创建一个模板 安装多说评论系统 安装Disqus 创建一个模板 为了在需要评论框代码的时候方便引用，我选择事先在主题文件夹content\\themes\\casper\\partials下面创建一个叫做comments.hbs的模板文件，也就是评论框的专属模板。 现在我只需要在我的Casper主题下面的post.hbs模板中的 \u003c/section\u003e \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; \u003c/main\u003e 前面部分添加一句{{\u003e comments}}就可以展示评论框了。 添加后就像这样： \u003c/section\u003e {{\u003e comments}} \u003c/footer\u003e \u003c/article\u003e \u003c/main\u003e 这样以来的好处就可以在任何主题中轻松移植评论框代码。 开始之前：对评论框Html代码进行简要说明。 \u003csection class=\"post-comments\"\u003e...\u003c/section\u003e用于展示评论框 \u003cscript type=\"text/javascript\"\u003e...\u003c/script\u003e评论框公共代码 {{slug}} 引用文章短名作为第三方社交平台识别文章的特征标志 {{title}} 引用文章标题 {{url absolute=\"true\"}} 获取永久链接 安装多说评论框 1.将下面的评论框代码插入comments.hbs文件。 多说评论框： \u003csection class=\"post-comments\"\u003e \u003cdiv class=\"ds-thread\" data-thread-key=\"{{slug}}\" data-title=\"{{title}}\" data-url=\"{{url absolute=\"true\"}}\"\u003e\u003c/div\u003e \u003c!-- 务必插入多说公共JS代码 --\u003e \u003c/section\u003e 2.如何获取多说公共JS代码？ 登录多说 \u003e 点击“我要安装”\u003e 创建站点 \u003e 获取公共代码（如图） 安装Disqus评论框 1.将下面的评论框代码插入comments.hbs文件。 Disqus评论框评论框： \u003csection class=\"post-comments\"\u003e\u003cdiv id=\"disqus_thread\"\u003e\u003c/div\u003e \u003c!-- 务必插入Disqus公共JS代码 --\u003e \u003c/section\u003e 2.获取Disqus的公共JS代码 注册Disqus \u003e 安装平台选则 Universal Code \u003e 直接复制代码 3.添加完毕后，重新启动Ghost博客。 4.Disqus不能成功加载的时候可以在JavaScript中强制使用HTTPS以链接Disqus服务器。具体方法就是在s.src的提供的URL中加入https://。 ","date":"2016-11-18","objectID":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/:0:0","series":null,"tags":["Ghost"],"title":"Ghost 增加评论模块","uri":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/#"},{"categories":["Blog","Ghost"],"content":"Ghost作为一个更加纯粹的博客平台，并没有打算为其开发内置的文章评论功能。而是将评论功能托管给第三方，好处也是让用户更有精力集中于网站内容的建设。实现的办法也很简单，只需要向Ghost主题的模板Handlebars(.hbs)插入第三方评论组件的JavaScript代码来为Ghost博客增加评论功能。 国内最常用的多说评论框，支持国内常见的社交网络一键注册登录、盖楼讨论和分享而且对新用户上手简单。而Disqus功能强大、完善的社交网络和多国语言支持并且为其插件启用全球CDN加速。总的来说两个插件各有所长。 基于默认主题Casper的安装指南： 创建一个模板 安装多说评论系统 安装Disqus 创建一个模板 为了在需要评论框代码的时候方便引用，我选择事先在主题文件夹content\\themes\\casper\\partials下面创建一个叫做comments.hbs的模板文件，也就是评论框的专属模板。 现在我只需要在我的Casper主题下面的post.hbs模板中的 \u003c/footer\u003e \u003c/article\u003e 前面部分添加一句{{\u003e comments}}就可以展示评论框了。 添加后就像这样： {{\u003e comments}} 这样以来的好处就可以在任何主题中轻松移植评论框代码。 开始之前：对评论框Html代码进行简要说明。 ...用于展示评论框 评论框公共代码 {{slug}} 引用文章短名作为第三方社交平台识别文章的特征标志 {{title}} 引用文章标题 {{url absolute=\"true\"}} 获取永久链接 安装多说评论框 1.将下面的评论框代码插入comments.hbs文件。 多说评论框： ","date":"2016-11-18","objectID":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/:0:0","series":null,"tags":["Ghost"],"title":"Ghost 增加评论模块","uri":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/#comments.hbs"},{"categories":["Blog","Ghost"],"content":"Ghost作为一个更加纯粹的博客平台，并没有打算为其开发内置的文章评论功能。而是将评论功能托管给第三方，好处也是让用户更有精力集中于网站内容的建设。实现的办法也很简单，只需要向Ghost主题的模板Handlebars(.hbs)插入第三方评论组件的JavaScript代码来为Ghost博客增加评论功能。 国内最常用的多说评论框，支持国内常见的社交网络一键注册登录、盖楼讨论和分享而且对新用户上手简单。而Disqus功能强大、完善的社交网络和多国语言支持并且为其插件启用全球CDN加速。总的来说两个插件各有所长。 基于默认主题Casper的安装指南： 创建一个模板 安装多说评论系统 安装Disqus 创建一个模板 为了在需要评论框代码的时候方便引用，我选择事先在主题文件夹content\\themes\\casper\\partials下面创建一个叫做comments.hbs的模板文件，也就是评论框的专属模板。 现在我只需要在我的Casper主题下面的post.hbs模板中的 前面部分添加一句{{\u003e comments}}就可以展示评论框了。 添加后就像这样： {{\u003e comments}} 这样以来的好处就可以在任何主题中轻松移植评论框代码。 开始之前：对评论框Html代码进行简要说明。 ...用于展示评论框 评论框公共代码 {{slug}} 引用文章短名作为第三方社交平台识别文章的特征标志 {{title}} 引用文章标题 {{url absolute=\"true\"}} 获取永久链接 安装多说评论框 1.将下面的评论框代码插入comments.hbs文件。 多说评论框： ","date":"2016-11-18","objectID":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/:0:0","series":null,"tags":["Ghost"],"title":"Ghost 增加评论模块","uri":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/#Duoshuo"},{"categories":["Blog","Ghost"],"content":"Ghost作为一个更加纯粹的博客平台，并没有打算为其开发内置的文章评论功能。而是将评论功能托管给第三方，好处也是让用户更有精力集中于网站内容的建设。实现的办法也很简单，只需要向Ghost主题的模板Handlebars(.hbs)插入第三方评论组件的JavaScript代码来为Ghost博客增加评论功能。 国内最常用的多说评论框，支持国内常见的社交网络一键注册登录、盖楼讨论和分享而且对新用户上手简单。而Disqus功能强大、完善的社交网络和多国语言支持并且为其插件启用全球CDN加速。总的来说两个插件各有所长。 基于默认主题Casper的安装指南： 创建一个模板 安装多说评论系统 安装Disqus 创建一个模板 为了在需要评论框代码的时候方便引用，我选择事先在主题文件夹content\\themes\\casper\\partials下面创建一个叫做comments.hbs的模板文件，也就是评论框的专属模板。 现在我只需要在我的Casper主题下面的post.hbs模板中的 前面部分添加一句{{\u003e comments}}就可以展示评论框了。 添加后就像这样： {{\u003e comments}} 这样以来的好处就可以在任何主题中轻松移植评论框代码。 开始之前：对评论框Html代码进行简要说明。 ...用于展示评论框 评论框公共代码 {{slug}} 引用文章短名作为第三方社交平台识别文章的特征标志 {{title}} 引用文章标题 {{url absolute=\"true\"}} 获取永久链接 安装多说评论框 1.将下面的评论框代码插入comments.hbs文件。 多说评论框： ","date":"2016-11-18","objectID":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/:0:0","series":null,"tags":["Ghost"],"title":"Ghost 增加评论模块","uri":"https://samzong.me/ghost-2-%E5%A2%9E%E5%8A%A0%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97/#Disqus"},{"categories":["Python"],"content":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e Python学习笔记(1) --Python基础 输出： print python2：print 'Hello Python' python3: print(‘Hello Python') python(‘10+20=‘,10+20) 输入： python2：raw_input() python3: input() python的语法比较简单，采用缩进的方式： a = 100 if a \u003e= 0: print(a) else: print(-a) \u0026 diff \u0026 a = 100 if a \u003e=0: print(a) else: print(-a) # 开头为注释；: 结尾，缩进的语句视为代码块；Python大小写是敏感的，约定俗成：4个空格的缩进，可以吧tab设置为4个空格。 Python 的数据类型 整数：python可以处理任意大小的整数 浮点数：也就是小数，之所以称之为浮点数，因为按照科学计数法表示时，一个浮点数的小数点位置是可变的 字符串：字符串是以’’和”” 包括起来的任意文本，例如’abc’,”xyz”；如果字符内部同时包含’和”，可以使用\\转义字符来标识。 如果字符串内部有很多换行，用\\n不好阅读，python支持使用’’’…’’' 的格式表示多行‘ r’…' python可以使用r’’表示’'以内的字符不转义;多行: r’’’…’'' 布尔值：布尔值和布尔代数表示的完全一致，一个布尔值只有True和False，python支持直接使用True和False表示布尔值，注意大小写，另外最好不要生命变量时使用True等，布尔值，经常用于在条件判断之中。 and : 与运算，所有运算结果都是True，and的结果才是True or：或运算，只有1个运算结果为True，or的结果就是True not：他是一个单目运算符，取相反的值 空值：python里的一个特殊值，用None表示，注意None不能理解为0，因为0是有意义的，而None是一个特殊的空值 python的变量 命名规则：必须是大小写英文，数字和_的组合，且不能用数字开头； 赋值符号：’=’；等于的符号是’==’ 动态语言：变量本身类型不固定的语言称之为动态语言，反之是静态语言，静态语言在定义变量时必须制定变量的数据类型，如果赋值的时候类型不匹配，就会报错； 变量在计算机内存中的表示：a=1,指的是python在内存中创建了整数1，然后在内存创建了变量a，并把它指向了整数1 python的常量 定义：常量就是不能改变的变量，在python中，通常使用全部大写的变量名表示常量 整数的除法是精确的，因为除法计算结果是浮点数，例如 9/3 结果为3.0 ; 另外一种除法是’//‘ 地板除，两个整数的除法任然是整数；余数运算’%’ 字符编码：字符串是一种数据类型，但是字符串还涉及到一个编码问题，Python3的字符串是支持多语言的 ord(‘')函数 获取字符的整数表示； chr(‘')函数 把编码转换成对应的字符； python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干字节，但是如果要在网络传输或者保存到磁盘，就要把str转化为单位的bytes； python对于bytes的数据类型用带b前缀的单引号或双引号表示： 另外，Unicode表示的str可用encode()函数，指定编码为bytes。 ‘ABC’ .encode(‘utf-8') decode() 可以吧bytes转变为str。b'ABC' .decode('ascii') 要计算str包含了多少个字符使用 len()函数： len(‘hello’) ,结果为5 #!/usr/bin/env python3 # -*- coding: utf-8 -*- 格式化： 如何处理格式化输出字符串，在python中使用的格式化方式和C语言是一致的，用’%’实现： %d 表示整数 %f 表示浮点数 %s 表示字符串，如果不确定用什么，用%s，它会把任何数据类型转换为字符串 %x 表示十六进制整数 %% 表示一个普通的% 数据类型list和tuple list是python内置的一种数据类型：列表，list是一个有序的集合，可以随时添加和删除其中元素。 classmates = [‘Michael’,’Bob’,’Tracy’]， 可以用len()函数获取这个list的元素的个数 可以用索引来访问list中的每一个位置的元素，记住索引的第一个位置是0： 当索引超出范围的时候，python会报出IndexError错误，记得最后一个索引是len(classmates) -1 如果直接取出最后一个索引可用classmates[-1],以此类推 list是一个可变的有序列表，所以可以去追加，插入指定位置，删除，替换等操作，支持不同数据类型，支持嵌套list 追加: classmates.append(‘Adam') 插入指定位置: classmates.insert(2,’Jack') 删除list末尾的元素： classmates.pop() 删除指定位置的元素: classmates.pop(1) 替换元素：classmates[1]=‘Sarch’ ， 直接给相应位置的元素重新赋值即可 list的元素支持不同的数据类型, L = [‘abc’,23,23.4] list的元素支持嵌套另外一个list： s = [‘abc',123,[‘XYZ’,2.34]]，注意这个时候len(s)的元素是3个 list也可以没有元素，就是一个空的list，它的长度为0 tuple：元组，也是一种有序列表，但是tuple一旦初始化就不能修改，他没有append()也没有insert()，这样的方法，其他获取元素的方式和list一样，也不能赋值成为另外的元素： classmates = (‘Michael’,’Bob’,’Tracy’) 注意list用的是’[]’，而tuple用的是’()’ tuple 有个问题，当你定义1个元素的时候，tuple的()和数学公式中的小括号混淆 ，因此python规定，这种情况下面，当定义只有1个tuple时必须增加一个逗号’,’来消除歧义。 tuple的元素也可以为list或者tuple，tuple的元素不会改变，但是list是一个可以改变的有序数列，所以当tuple中包含list时，这个tuple是’可变的' 取出特定元素： L[[‘Apple’,’Google’,’Microsoft’],[‘Java’,’Python’,’C’]] ; L[1][1] = ‘Python' 条件判断 if：根据python的缩进规则，如果if语句的判断是True，就会执行下面的语句，否则什么都不做 else：也可以个if添加else，意思就是，如果if的判断是false，不要执行if的内容，执行else的内容 elif：如果要嵌套多级判断条件的话，使用elif，elif 是else if的缩写 if语句执行有个特点，它是自上而下的判断，如果某个判断的结果是True，那么执行该判断对应的语句，就会忽略掉剩下的所有elif和else，if判断条件还可以简写: if x: 只要x是非零数值、非空字符串、非空list等，就判断为True， iput(): 需要注意的地方，默认input的返回类型是str，由于str不能直接整数比较，所以在碰到明明输入200，但是不能和201对比时，记住先要把str转化为整数，python提供了int()函数, 转化数据类型为int类型，但是如果输入’abc’则会得到1个ValueError的错误 循环 for…in ： 依次把list或者tuple的每个元素迭代出来，for x in … ：循环就是把每个元素带入变量x，然后执行缩进的语句： range()函数：用来生成一个整数序列，再通过list()函数转换为list，例如range(5)生成：0,1,2,3,4 list(range(5)) = [0,1,2,3,4] 计算1+...+100的结果： for x in range(101): sum = sum +x while 循环： 只要条件满足，就不断循环，条件不足时退出循环： 计算100以内所有奇数之和： sum = 0,n = 99, while n \u003e 0: sum =sum +n; n = n-2 break: 在循环中，break语句可以提前退出循环，当程序执行满足break条件的时候，就会退出循环 continue: 在循环过程中，也可以通过continue语句，跳过当前的这次循环。 注意：循环是让计算机做重复任务的有效方法，break语句可以在循环过程总直接退出循环，continue语句可以提前结束本轮循环，并直接进入下一轮循环，这两个语句通常必须配合if语句使用，但是尽量不要滥用这两个语句，因为当break和continue使用过多会导致代码执行逻辑分支过多，容易出错。 dict和set dict： python内置了字典：dict的支持，全称：dictionary，在其他语言中也称之为map，使用键值存储，具有极快的查找速度。 对比list","date":"2016-11-11","objectID":"https://samzong.me/python-1-%E5%9F%BA%E7%A1%80/:0:0","series":null,"tags":["Python"],"title":"Python 基础","uri":"https://samzong.me/python-1-%E5%9F%BA%E7%A1%80/#"},{"categories":["数据库","MySQL"],"content":" 在实际工作中，有时我们会想要去清空一张表的所有数据，常用的命令有delete和truncate这两个命令。 ","date":"2016-11-10","objectID":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 清空表命令之：truncate与delete 区别","uri":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/#"},{"categories":["数据库","MySQL"],"content":" 0.1 1. delete 在很多情况，我们对于delete的应用更多，因为它支持更多的匹配模式，我们可以使用where条件语句，清理一些特定的数据，关于delete的操作，这里不做过多解释，有空就专门写写delete的使用和原理。delete 在清空表时，如果表内有自增ID的设定，那么在delete清空之后，再插入数据时，自增ID不会从1开始，默认会继续增加; 除非我们使用OPTIMIZE TABLE，重置表属性； mysql\u003e delete from piwik_tmp; Query OK, 0 rows affected (0.00 sec) ","date":"2016-11-10","objectID":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/:0:1","series":null,"tags":["MySQL"],"title":"MySQL 清空表命令之：truncate与delete 区别","uri":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/#1-delete"},{"categories":["数据库","MySQL"],"content":" 0.2 2. truncate truncate 在清空表时，会同时将自增ID重置，再插入新数据时会从1开始，而且truncate在清空表时，不关心表的行数，所以执行效率会高于delete； mysql\u003e truncate table piwik_tmp; Query OK, 0 rows affected (0.01 sec) ","date":"2016-11-10","objectID":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/:0:2","series":null,"tags":["MySQL"],"title":"MySQL 清空表命令之：truncate与delete 区别","uri":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/#2-truncate"},{"categories":["数据库","MySQL"],"content":" 0.3 3. 释放表空间 但是在truncate清空表数据时，myisam的表和innodb的表在使用上有一定的区别；myisam表会清空所有数据，并释放表空间，即硬盘空间会得到释放。innodb表也会清空所有数据，但不释放表空间。Innodb数据库对于已经删除的数据只是标记为删除，并不真正释放所占用的磁盘空间，这就导致InnoDB数据库文件不断增长。如果想彻底释放这些已经删除的数据，需要把数据库导出，删除InnoDB数据库文件，然后再导入。 # 备份数据库： mysqldump -u -p --quick --force --all-databases \u003e mysqldump.sql # 停止数据库 service mysqld stop # 删除这些大文件 rm /usr/local/mysql/var/ibdata1 rm /usr/local/mysql/var/ib_logfile* # 手动删除除Mysql之外所有数据库文件夹，然后启动数据库 service mysqld start # 还原数据 mysql -uroot -proot \u003c mysqldump.sql ","date":"2016-11-10","objectID":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/:0:3","series":null,"tags":["MySQL"],"title":"MySQL 清空表命令之：truncate与delete 区别","uri":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/#3-释放表空间"},{"categories":["数据库","MySQL"],"content":" 0.4 4. innodb_file_per_table 还有一种方式是在创建数据库的时候设置innodb_file_per_table，这样InnoDB会对每个表创建一个数据文件，然后只需要运行OPTIMIZE TABLE 命令就可以释放所有已经删除的磁盘空间。 0.4.1 4.1 修改mysql默认配置文件。 编辑my.ini或my.cnf 在innodb段中加入 innodb_file_per_table=1 # 1为启用，0为禁用 0.4.2 4.2 查看修改结果 通过mysql语句可以查看该变量的值： mysql\u003e show variables like '%per_table%'; ","date":"2016-11-10","objectID":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/:0:4","series":null,"tags":["MySQL"],"title":"MySQL 清空表命令之：truncate与delete 区别","uri":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/#4-innodb_file_per_table"},{"categories":["数据库","MySQL"],"content":" 0.4 4. innodb_file_per_table 还有一种方式是在创建数据库的时候设置innodb_file_per_table，这样InnoDB会对每个表创建一个数据文件，然后只需要运行OPTIMIZE TABLE 命令就可以释放所有已经删除的磁盘空间。 0.4.1 4.1 修改mysql默认配置文件。 编辑my.ini或my.cnf 在innodb段中加入 innodb_file_per_table=1 # 1为启用，0为禁用 0.4.2 4.2 查看修改结果 通过mysql语句可以查看该变量的值： mysql\u003e show variables like '%per_table%'; ","date":"2016-11-10","objectID":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/:0:4","series":null,"tags":["MySQL"],"title":"MySQL 清空表命令之：truncate与delete 区别","uri":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/#41-修改mysql默认配置文件"},{"categories":["数据库","MySQL"],"content":" 0.4 4. innodb_file_per_table 还有一种方式是在创建数据库的时候设置innodb_file_per_table，这样InnoDB会对每个表创建一个数据文件，然后只需要运行OPTIMIZE TABLE 命令就可以释放所有已经删除的磁盘空间。 0.4.1 4.1 修改mysql默认配置文件。 编辑my.ini或my.cnf 在innodb段中加入 innodb_file_per_table=1 # 1为启用，0为禁用 0.4.2 4.2 查看修改结果 通过mysql语句可以查看该变量的值： mysql\u003e show variables like '%per_table%'; ","date":"2016-11-10","objectID":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/:0:4","series":null,"tags":["MySQL"],"title":"MySQL 清空表命令之：truncate与delete 区别","uri":"https://samzong.me/mysql-5-%E6%B8%85%E7%A9%BA%E8%A1%A8%E5%91%BD%E4%BB%A4%E4%B9%8Btruncate%E4%B8%8Edelete%E5%8C%BA%E5%88%AB/#42-查看修改结果"},{"categories":["Linux"],"content":" 0.1 SSH 配置安全控制限制登录 0.1.0.1 1. 只允许某个IP登录，拒绝其他所有IP在 /etc/hosts.allow 增加: sshd: 1.2.3.4 在 /etc/hosts.deny 增肌: sshd: ALL 用 iptables 也行: iptables -A INPUT -p tcp --dport 22 -j DROP iptables -A INPUT -p tcp --dport 22 -s 1.2.3.4 -j ACCEPT 0.1.0.2 2. 禁止某个用户通过ssh登录在/etc/ssh/sshd_conf添加 AllowUsers 用户名 或者 AllowGroups 组名 或者 DenyUsers 用户名 0.1.0.3 3. 设定登录黑名单 [root@6 ~]# vim /etc/pam.d/sshd auth required /lib/security/pam_listfile.so item=user sense=deny file=/etc/sshd_user_deny_list onerr=succeed # 所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录 0.1.0.4 4. sshd_config配置 # 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式 Port 22　# SSH 预设使用 22 这个 port，您也可以使用多的 port ！ # 亦即重复使用 port 这个设定项目即可！ Protocol 2,1　# 选择的 SSH 协议版本，可以是 1 也可以是 2 ， # 如果要同时支持两者，就必须要使用 2,1 这个分隔了！ #ListenAddress 0.0.0.0　# 监听的主机适配卡！举个例子来说，如果您有两个 IP， # 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要 # 开放 192.168.0.100 时，就可以写如同下面的样式： ListenAddress 192.168.0.100 # 只监听来自 192.168.0.100 这个 IP 的SSH联机。 # 如果不使用设定的话，则预设所有接口均接受 SSH PidFile /var/run/sshd.pid　# 可以放置 SSHD 这个 PID 的档案！左列为默认值 LoginGraceTime 600　# 当使用者连上 SSH server 之后，会出现输入密码的画面， # 在该画面中，在多久时间内没有成功连上 SSH server ， # 就断线！时间为秒！ Compression yes　# 是否可以使用压缩指令？当然可以啰！ # 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！ HostKey /etc/ssh/ssh_host_key　# SSH version 1 使用的私钥 HostKey /etc/ssh/ssh_host_rsa_key　# SSH version 2 使用的 RSA 私钥 HostKey /etc/ssh/ssh_host_dsa_key　# SSH version 2 使用的 DSA 私钥 # 关于 version 1 的一些设定！ KeyRegenerationInterval 3600　# 由前面联机的说明可以知道， version 1 会使用 # server 的 Public Key ，那么如果这个 Public # Key 被偷的话，岂不完蛋？所以需要每隔一段时间 # 来重新建立一次！这里的时间为秒！ ServerKeyBits 768 # 没错！这个就是 Server key 的长度！ # 关于登录文件的讯息数据放置与 daemon 的名称！ SyslogFacility AUTH　# 当有人使用 SSH 登入系统的时候，SSH会记录资 # 讯，这个信息要记录在什么 daemon name 底下？ # 预设是以 AUTH 来设定的，即是 /var/log/secure # 里面！什么？忘记了！回到 Linux 基础去翻一下 # 其它可用的 daemon name 为：DAEMON,USER,AUTH, # LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5, LogLevel INFO　# 登录记录的等级！嘿嘿！任何讯息！ # 同样的，忘记了就回去参考！ # 登入设定部分 PermitRootLogin no　# 是否允许 root 登入！预设是允许的，但是建议设定成 no！ UserLogin no　# 在 SSH 底下本来就不接受 login 这个程序的登入！ StrictModes yes　# 当使用者的 host key 改变之后，Server 就不接受联机， # 可以抵挡部分的木马程序！ #RSAAuthentication yes　# 是否使用纯的 RSA 认证！？仅针对 version 1 ！ PubkeyAuthentication yes　# 是否允许 Public Key ？当然允许啦！只有 version 2 AuthorizedKeysFile .ssh/authorized_keys # 上面这个在设定若要使用不需要密码登入的账号时，那么那个 # 账号的存放档案所在档名！ Allowusers root@222.XX.XX.XX. #设置允许root帐号只能以222.XX.XX.XX这个IP进行ssh连接 # 认证部分 RhostsAuthentication no　# 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太 # 不安全了，所以这里一定要设定为 no ！ IgnoreRhosts yes　# 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！ RhostsRSAAuthentication no # 这个选项是专门给 version 1 用的，使用 rhosts 档案在 # /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用 HostbasedAuthentication no # 这个项目与上面的项目类似，不过是给 version 2 使用的！ IgnoreUserKnownHosts no　# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录 # 的主机内容？当然不要忽略，所以这里就是 no 啦！ PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes 啰！ PermitEmptyPasswords no　# 若上面那一项如果设定为 yes 的话，这一项就最好设定 # 为 no ，这个项目在是否允许以空的密码登入！当然不许！ ChallengeResponseAuthentication yes # 挑战任何的密码认证！所以，任何 login.conf # 规定的认证方式，均可适用！ #PAMAuthenticationViaKbdInt yes # 是否启用其它的 PAM 模块！启用这个模块将会 # 导致 PasswordAuthentication 设定失效！ # 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！ #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosTgtPassing no # 底下是有关在 X-Window 底下使用的相关设定！ X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes # 登入后的项目： PrintMotd no # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等 # 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！ PrintLastLog yes　# 显示上次登入的信息！可以啊！预设也是 yes ！ KeepAlive yes　# 一般而言，如果设定这项目的话，那么 SSH Server 会传送 # KeepAlive 的讯息给 Client 端，以确保两者的联机正常！ # 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会 # 有僵尸程序的发生！ UsePrivilegeSeparation yes # 使用者的权限设定项目！就设定为 yes 吧！ MaxStartups 10　# 同时允许几个尚未登入的联机画面？当我们连上 SSH ， # 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！ # 在这个联机画面中，为了保护主机，所以需要设定最大值， # 预设最多十个联机画面，而已经建立联机的不计算在这十个当中 # 关于使用者抵挡的设定项目： DenyUsers *　# 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部 # 挡吧！若是部分使用者，可以将该账号填入！例如下列！ DenyUsers test DenyGroups test　# 与 DenyUsers 相同！仅抵挡几个群组而已！ # 关于 SFTP 服务的设定项目！ Subsystem sftp /usr/lib/ssh/sftp-server 如果不愿意开放 SFTP 的话，将这一行批注掉即可！ ","date":"2016-10-29","objectID":"https://samzong.me/ssh-linux-security-settings/:0:1","series":null,"tags":["SSH"],"title":"SSH LINUX Security Settings","uri":"https://samzong.me/ssh-linux-security-settings/#ssh-配置安全控制限制登录"},{"categories":["Linux"],"content":" 0.1 SSH 配置安全控制限制登录 0.1.0.1 1. 只允许某个IP登录，拒绝其他所有IP在 /etc/hosts.allow 增加: sshd: 1.2.3.4 在 /etc/hosts.deny 增肌: sshd: ALL 用 iptables 也行: iptables -A INPUT -p tcp --dport 22 -j DROP iptables -A INPUT -p tcp --dport 22 -s 1.2.3.4 -j ACCEPT 0.1.0.2 2. 禁止某个用户通过ssh登录在/etc/ssh/sshd_conf添加 AllowUsers 用户名 或者 AllowGroups 组名 或者 DenyUsers 用户名 0.1.0.3 3. 设定登录黑名单 [root@6 ~]# vim /etc/pam.d/sshd auth required /lib/security/pam_listfile.so item=user sense=deny file=/etc/sshd_user_deny_list onerr=succeed # 所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录 0.1.0.4 4. sshd_config配置 # 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式 Port 22　# SSH 预设使用 22 这个 port，您也可以使用多的 port ！ # 亦即重复使用 port 这个设定项目即可！ Protocol 2,1　# 选择的 SSH 协议版本，可以是 1 也可以是 2 ， # 如果要同时支持两者，就必须要使用 2,1 这个分隔了！ #ListenAddress 0.0.0.0　# 监听的主机适配卡！举个例子来说，如果您有两个 IP， # 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要 # 开放 192.168.0.100 时，就可以写如同下面的样式： ListenAddress 192.168.0.100 # 只监听来自 192.168.0.100 这个 IP 的SSH联机。 # 如果不使用设定的话，则预设所有接口均接受 SSH PidFile /var/run/sshd.pid　# 可以放置 SSHD 这个 PID 的档案！左列为默认值 LoginGraceTime 600　# 当使用者连上 SSH server 之后，会出现输入密码的画面， # 在该画面中，在多久时间内没有成功连上 SSH server ， # 就断线！时间为秒！ Compression yes　# 是否可以使用压缩指令？当然可以啰！ # 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！ HostKey /etc/ssh/ssh_host_key　# SSH version 1 使用的私钥 HostKey /etc/ssh/ssh_host_rsa_key　# SSH version 2 使用的 RSA 私钥 HostKey /etc/ssh/ssh_host_dsa_key　# SSH version 2 使用的 DSA 私钥 # 关于 version 1 的一些设定！ KeyRegenerationInterval 3600　# 由前面联机的说明可以知道， version 1 会使用 # server 的 Public Key ，那么如果这个 Public # Key 被偷的话，岂不完蛋？所以需要每隔一段时间 # 来重新建立一次！这里的时间为秒！ ServerKeyBits 768 # 没错！这个就是 Server key 的长度！ # 关于登录文件的讯息数据放置与 daemon 的名称！ SyslogFacility AUTH　# 当有人使用 SSH 登入系统的时候，SSH会记录资 # 讯，这个信息要记录在什么 daemon name 底下？ # 预设是以 AUTH 来设定的，即是 /var/log/secure # 里面！什么？忘记了！回到 Linux 基础去翻一下 # 其它可用的 daemon name 为：DAEMON,USER,AUTH, # LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5, LogLevel INFO　# 登录记录的等级！嘿嘿！任何讯息！ # 同样的，忘记了就回去参考！ # 登入设定部分 PermitRootLogin no　# 是否允许 root 登入！预设是允许的，但是建议设定成 no！ UserLogin no　# 在 SSH 底下本来就不接受 login 这个程序的登入！ StrictModes yes　# 当使用者的 host key 改变之后，Server 就不接受联机， # 可以抵挡部分的木马程序！ #RSAAuthentication yes　# 是否使用纯的 RSA 认证！？仅针对 version 1 ！ PubkeyAuthentication yes　# 是否允许 Public Key ？当然允许啦！只有 version 2 AuthorizedKeysFile .ssh/authorized_keys # 上面这个在设定若要使用不需要密码登入的账号时，那么那个 # 账号的存放档案所在档名！ Allowusers root@222.XX.XX.XX. #设置允许root帐号只能以222.XX.XX.XX这个IP进行ssh连接 # 认证部分 RhostsAuthentication no　# 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太 # 不安全了，所以这里一定要设定为 no ！ IgnoreRhosts yes　# 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！ RhostsRSAAuthentication no # 这个选项是专门给 version 1 用的，使用 rhosts 档案在 # /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用 HostbasedAuthentication no # 这个项目与上面的项目类似，不过是给 version 2 使用的！ IgnoreUserKnownHosts no　# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录 # 的主机内容？当然不要忽略，所以这里就是 no 啦！ PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes 啰！ PermitEmptyPasswords no　# 若上面那一项如果设定为 yes 的话，这一项就最好设定 # 为 no ，这个项目在是否允许以空的密码登入！当然不许！ ChallengeResponseAuthentication yes # 挑战任何的密码认证！所以，任何 login.conf # 规定的认证方式，均可适用！ #PAMAuthenticationViaKbdInt yes # 是否启用其它的 PAM 模块！启用这个模块将会 # 导致 PasswordAuthentication 设定失效！ # 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！ #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosTgtPassing no # 底下是有关在 X-Window 底下使用的相关设定！ X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes # 登入后的项目： PrintMotd no # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等 # 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！ PrintLastLog yes　# 显示上次登入的信息！可以啊！预设也是 yes ！ KeepAlive yes　# 一般而言，如果设定这项目的话，那么 SSH Server 会传送 # KeepAlive 的讯息给 Client 端，以确保两者的联机正常！ # 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会 # 有僵尸程序的发生！ UsePrivilegeSeparation yes # 使用者的权限设定项目！就设定为 yes 吧！ MaxStartups 10　# 同时允许几个尚未登入的联机画面？当我们连上 SSH ， # 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！ # 在这个联机画面中，为了保护主机，所以需要设定最大值， # 预设最多十个联机画面，而已经建立联机的不计算在这十个当中 # 关于使用者抵挡的设定项目： DenyUsers *　# 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部 # 挡吧！若是部分使用者，可以将该账号填入！例如下列！ DenyUsers test DenyGroups test　# 与 DenyUsers 相同！仅抵挡几个群组而已！ # 关于 SFTP 服务的设定项目！ Subsystem sftp /usr/lib/ssh/sftp-server 如果不愿意开放 SFTP 的话，将这一行批注掉即可！ ","date":"2016-10-29","objectID":"https://samzong.me/ssh-linux-security-settings/:0:1","series":null,"tags":["SSH"],"title":"SSH LINUX Security Settings","uri":"https://samzong.me/ssh-linux-security-settings/#1-只允许某个ip登录拒绝其他所有ip"},{"categories":["Linux"],"content":" 0.1 SSH 配置安全控制限制登录 0.1.0.1 1. 只允许某个IP登录，拒绝其他所有IP在 /etc/hosts.allow 增加: sshd: 1.2.3.4 在 /etc/hosts.deny 增肌: sshd: ALL 用 iptables 也行: iptables -A INPUT -p tcp --dport 22 -j DROP iptables -A INPUT -p tcp --dport 22 -s 1.2.3.4 -j ACCEPT 0.1.0.2 2. 禁止某个用户通过ssh登录在/etc/ssh/sshd_conf添加 AllowUsers 用户名 或者 AllowGroups 组名 或者 DenyUsers 用户名 0.1.0.3 3. 设定登录黑名单 [root@6 ~]# vim /etc/pam.d/sshd auth required /lib/security/pam_listfile.so item=user sense=deny file=/etc/sshd_user_deny_list onerr=succeed # 所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录 0.1.0.4 4. sshd_config配置 # 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式 Port 22　# SSH 预设使用 22 这个 port，您也可以使用多的 port ！ # 亦即重复使用 port 这个设定项目即可！ Protocol 2,1　# 选择的 SSH 协议版本，可以是 1 也可以是 2 ， # 如果要同时支持两者，就必须要使用 2,1 这个分隔了！ #ListenAddress 0.0.0.0　# 监听的主机适配卡！举个例子来说，如果您有两个 IP， # 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要 # 开放 192.168.0.100 时，就可以写如同下面的样式： ListenAddress 192.168.0.100 # 只监听来自 192.168.0.100 这个 IP 的SSH联机。 # 如果不使用设定的话，则预设所有接口均接受 SSH PidFile /var/run/sshd.pid　# 可以放置 SSHD 这个 PID 的档案！左列为默认值 LoginGraceTime 600　# 当使用者连上 SSH server 之后，会出现输入密码的画面， # 在该画面中，在多久时间内没有成功连上 SSH server ， # 就断线！时间为秒！ Compression yes　# 是否可以使用压缩指令？当然可以啰！ # 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！ HostKey /etc/ssh/ssh_host_key　# SSH version 1 使用的私钥 HostKey /etc/ssh/ssh_host_rsa_key　# SSH version 2 使用的 RSA 私钥 HostKey /etc/ssh/ssh_host_dsa_key　# SSH version 2 使用的 DSA 私钥 # 关于 version 1 的一些设定！ KeyRegenerationInterval 3600　# 由前面联机的说明可以知道， version 1 会使用 # server 的 Public Key ，那么如果这个 Public # Key 被偷的话，岂不完蛋？所以需要每隔一段时间 # 来重新建立一次！这里的时间为秒！ ServerKeyBits 768 # 没错！这个就是 Server key 的长度！ # 关于登录文件的讯息数据放置与 daemon 的名称！ SyslogFacility AUTH　# 当有人使用 SSH 登入系统的时候，SSH会记录资 # 讯，这个信息要记录在什么 daemon name 底下？ # 预设是以 AUTH 来设定的，即是 /var/log/secure # 里面！什么？忘记了！回到 Linux 基础去翻一下 # 其它可用的 daemon name 为：DAEMON,USER,AUTH, # LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5, LogLevel INFO　# 登录记录的等级！嘿嘿！任何讯息！ # 同样的，忘记了就回去参考！ # 登入设定部分 PermitRootLogin no　# 是否允许 root 登入！预设是允许的，但是建议设定成 no！ UserLogin no　# 在 SSH 底下本来就不接受 login 这个程序的登入！ StrictModes yes　# 当使用者的 host key 改变之后，Server 就不接受联机， # 可以抵挡部分的木马程序！ #RSAAuthentication yes　# 是否使用纯的 RSA 认证！？仅针对 version 1 ！ PubkeyAuthentication yes　# 是否允许 Public Key ？当然允许啦！只有 version 2 AuthorizedKeysFile .ssh/authorized_keys # 上面这个在设定若要使用不需要密码登入的账号时，那么那个 # 账号的存放档案所在档名！ Allowusers root@222.XX.XX.XX. #设置允许root帐号只能以222.XX.XX.XX这个IP进行ssh连接 # 认证部分 RhostsAuthentication no　# 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太 # 不安全了，所以这里一定要设定为 no ！ IgnoreRhosts yes　# 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！ RhostsRSAAuthentication no # 这个选项是专门给 version 1 用的，使用 rhosts 档案在 # /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用 HostbasedAuthentication no # 这个项目与上面的项目类似，不过是给 version 2 使用的！ IgnoreUserKnownHosts no　# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录 # 的主机内容？当然不要忽略，所以这里就是 no 啦！ PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes 啰！ PermitEmptyPasswords no　# 若上面那一项如果设定为 yes 的话，这一项就最好设定 # 为 no ，这个项目在是否允许以空的密码登入！当然不许！ ChallengeResponseAuthentication yes # 挑战任何的密码认证！所以，任何 login.conf # 规定的认证方式，均可适用！ #PAMAuthenticationViaKbdInt yes # 是否启用其它的 PAM 模块！启用这个模块将会 # 导致 PasswordAuthentication 设定失效！ # 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！ #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosTgtPassing no # 底下是有关在 X-Window 底下使用的相关设定！ X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes # 登入后的项目： PrintMotd no # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等 # 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！ PrintLastLog yes　# 显示上次登入的信息！可以啊！预设也是 yes ！ KeepAlive yes　# 一般而言，如果设定这项目的话，那么 SSH Server 会传送 # KeepAlive 的讯息给 Client 端，以确保两者的联机正常！ # 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会 # 有僵尸程序的发生！ UsePrivilegeSeparation yes # 使用者的权限设定项目！就设定为 yes 吧！ MaxStartups 10　# 同时允许几个尚未登入的联机画面？当我们连上 SSH ， # 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！ # 在这个联机画面中，为了保护主机，所以需要设定最大值， # 预设最多十个联机画面，而已经建立联机的不计算在这十个当中 # 关于使用者抵挡的设定项目： DenyUsers *　# 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部 # 挡吧！若是部分使用者，可以将该账号填入！例如下列！ DenyUsers test DenyGroups test　# 与 DenyUsers 相同！仅抵挡几个群组而已！ # 关于 SFTP 服务的设定项目！ Subsystem sftp /usr/lib/ssh/sftp-server 如果不愿意开放 SFTP 的话，将这一行批注掉即可！ ","date":"2016-10-29","objectID":"https://samzong.me/ssh-linux-security-settings/:0:1","series":null,"tags":["SSH"],"title":"SSH LINUX Security Settings","uri":"https://samzong.me/ssh-linux-security-settings/#2-禁止某个用户通过ssh登录"},{"categories":["Linux"],"content":" 0.1 SSH 配置安全控制限制登录 0.1.0.1 1. 只允许某个IP登录，拒绝其他所有IP在 /etc/hosts.allow 增加: sshd: 1.2.3.4 在 /etc/hosts.deny 增肌: sshd: ALL 用 iptables 也行: iptables -A INPUT -p tcp --dport 22 -j DROP iptables -A INPUT -p tcp --dport 22 -s 1.2.3.4 -j ACCEPT 0.1.0.2 2. 禁止某个用户通过ssh登录在/etc/ssh/sshd_conf添加 AllowUsers 用户名 或者 AllowGroups 组名 或者 DenyUsers 用户名 0.1.0.3 3. 设定登录黑名单 [root@6 ~]# vim /etc/pam.d/sshd auth required /lib/security/pam_listfile.so item=user sense=deny file=/etc/sshd_user_deny_list onerr=succeed # 所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录 0.1.0.4 4. sshd_config配置 # 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式 Port 22　# SSH 预设使用 22 这个 port，您也可以使用多的 port ！ # 亦即重复使用 port 这个设定项目即可！ Protocol 2,1　# 选择的 SSH 协议版本，可以是 1 也可以是 2 ， # 如果要同时支持两者，就必须要使用 2,1 这个分隔了！ #ListenAddress 0.0.0.0　# 监听的主机适配卡！举个例子来说，如果您有两个 IP， # 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要 # 开放 192.168.0.100 时，就可以写如同下面的样式： ListenAddress 192.168.0.100 # 只监听来自 192.168.0.100 这个 IP 的SSH联机。 # 如果不使用设定的话，则预设所有接口均接受 SSH PidFile /var/run/sshd.pid　# 可以放置 SSHD 这个 PID 的档案！左列为默认值 LoginGraceTime 600　# 当使用者连上 SSH server 之后，会出现输入密码的画面， # 在该画面中，在多久时间内没有成功连上 SSH server ， # 就断线！时间为秒！ Compression yes　# 是否可以使用压缩指令？当然可以啰！ # 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！ HostKey /etc/ssh/ssh_host_key　# SSH version 1 使用的私钥 HostKey /etc/ssh/ssh_host_rsa_key　# SSH version 2 使用的 RSA 私钥 HostKey /etc/ssh/ssh_host_dsa_key　# SSH version 2 使用的 DSA 私钥 # 关于 version 1 的一些设定！ KeyRegenerationInterval 3600　# 由前面联机的说明可以知道， version 1 会使用 # server 的 Public Key ，那么如果这个 Public # Key 被偷的话，岂不完蛋？所以需要每隔一段时间 # 来重新建立一次！这里的时间为秒！ ServerKeyBits 768 # 没错！这个就是 Server key 的长度！ # 关于登录文件的讯息数据放置与 daemon 的名称！ SyslogFacility AUTH　# 当有人使用 SSH 登入系统的时候，SSH会记录资 # 讯，这个信息要记录在什么 daemon name 底下？ # 预设是以 AUTH 来设定的，即是 /var/log/secure # 里面！什么？忘记了！回到 Linux 基础去翻一下 # 其它可用的 daemon name 为：DAEMON,USER,AUTH, # LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5, LogLevel INFO　# 登录记录的等级！嘿嘿！任何讯息！ # 同样的，忘记了就回去参考！ # 登入设定部分 PermitRootLogin no　# 是否允许 root 登入！预设是允许的，但是建议设定成 no！ UserLogin no　# 在 SSH 底下本来就不接受 login 这个程序的登入！ StrictModes yes　# 当使用者的 host key 改变之后，Server 就不接受联机， # 可以抵挡部分的木马程序！ #RSAAuthentication yes　# 是否使用纯的 RSA 认证！？仅针对 version 1 ！ PubkeyAuthentication yes　# 是否允许 Public Key ？当然允许啦！只有 version 2 AuthorizedKeysFile .ssh/authorized_keys # 上面这个在设定若要使用不需要密码登入的账号时，那么那个 # 账号的存放档案所在档名！ Allowusers root@222.XX.XX.XX. #设置允许root帐号只能以222.XX.XX.XX这个IP进行ssh连接 # 认证部分 RhostsAuthentication no　# 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太 # 不安全了，所以这里一定要设定为 no ！ IgnoreRhosts yes　# 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！ RhostsRSAAuthentication no # 这个选项是专门给 version 1 用的，使用 rhosts 档案在 # /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用 HostbasedAuthentication no # 这个项目与上面的项目类似，不过是给 version 2 使用的！ IgnoreUserKnownHosts no　# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录 # 的主机内容？当然不要忽略，所以这里就是 no 啦！ PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes 啰！ PermitEmptyPasswords no　# 若上面那一项如果设定为 yes 的话，这一项就最好设定 # 为 no ，这个项目在是否允许以空的密码登入！当然不许！ ChallengeResponseAuthentication yes # 挑战任何的密码认证！所以，任何 login.conf # 规定的认证方式，均可适用！ #PAMAuthenticationViaKbdInt yes # 是否启用其它的 PAM 模块！启用这个模块将会 # 导致 PasswordAuthentication 设定失效！ # 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！ #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosTgtPassing no # 底下是有关在 X-Window 底下使用的相关设定！ X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes # 登入后的项目： PrintMotd no # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等 # 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！ PrintLastLog yes　# 显示上次登入的信息！可以啊！预设也是 yes ！ KeepAlive yes　# 一般而言，如果设定这项目的话，那么 SSH Server 会传送 # KeepAlive 的讯息给 Client 端，以确保两者的联机正常！ # 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会 # 有僵尸程序的发生！ UsePrivilegeSeparation yes # 使用者的权限设定项目！就设定为 yes 吧！ MaxStartups 10　# 同时允许几个尚未登入的联机画面？当我们连上 SSH ， # 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！ # 在这个联机画面中，为了保护主机，所以需要设定最大值， # 预设最多十个联机画面，而已经建立联机的不计算在这十个当中 # 关于使用者抵挡的设定项目： DenyUsers *　# 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部 # 挡吧！若是部分使用者，可以将该账号填入！例如下列！ DenyUsers test DenyGroups test　# 与 DenyUsers 相同！仅抵挡几个群组而已！ # 关于 SFTP 服务的设定项目！ Subsystem sftp /usr/lib/ssh/sftp-server 如果不愿意开放 SFTP 的话，将这一行批注掉即可！ ","date":"2016-10-29","objectID":"https://samzong.me/ssh-linux-security-settings/:0:1","series":null,"tags":["SSH"],"title":"SSH LINUX Security Settings","uri":"https://samzong.me/ssh-linux-security-settings/#3-设定登录黑名单"},{"categories":["Linux"],"content":" 0.1 SSH 配置安全控制限制登录 0.1.0.1 1. 只允许某个IP登录，拒绝其他所有IP在 /etc/hosts.allow 增加: sshd: 1.2.3.4 在 /etc/hosts.deny 增肌: sshd: ALL 用 iptables 也行: iptables -A INPUT -p tcp --dport 22 -j DROP iptables -A INPUT -p tcp --dport 22 -s 1.2.3.4 -j ACCEPT 0.1.0.2 2. 禁止某个用户通过ssh登录在/etc/ssh/sshd_conf添加 AllowUsers 用户名 或者 AllowGroups 组名 或者 DenyUsers 用户名 0.1.0.3 3. 设定登录黑名单 [root@6 ~]# vim /etc/pam.d/sshd auth required /lib/security/pam_listfile.so item=user sense=deny file=/etc/sshd_user_deny_list onerr=succeed # 所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录 0.1.0.4 4. sshd_config配置 # 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式 Port 22　# SSH 预设使用 22 这个 port，您也可以使用多的 port ！ # 亦即重复使用 port 这个设定项目即可！ Protocol 2,1　# 选择的 SSH 协议版本，可以是 1 也可以是 2 ， # 如果要同时支持两者，就必须要使用 2,1 这个分隔了！ #ListenAddress 0.0.0.0　# 监听的主机适配卡！举个例子来说，如果您有两个 IP， # 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要 # 开放 192.168.0.100 时，就可以写如同下面的样式： ListenAddress 192.168.0.100 # 只监听来自 192.168.0.100 这个 IP 的SSH联机。 # 如果不使用设定的话，则预设所有接口均接受 SSH PidFile /var/run/sshd.pid　# 可以放置 SSHD 这个 PID 的档案！左列为默认值 LoginGraceTime 600　# 当使用者连上 SSH server 之后，会出现输入密码的画面， # 在该画面中，在多久时间内没有成功连上 SSH server ， # 就断线！时间为秒！ Compression yes　# 是否可以使用压缩指令？当然可以啰！ # 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！ HostKey /etc/ssh/ssh_host_key　# SSH version 1 使用的私钥 HostKey /etc/ssh/ssh_host_rsa_key　# SSH version 2 使用的 RSA 私钥 HostKey /etc/ssh/ssh_host_dsa_key　# SSH version 2 使用的 DSA 私钥 # 关于 version 1 的一些设定！ KeyRegenerationInterval 3600　# 由前面联机的说明可以知道， version 1 会使用 # server 的 Public Key ，那么如果这个 Public # Key 被偷的话，岂不完蛋？所以需要每隔一段时间 # 来重新建立一次！这里的时间为秒！ ServerKeyBits 768 # 没错！这个就是 Server key 的长度！ # 关于登录文件的讯息数据放置与 daemon 的名称！ SyslogFacility AUTH　# 当有人使用 SSH 登入系统的时候，SSH会记录资 # 讯，这个信息要记录在什么 daemon name 底下？ # 预设是以 AUTH 来设定的，即是 /var/log/secure # 里面！什么？忘记了！回到 Linux 基础去翻一下 # 其它可用的 daemon name 为：DAEMON,USER,AUTH, # LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5, LogLevel INFO　# 登录记录的等级！嘿嘿！任何讯息！ # 同样的，忘记了就回去参考！ # 登入设定部分 PermitRootLogin no　# 是否允许 root 登入！预设是允许的，但是建议设定成 no！ UserLogin no　# 在 SSH 底下本来就不接受 login 这个程序的登入！ StrictModes yes　# 当使用者的 host key 改变之后，Server 就不接受联机， # 可以抵挡部分的木马程序！ #RSAAuthentication yes　# 是否使用纯的 RSA 认证！？仅针对 version 1 ！ PubkeyAuthentication yes　# 是否允许 Public Key ？当然允许啦！只有 version 2 AuthorizedKeysFile .ssh/authorized_keys # 上面这个在设定若要使用不需要密码登入的账号时，那么那个 # 账号的存放档案所在档名！ Allowusers root@222.XX.XX.XX. #设置允许root帐号只能以222.XX.XX.XX这个IP进行ssh连接 # 认证部分 RhostsAuthentication no　# 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太 # 不安全了，所以这里一定要设定为 no ！ IgnoreRhosts yes　# 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！ RhostsRSAAuthentication no # 这个选项是专门给 version 1 用的，使用 rhosts 档案在 # /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用 HostbasedAuthentication no # 这个项目与上面的项目类似，不过是给 version 2 使用的！ IgnoreUserKnownHosts no　# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录 # 的主机内容？当然不要忽略，所以这里就是 no 啦！ PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes 啰！ PermitEmptyPasswords no　# 若上面那一项如果设定为 yes 的话，这一项就最好设定 # 为 no ，这个项目在是否允许以空的密码登入！当然不许！ ChallengeResponseAuthentication yes # 挑战任何的密码认证！所以，任何 login.conf # 规定的认证方式，均可适用！ #PAMAuthenticationViaKbdInt yes # 是否启用其它的 PAM 模块！启用这个模块将会 # 导致 PasswordAuthentication 设定失效！ # 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！ #KerberosAuthentication no #KerberosOrLocalPasswd yes #KerberosTicketCleanup yes #KerberosTgtPassing no # 底下是有关在 X-Window 底下使用的相关设定！ X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes # 登入后的项目： PrintMotd no # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等 # 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！ PrintLastLog yes　# 显示上次登入的信息！可以啊！预设也是 yes ！ KeepAlive yes　# 一般而言，如果设定这项目的话，那么 SSH Server 会传送 # KeepAlive 的讯息给 Client 端，以确保两者的联机正常！ # 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会 # 有僵尸程序的发生！ UsePrivilegeSeparation yes # 使用者的权限设定项目！就设定为 yes 吧！ MaxStartups 10　# 同时允许几个尚未登入的联机画面？当我们连上 SSH ， # 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！ # 在这个联机画面中，为了保护主机，所以需要设定最大值， # 预设最多十个联机画面，而已经建立联机的不计算在这十个当中 # 关于使用者抵挡的设定项目： DenyUsers *　# 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部 # 挡吧！若是部分使用者，可以将该账号填入！例如下列！ DenyUsers test DenyGroups test　# 与 DenyUsers 相同！仅抵挡几个群组而已！ # 关于 SFTP 服务的设定项目！ Subsystem sftp /usr/lib/ssh/sftp-server 如果不愿意开放 SFTP 的话，将这一行批注掉即可！ ","date":"2016-10-29","objectID":"https://samzong.me/ssh-linux-security-settings/:0:1","series":null,"tags":["SSH"],"title":"SSH LINUX Security Settings","uri":"https://samzong.me/ssh-linux-security-settings/#4-sshd_config配置"},{"categories":["数据库","PostgreSQL"],"content":" 0.1 CentOS 6 0.1.0.1 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.1.0.2 2. Create the PostgreSQL database cluster. sduo service postgresql-9.5 initdb 0.1.0.3 3. Enable automatic PostgreSQL server startup. sudo chkconfig postgresql-9.5 on 0.1.0.4 4. Start the PostgreSQL server. sudo service postgresql-9.5 start ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:1","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#centos-6"},{"categories":["数据库","PostgreSQL"],"content":" 0.1 CentOS 6 0.1.0.1 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.1.0.2 2. Create the PostgreSQL database cluster. sduo service postgresql-9.5 initdb 0.1.0.3 3. Enable automatic PostgreSQL server startup. sudo chkconfig postgresql-9.5 on 0.1.0.4 4. Start the PostgreSQL server. sudo service postgresql-9.5 start ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:1","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#1-install-postgresql-repository-and-the-postgresql-server-by-running-the-following"},{"categories":["数据库","PostgreSQL"],"content":" 0.1 CentOS 6 0.1.0.1 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.1.0.2 2. Create the PostgreSQL database cluster. sduo service postgresql-9.5 initdb 0.1.0.3 3. Enable automatic PostgreSQL server startup. sudo chkconfig postgresql-9.5 on 0.1.0.4 4. Start the PostgreSQL server. sudo service postgresql-9.5 start ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:1","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#2-create-the-postgresql-database-cluster"},{"categories":["数据库","PostgreSQL"],"content":" 0.1 CentOS 6 0.1.0.1 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.1.0.2 2. Create the PostgreSQL database cluster. sduo service postgresql-9.5 initdb 0.1.0.3 3. Enable automatic PostgreSQL server startup. sudo chkconfig postgresql-9.5 on 0.1.0.4 4. Start the PostgreSQL server. sudo service postgresql-9.5 start ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:1","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#3-enable-automatic-postgresql-server-startup"},{"categories":["数据库","PostgreSQL"],"content":" 0.1 CentOS 6 0.1.0.1 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-6-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.1.0.2 2. Create the PostgreSQL database cluster. sduo service postgresql-9.5 initdb 0.1.0.3 3. Enable automatic PostgreSQL server startup. sudo chkconfig postgresql-9.5 on 0.1.0.4 4. Start the PostgreSQL server. sudo service postgresql-9.5 start ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:1","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#4-start-the-postgresql-server"},{"categories":["数据库","PostgreSQL"],"content":" 0.2 CentOS 7 0.2.0.5 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5 /redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.2.0.6 2. Create the PostgreSQL database cluster. sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb 0.2.0.7 3. Enable automatic PostgreSQL server startup. sudo systemctl enable postgresql-9.5 0.2.0.8 4. Start the PostgreSQL server. sudo systemctl start postgresql-9.5 ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:2","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#centos-7"},{"categories":["数据库","PostgreSQL"],"content":" 0.2 CentOS 7 0.2.0.5 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5 /redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.2.0.6 2. Create the PostgreSQL database cluster. sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb 0.2.0.7 3. Enable automatic PostgreSQL server startup. sudo systemctl enable postgresql-9.5 0.2.0.8 4. Start the PostgreSQL server. sudo systemctl start postgresql-9.5 ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:2","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#1-install-postgresql-repository-and-the-postgresql-server-by-running-the-following-1"},{"categories":["数据库","PostgreSQL"],"content":" 0.2 CentOS 7 0.2.0.5 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5 /redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.2.0.6 2. Create the PostgreSQL database cluster. sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb 0.2.0.7 3. Enable automatic PostgreSQL server startup. sudo systemctl enable postgresql-9.5 0.2.0.8 4. Start the PostgreSQL server. sudo systemctl start postgresql-9.5 ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:2","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#2-create-the-postgresql-database-cluster-1"},{"categories":["数据库","PostgreSQL"],"content":" 0.2 CentOS 7 0.2.0.5 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5 /redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.2.0.6 2. Create the PostgreSQL database cluster. sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb 0.2.0.7 3. Enable automatic PostgreSQL server startup. sudo systemctl enable postgresql-9.5 0.2.0.8 4. Start the PostgreSQL server. sudo systemctl start postgresql-9.5 ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:2","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#3-enable-automatic-postgresql-server-startup-1"},{"categories":["数据库","PostgreSQL"],"content":" 0.2 CentOS 7 0.2.0.5 1. Install PostgreSQL repository and the PostgreSQL server by running the following: sudo yum install https://download.postgresql.org/pub/repos/yum/9.5 /redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm sudo yum install postgresql95-serve 0.2.0.6 2. Create the PostgreSQL database cluster. sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb 0.2.0.7 3. Enable automatic PostgreSQL server startup. sudo systemctl enable postgresql-9.5 0.2.0.8 4. Start the PostgreSQL server. sudo systemctl start postgresql-9.5 ","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:2","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#4-start-the-postgresql-server-1"},{"categories":["数据库","PostgreSQL"],"content":" 0.3 Configurations for CentOSWhen installing in CentOs env. you will also need to make the following configurations. 0.3.0.9 1. Change authentication to md5. sudo vi /var/lib/pgsql/9.5/data/pg_hba.conf 0.3.0.10 2. Change METHOD to md5. # IPv4 local connections: host all all 127.0.0.1/32 md5 # IPv6 local connections: host all all ::1/128 md5 0.3.0.11 3. Restart PostgreSQL","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:3","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#configurations-for-centos"},{"categories":["数据库","PostgreSQL"],"content":" 0.3 Configurations for CentOSWhen installing in CentOs env. you will also need to make the following configurations. 0.3.0.9 1. Change authentication to md5. sudo vi /var/lib/pgsql/9.5/data/pg_hba.conf 0.3.0.10 2. Change METHOD to md5. # IPv4 local connections: host all all 127.0.0.1/32 md5 # IPv6 local connections: host all all ::1/128 md5 0.3.0.11 3. Restart PostgreSQL","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:3","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#1-change-authentication-to-md5"},{"categories":["数据库","PostgreSQL"],"content":" 0.3 Configurations for CentOSWhen installing in CentOs env. you will also need to make the following configurations. 0.3.0.9 1. Change authentication to md5. sudo vi /var/lib/pgsql/9.5/data/pg_hba.conf 0.3.0.10 2. Change METHOD to md5. # IPv4 local connections: host all all 127.0.0.1/32 md5 # IPv6 local connections: host all all ::1/128 md5 0.3.0.11 3. Restart PostgreSQL","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:3","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#2-change-method-to-md5"},{"categories":["数据库","PostgreSQL"],"content":" 0.3 Configurations for CentOSWhen installing in CentOs env. you will also need to make the following configurations. 0.3.0.9 1. Change authentication to md5. sudo vi /var/lib/pgsql/9.5/data/pg_hba.conf 0.3.0.10 2. Change METHOD to md5. # IPv4 local connections: host all all 127.0.0.1/32 md5 # IPv6 local connections: host all all ::1/128 md5 0.3.0.11 3. Restart PostgreSQL","date":"2016-10-20","objectID":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/:0:3","series":null,"tags":["PostgreSQL"],"title":"HowTo Install PostgreSQL 9.5 on CentOS 6.x","uri":"https://samzong.me/howto-install-postgresql-9-5-on-centos-6-x/#3-restart-postgresql"},{"categories":null,"content":" 20岁之前我看郭敬明的书很多，真的对我的人生有很大的影响，20岁以后，我开始看韩寒和王路的书，觉得他们的文字很酷，可以够我装逼来用，因为我看不来那些国外名著大师之作啊，文化水平达不到不能怪谁。 我的姑娘，必定是美好的，是完人，是仙女，是温柔的月光，是清晨初露的霞光，是令人心动的春风，是呼啸着穿堂而过的夏日阳光，是踩着红色高跟鞋踢踏踢踏走进我的胸膛，是历经岁月沧桑依然伴随左右的踏实臂膀。[大叔一直问阿姨要不我站起来你躺会，阿姨一直说我不累，却在我和大叔攀谈依靠在座位上睡着了。] 当你准备接受爱情的时候，就要接受爱情带来的苦涩，焦虑和怅然若失的情绪，就像你打算接受一个人，就要学会接受他的前面后面上面下面，可能下面会比较小，但是你都要学会接受，要么你还准备好开始一段爱情和爱上一个人。 如今社会高度发展的经济文化，的确会让很多人的价值观有失颇比，直观体现就是很多挂作家之名写出乌七八糟的东西反而畅销，进而影响更多读者，所以需要筛选文章，读适合自己的，生活如此，对的是自己，其他则毋庸顾虑，凡事需顾虑的，便对自己无甚意义，弃之亦不可惜。 sometimes the only way to move forward is to revisit the things in your past.that were holding you back.you have yo deal with them head on, no matter how scary they may be.beacuse once we do , you’ll see that you can go further than you ever imageined. 《The Flash》－ S02E17 莱蒙托夫有首诗《一只船》这样写：一只船孤独地航行在海上，它既不寻求幸福，也不逃避幸福，它只是向前航行，底下是沉静碧蓝的大海，而头顶是金色的太阳。 内心是有难过的地方，每次我望见那一方矮矮的坟墓，都感到距离这么近那么远。 我真不喜欢有些人把自己的惰性归咎于出生命运 你没法让自己做到最好，最起码要努力变的更好 我希望我可以像太阳一样，给你温暖，像树一样成为你的依靠 或是彼此太过沉默，曾经一起走过的那段时光也变得模糊了。其实，我们每个人都会经历很多这样的分离，没有海誓山盟，没有悲恸不已，就是那种不可寻的时间；猛然间才发现我早已失去了你，朋友，愿你一切都好！腐朽的生命会令我们忘记许多人，却夺不去那些美好时光，或已忘记，但它永远真切的存在。 踏上西行的列车，我说睡吧睡吧，醒来就是另一片天空，没有让你忧伤的人儿 每一个存在都是有意义的，当我们的时间用来羡慕、嫉妒、,抱怨的时候，我们存在的意义在哪里？“我就是我，是颜色不一样的烟火”——《我》，我们缺乏的是看清自己的勇气，加油！/微笑\u0003 一定是特别的缘分，才可以一路走来变成一家人，所以啊，没什么好忧伤的 这世间有很多个我，所以我泯然于众我，我与我并没有什么不同，不同的是心，得之我幸，失之我命，得失心重，所以不知己身已入局，正所谓当局者迷，所谓难，只是因为你觉得难，若不舍千万不要放手。 我始终觉得每个人在特定的时间都有很多事情要去做，这个世界上没有你想像中的有那么多童话，你不会是这世界的唯一，在每一刻亦或一个瞬间，有人多人，你只是其中的一个，现实就是如此，你可以幻想可是不能沉沦，感情是无法用言语来形容，你感到伤悲，很多年后你一定会忘记你曾经觉得一辈子都无法忘记的 感情是不可以用言语文字来形容的，我们掌控所有，甚至无法掌控自己，我们能做的只是不要迷失自我，做自己该做的，做自己想做的，做了就不会后悔，年轻的时光，是我们最美好的，应该好好珍惜，因为之后，生活不在简单纯洁，每个人都背负了太多，也许曾经触手可及的是现在的梦想。我一直相信，相信自己。 一个人的时候，可以听听歌，看看书，可以站在车水马龙的路边看着霓虹灯在闪烁 ，然后在身边转身看灯光下自己的影子，感谢你一直陪着我，一个人的时候可以把所有忧伤都表现出来 ，一个人的时候可以暴躁任性 ，总之一个人的时候可以无法无天 。 妄思不能静，混事乱七八糟，可汗，自省吾身吾言吾行吾思 我所有的自负都来自我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是怀疑。我假装无情，其实是痛恨自己的深情。我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。——马良 《坦白书》 我猜，只是猜，每个人的一生都会遇见某些人，喜欢上她。有些人在合适的时间里遇到，就像是在春天遇到花开，所以一切都很好，他们会相恋、订婚、结婚、一起生活。而有的人在错误的时间遇到 ，就像是在冬天，隔着冰看见浮上来换气的鱼，所以只能看着，鱼换完气，沉到水下去，就看不见了，再也没有后续。但是我们能说在春天遇到花是对的，而在冬天遇到鱼是错的么？在错误的时间里遇到，就能克制自己不喜欢那个人么？是不是仍然会用尽了力气想去接近，想尽办法掩饰自己，甚至伪装成另外一条鱼。——江南 《龙族》​ 可人不是断气的时候才真的死了。有人说人会死三次，第一次是他断气的时候 ，从生物学上他死了；第二次是他下葬的时候，人们来参加他的葬礼，怀念他的一生，然后在社会上他死了，不再会有他的位置；第三次是最后一个记得他的人把他忘记的时候，那时候他才真正的死了。——江南 《龙族》 ","date":"2016-10-14","objectID":"https://samzong.me/%E5%86%99%E7%9A%84%E5%BE%AE%E5%8D%9A/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"微博随笔","uri":"https://samzong.me/%E5%86%99%E7%9A%84%E5%BE%AE%E5%8D%9A/#"},{"categories":["数据库","MySQL"],"content":" 0.1 1. 简介索引可以我们更快速的执行查询，但是肯定存在不合理的索引，如果想找到那些索引不是很合适的查询，并在它们成为问题前进行优化，则可以使用pt-query-digest的查询审查“review”功能，分析其EXPLAIN出来的执行计划。 pt-query-digest是用于分析mysql慢查询的一个工具，它可以分析binlog、General log、slowlog，也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析。可以把分析结果输出到文件中，分析过程是先对查询语句的条件进行参数化，然后对参数化以后的查询进行分组统计，统计出各查询的执行时间、次数、占比等，可以借助分析结果找出问题进行优化。 ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:1","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#1-简介"},{"categories":["数据库","MySQL"],"content":" 0.2 2. Install Percona Toolkit \u0026 pt-query-digestpercona-toolkit是一组高级命令行工具的集合，用来执行各种通过手工执行非常复杂和麻烦的mysql和系统任务。这些任务包括： 检查master和slave数据的一致性 有效地对记录进行归档 查找重复的索引 对服务器信息进行汇总 分析来自日志和tcpdump的查询 当系统出问题的时候收集重要的系统信息 [root@ultrera ~]# wget percona.com/get/percona-toolkit.tar.gz --2016-09-22 09:17:00-- http://percona.com/get/percona-toolkit.tar.gz Resolving percona.com... 74.121.199.234, 74.121.199.234 Connecting to percona.com|74.121.199.234|:80... connected. HTTP request sent, awaiting response... 301 Moved Permanently Location: https://www.percona.com/get/percona-toolkit.tar.gz [following] --2016-09-22 09:17:02-- https://www.percona.com/get/percona-toolkit.tar.gz Resolving www.percona.com... 74.121.199.234, 74.121.199.234 Connecting to www.percona.com|74.121.199.234|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://www.percona.com/downloads/percona-toolkit/2.2.19/tarball/percona-toolkit-2.2.19.tar.gz [following] --2016-09-22 09:17:03-- https://www.percona.com/downloads/percona-toolkit/2.2.19/tarball/percona-toolkit-2.2.19.tar.gz Reusing existing connection to www.percona.com:443. HTTP request sent, awaiting response... 200 OK Length: 1425623 (1.4M) [application/x-gzip] Saving to: “percona-toolkit.tar.gz” 100%[=======================\u003e] 1,425,623 766K/s in 1.8s 2016-09-22 09:17:05 (766 KB/s) - “percona-toolkit.tar.gz” saved [1425623/1425623] [root@ultrera ~]# tar xf percona-toolkit.tar.gz [root@ultrera ~]# ls percona-toolkit-2.2.19 percona-toolkit.tar.gz [root@ultrera ~]# cd percona-toolkit-2.2.19 [root@ultrera percona-toolkit-2.2.19]# perl Makefile.PL Warning: prerequisite DBD::mysql 3 not found. Writing Makefile for percona-toolkit [root@ultrera percona-toolkit-2.2.19]# make cp bin/pt-mysql-summary blib/script/pt-mysql-summary .... Manifying blib/man1/pt-index-usage.1p Manifying blib/man1/pt-duplicate-key-checker.1p Manifying blib/man1/pt-config-diff.1p Manifying blib/man1/pt-stalk.1p [root@ultrera percona-toolkit-2.2.19]# make install Installing /usr/local/share/man/man1/pt-query-digest.1p ... Installing /usr/local/bin/pt-query-digest ... Appending installation info to /usr/lib64/perl5/perllocal.pod 运行工具可能会遇到下面的错误: Can’t locate Time/HiRes.pm in @INC # 解决办法： [root@ultrera ~]# yum install -y perl-Time-HiRes [root@ultrera ~]# pt-query-digest --version pt-query-digest 2.2.19 ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:2","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#2-install-percona-toolkit--pt-query-digest"},{"categories":["数据库","MySQL"],"content":" 0.3 3. 开启 mysql慢日志 0.3.0.1 a. 查看当前‘slow_query_log’ 状态： mysql\u003e show variables like '%query%'; +------------------------------+---------------------------------+ | Variable_name | Value | +------------------------------+---------------------------------+ | binlog_rows_query_log_events | OFF | | ft_query_expansion_limit | 20 | | have_query_cache | YES | | long_query_time | 10.000000 | | query_alloc_block_size | 8192 | | query_cache_limit | 1048576 | | query_cache_min_res_unit | 4096 | | query_cache_size | 1048576 | | query_cache_type | OFF | | query_cache_wlock_invalidate | OFF | | query_prealloc_size | 8192 | | slow_query_log | OFF | | slow_query_log_file | /var/lib/mysql/ultrera-slow.log | +------------------------------+---------------------------------+ 13 rows in set (0.00 sec) mysql\u003e show variables like 'log_queries_not_using_indexes'; +-------------------------------+-------+ | Variable_name | Value | +-------------------------------+-------+ | log_queries_not_using_indexes | OFF | +-------------------------------+-------+ 1 row in set (0.00 sec) 0.3.0.2 b. 启动slow_log, 配置 # 设定记录大于2s的sql mysql\u003e set global long_query_time=2; Query OK, 0 rows affected (0.00 sec) # 设定log存放路径 mysql\u003e set global slow_query_log_file='/tmp/ultraera-slow.log'; Query OK, 0 rows affected (0.00 sec) # 启用慢日志 mysql\u003e set global slow_query_log=ON; Query OK, 0 rows affected (0.00 sec) # 同时记录没有使用索引的sql mysql\u003e set global log_queries_not_using_indexes=on; Query OK, 0 rows affected (0.00 sec) 等待一段时间，slow.log 增大的非常快，实际生产中，注意不要被slow.log将磁盘撑满，影响到正常生产使用。 ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:3","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#3-开启-mysql慢日志"},{"categories":["数据库","MySQL"],"content":" 0.3 3. 开启 mysql慢日志 0.3.0.1 a. 查看当前‘slow_query_log’ 状态： mysql\u003e show variables like '%query%'; +------------------------------+---------------------------------+ | Variable_name | Value | +------------------------------+---------------------------------+ | binlog_rows_query_log_events | OFF | | ft_query_expansion_limit | 20 | | have_query_cache | YES | | long_query_time | 10.000000 | | query_alloc_block_size | 8192 | | query_cache_limit | 1048576 | | query_cache_min_res_unit | 4096 | | query_cache_size | 1048576 | | query_cache_type | OFF | | query_cache_wlock_invalidate | OFF | | query_prealloc_size | 8192 | | slow_query_log | OFF | | slow_query_log_file | /var/lib/mysql/ultrera-slow.log | +------------------------------+---------------------------------+ 13 rows in set (0.00 sec) mysql\u003e show variables like 'log_queries_not_using_indexes'; +-------------------------------+-------+ | Variable_name | Value | +-------------------------------+-------+ | log_queries_not_using_indexes | OFF | +-------------------------------+-------+ 1 row in set (0.00 sec) 0.3.0.2 b. 启动slow_log, 配置 # 设定记录大于2s的sql mysql\u003e set global long_query_time=2; Query OK, 0 rows affected (0.00 sec) # 设定log存放路径 mysql\u003e set global slow_query_log_file='/tmp/ultraera-slow.log'; Query OK, 0 rows affected (0.00 sec) # 启用慢日志 mysql\u003e set global slow_query_log=ON; Query OK, 0 rows affected (0.00 sec) # 同时记录没有使用索引的sql mysql\u003e set global log_queries_not_using_indexes=on; Query OK, 0 rows affected (0.00 sec) 等待一段时间，slow.log 增大的非常快，实际生产中，注意不要被slow.log将磁盘撑满，影响到正常生产使用。 ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:3","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#a-查看当前slow_query_log-状态"},{"categories":["数据库","MySQL"],"content":" 0.3 3. 开启 mysql慢日志 0.3.0.1 a. 查看当前‘slow_query_log’ 状态： mysql\u003e show variables like '%query%'; +------------------------------+---------------------------------+ | Variable_name | Value | +------------------------------+---------------------------------+ | binlog_rows_query_log_events | OFF | | ft_query_expansion_limit | 20 | | have_query_cache | YES | | long_query_time | 10.000000 | | query_alloc_block_size | 8192 | | query_cache_limit | 1048576 | | query_cache_min_res_unit | 4096 | | query_cache_size | 1048576 | | query_cache_type | OFF | | query_cache_wlock_invalidate | OFF | | query_prealloc_size | 8192 | | slow_query_log | OFF | | slow_query_log_file | /var/lib/mysql/ultrera-slow.log | +------------------------------+---------------------------------+ 13 rows in set (0.00 sec) mysql\u003e show variables like 'log_queries_not_using_indexes'; +-------------------------------+-------+ | Variable_name | Value | +-------------------------------+-------+ | log_queries_not_using_indexes | OFF | +-------------------------------+-------+ 1 row in set (0.00 sec) 0.3.0.2 b. 启动slow_log, 配置 # 设定记录大于2s的sql mysql\u003e set global long_query_time=2; Query OK, 0 rows affected (0.00 sec) # 设定log存放路径 mysql\u003e set global slow_query_log_file='/tmp/ultraera-slow.log'; Query OK, 0 rows affected (0.00 sec) # 启用慢日志 mysql\u003e set global slow_query_log=ON; Query OK, 0 rows affected (0.00 sec) # 同时记录没有使用索引的sql mysql\u003e set global log_queries_not_using_indexes=on; Query OK, 0 rows affected (0.00 sec) 等待一段时间，slow.log 增大的非常快，实际生产中，注意不要被slow.log将磁盘撑满，影响到正常生产使用。 ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:3","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#b-启动slow_log-配置"},{"categories":["数据库","MySQL"],"content":" 0.4 4. 分析pt-query-digest可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从SHOW PROCESSLIST和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。 0.4.0.3 a. 简单使用方法： pt-query-digest slow.logs 输出信息如下： ![](http://images.cnitblog.com/blog/288950/201312/14135450-6f7a732598054f7aa311e95cbd4df3b1.png) 1. Overall这个部分是一个大致的概要信息(类似loadrunner给出的概要信息)，通过它可以对当前MySQL的查询性能做一个初步的评估，比如各个指标的最大值(max)，平均值(min)，95%分布值，中位数(median)，标准偏差(stddev) 查询的执行时间（Exec time） 锁占用的时间（Lock time） MySQL执行器需要检查的行数（Rows examine） 最后返回给客户端的行数（Rows sent） 查询的大小。 2. Profile Rank ： 整个分析中该“语句”的排名，一般也就是性能最慢的 Query ID ：每个查询都有一个 Response time ： “语句”的响应时间以及整体占比情况。 Calls ：“语句”的执行次数 R/Call ：每次执行的平均响应时间。 V/M ##### 详细信息 列出上面Profile中每个Query ID的详细信息 0.4.0.4 b. 从tcpdump包中分析：通过tcpdump命令抓取一定时间网络数据包，然后进行分析： pt-query-digest --type tcpdump mysql.tcp.txt 0.4.0.5 c. pt-query-digest 还支持很对其他的数据包分析形势，但是我们主要使用的还是针对慢日志进行分析 更多的帮助文档，请查看官方文档：http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:4","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#4-分析"},{"categories":["数据库","MySQL"],"content":" 0.4 4. 分析pt-query-digest可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从SHOW PROCESSLIST和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。 0.4.0.3 a. 简单使用方法： pt-query-digest slow.logs 输出信息如下： ![](http://images.cnitblog.com/blog/288950/201312/14135450-6f7a732598054f7aa311e95cbd4df3b1.png) 1. Overall这个部分是一个大致的概要信息(类似loadrunner给出的概要信息)，通过它可以对当前MySQL的查询性能做一个初步的评估，比如各个指标的最大值(max)，平均值(min)，95%分布值，中位数(median)，标准偏差(stddev) 查询的执行时间（Exec time） 锁占用的时间（Lock time） MySQL执行器需要检查的行数（Rows examine） 最后返回给客户端的行数（Rows sent） 查询的大小。 2. Profile Rank ： 整个分析中该“语句”的排名，一般也就是性能最慢的 Query ID ：每个查询都有一个 Response time ： “语句”的响应时间以及整体占比情况。 Calls ：“语句”的执行次数 R/Call ：每次执行的平均响应时间。 V/M ##### 详细信息 列出上面Profile中每个Query ID的详细信息 0.4.0.4 b. 从tcpdump包中分析：通过tcpdump命令抓取一定时间网络数据包，然后进行分析： pt-query-digest --type tcpdump mysql.tcp.txt 0.4.0.5 c. pt-query-digest 还支持很对其他的数据包分析形势，但是我们主要使用的还是针对慢日志进行分析 更多的帮助文档，请查看官方文档：http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:4","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#a-简单使用方法"},{"categories":["数据库","MySQL"],"content":" 0.4 4. 分析pt-query-digest可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从SHOW PROCESSLIST和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。 0.4.0.3 a. 简单使用方法： pt-query-digest slow.logs 输出信息如下： ![](http://images.cnitblog.com/blog/288950/201312/14135450-6f7a732598054f7aa311e95cbd4df3b1.png) 1. Overall这个部分是一个大致的概要信息(类似loadrunner给出的概要信息)，通过它可以对当前MySQL的查询性能做一个初步的评估，比如各个指标的最大值(max)，平均值(min)，95%分布值，中位数(median)，标准偏差(stddev) 查询的执行时间（Exec time） 锁占用的时间（Lock time） MySQL执行器需要检查的行数（Rows examine） 最后返回给客户端的行数（Rows sent） 查询的大小。 2. Profile Rank ： 整个分析中该“语句”的排名，一般也就是性能最慢的 Query ID ：每个查询都有一个 Response time ： “语句”的响应时间以及整体占比情况。 Calls ：“语句”的执行次数 R/Call ：每次执行的平均响应时间。 V/M ##### 详细信息 列出上面Profile中每个Query ID的详细信息 0.4.0.4 b. 从tcpdump包中分析：通过tcpdump命令抓取一定时间网络数据包，然后进行分析： pt-query-digest --type tcpdump mysql.tcp.txt 0.4.0.5 c. pt-query-digest 还支持很对其他的数据包分析形势，但是我们主要使用的还是针对慢日志进行分析 更多的帮助文档，请查看官方文档：http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:4","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#b-从tcpdump包中分析通过tcpdump命令抓取一定时间网络数据包然后进行分析"},{"categories":["数据库","MySQL"],"content":" 0.4 4. 分析pt-query-digest可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从SHOW PROCESSLIST和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。 0.4.0.3 a. 简单使用方法： pt-query-digest slow.logs 输出信息如下： ![](http://images.cnitblog.com/blog/288950/201312/14135450-6f7a732598054f7aa311e95cbd4df3b1.png) 1. Overall这个部分是一个大致的概要信息(类似loadrunner给出的概要信息)，通过它可以对当前MySQL的查询性能做一个初步的评估，比如各个指标的最大值(max)，平均值(min)，95%分布值，中位数(median)，标准偏差(stddev) 查询的执行时间（Exec time） 锁占用的时间（Lock time） MySQL执行器需要检查的行数（Rows examine） 最后返回给客户端的行数（Rows sent） 查询的大小。 2. Profile Rank ： 整个分析中该“语句”的排名，一般也就是性能最慢的 Query ID ：每个查询都有一个 Response time ： “语句”的响应时间以及整体占比情况。 Calls ：“语句”的执行次数 R/Call ：每次执行的平均响应时间。 V/M ##### 详细信息 列出上面Profile中每个Query ID的详细信息 0.4.0.4 b. 从tcpdump包中分析：通过tcpdump命令抓取一定时间网络数据包，然后进行分析： pt-query-digest --type tcpdump mysql.tcp.txt 0.4.0.5 c. pt-query-digest 还支持很对其他的数据包分析形势，但是我们主要使用的还是针对慢日志进行分析 更多的帮助文档，请查看官方文档：http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:4","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#c-pt-query-digest-还支持很对其他的数据包分析形势但是我们主要使用的还是针对慢日志进行分析"},{"categories":["数据库","MySQL"],"content":" 0.5 5. 使用Anemometer将pt-query-digest的MySQL慢查询可视化 需要安装php 5.3 and over 需要预先配置mysql数据库 需要预先安装好pt-query-digest 0.5.0.6 5.1 安装 [root@ultrera ~]# git clone https://github.com/box/Anemometer.git anemometer [root@ultrera ~]# mv anemometer /var/www/html [root@ultrera ~]# cd /var/www/html/anemometer/ [root@ultrera anemometer]# mysql -h localhost -u root -p \u003c mysql56-install.sql [root@ultrera anemometer]# mysql -h localhost -u root -p -e \"grant all privileges on slow_query_log.* to 'anemometer'@'%' identified by 'anemometer';\" 0.5.0.7 5.2 配置 [root@ultrera anemometer]# cp conf/sample.config.inc.php conf/config.inc.php [root@ultrera anemometer]# vim conf/config.inc.php # line 48,49 and line 284,285 设置数据库的用户名和密码; [root@ultrera anemometer]# vim conf/config.inc.php # line 7,8 设置数据库的用户名和密码; 0.5.0.8 5.3 导入将pt-query-digest 的分析结果到anemometer； pt-query-digest version \u003c 2.2 $ pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --review-history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log pt-query-digest version \u003e= 2.2 pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57A\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 27. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57B\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 28. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57C\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 29. ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:5","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#5-使用anemometer将pt-query-digest的mysql慢查询可视化"},{"categories":["数据库","MySQL"],"content":" 0.5 5. 使用Anemometer将pt-query-digest的MySQL慢查询可视化 需要安装php 5.3 and over 需要预先配置mysql数据库 需要预先安装好pt-query-digest 0.5.0.6 5.1 安装 [root@ultrera ~]# git clone https://github.com/box/Anemometer.git anemometer [root@ultrera ~]# mv anemometer /var/www/html [root@ultrera ~]# cd /var/www/html/anemometer/ [root@ultrera anemometer]# mysql -h localhost -u root -p \u003c mysql56-install.sql [root@ultrera anemometer]# mysql -h localhost -u root -p -e \"grant all privileges on slow_query_log.* to 'anemometer'@'%' identified by 'anemometer';\" 0.5.0.7 5.2 配置 [root@ultrera anemometer]# cp conf/sample.config.inc.php conf/config.inc.php [root@ultrera anemometer]# vim conf/config.inc.php # line 48,49 and line 284,285 设置数据库的用户名和密码; [root@ultrera anemometer]# vim conf/config.inc.php # line 7,8 设置数据库的用户名和密码; 0.5.0.8 5.3 导入将pt-query-digest 的分析结果到anemometer； pt-query-digest version \u003c 2.2 $ pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --review-history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log pt-query-digest version \u003e= 2.2 pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57A\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 27. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57B\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 28. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57C\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 29. ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:5","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#51-安装"},{"categories":["数据库","MySQL"],"content":" 0.5 5. 使用Anemometer将pt-query-digest的MySQL慢查询可视化 需要安装php 5.3 and over 需要预先配置mysql数据库 需要预先安装好pt-query-digest 0.5.0.6 5.1 安装 [root@ultrera ~]# git clone https://github.com/box/Anemometer.git anemometer [root@ultrera ~]# mv anemometer /var/www/html [root@ultrera ~]# cd /var/www/html/anemometer/ [root@ultrera anemometer]# mysql -h localhost -u root -p \u003c mysql56-install.sql [root@ultrera anemometer]# mysql -h localhost -u root -p -e \"grant all privileges on slow_query_log.* to 'anemometer'@'%' identified by 'anemometer';\" 0.5.0.7 5.2 配置 [root@ultrera anemometer]# cp conf/sample.config.inc.php conf/config.inc.php [root@ultrera anemometer]# vim conf/config.inc.php # line 48,49 and line 284,285 设置数据库的用户名和密码; [root@ultrera anemometer]# vim conf/config.inc.php # line 7,8 设置数据库的用户名和密码; 0.5.0.8 5.3 导入将pt-query-digest 的分析结果到anemometer； pt-query-digest version \u003c 2.2 $ pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --review-history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log pt-query-digest version \u003e= 2.2 pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57A\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 27. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57B\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 28. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57C\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 29. ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:5","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#52-配置"},{"categories":["数据库","MySQL"],"content":" 0.5 5. 使用Anemometer将pt-query-digest的MySQL慢查询可视化 需要安装php 5.3 and over 需要预先配置mysql数据库 需要预先安装好pt-query-digest 0.5.0.6 5.1 安装 [root@ultrera ~]# git clone https://github.com/box/Anemometer.git anemometer [root@ultrera ~]# mv anemometer /var/www/html [root@ultrera ~]# cd /var/www/html/anemometer/ [root@ultrera anemometer]# mysql -h localhost -u root -p \u003c mysql56-install.sql [root@ultrera anemometer]# mysql -h localhost -u root -p -e \"grant all privileges on slow_query_log.* to 'anemometer'@'%' identified by 'anemometer';\" 0.5.0.7 5.2 配置 [root@ultrera anemometer]# cp conf/sample.config.inc.php conf/config.inc.php [root@ultrera anemometer]# vim conf/config.inc.php # line 48,49 and line 284,285 设置数据库的用户名和密码; [root@ultrera anemometer]# vim conf/config.inc.php # line 7,8 设置数据库的用户名和密码; 0.5.0.8 5.3 导入将pt-query-digest 的分析结果到anemometer； pt-query-digest version \u003c 2.2 $ pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --review-history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log pt-query-digest version \u003e= 2.2 pt-query-digest --user=anemometer --password=superSecurePass \\ --review h=db.example.com,D=slow_query_log,t=global_query_review \\ --history h=db.example.com,D=slow_query_log,t=global_query_review_history \\ --no-report --limit=0% \\ --filter=\" \\$event-\u003e{Bytes} = length(\\$event-\u003e{arg}) and \\$event-\u003e{hostname}=\\\"$HOSTNAME\\\"\" \\ /var/lib/mysql/db.example.com-slow.log Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57A\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 27. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57B\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 28. Pipeline process 11 (aggregate fingerprint) caused an error: Argument \"57C\" isn't numeric in numeric gt (\u003e) at (eval 40) line 6, \u003c\u003e line 29. ","date":"2016-09-22","objectID":"https://samzong.me/howto-use-pt-query-digest/:0:5","series":null,"tags":["MySQL"],"title":"HowTo Use pt-query-digest","uri":"https://samzong.me/howto-use-pt-query-digest/#53-导入"},{"categories":null,"content":"张楚说：孤独是可耻的。 我一直不愿承认的，我是一个孤独的人；或者这个世界上，没有人不会感到孤独吧；我的孤独，就好像在喧闹的人群中，突然就孤独了。 小王子说：有一天，我看了四十四次日落！ 李寻欢问阿飞：你看这棵树上的梅花已经开了，你可知道已经开了多少朵？ 孔乙己问：你可知道茴的四种写法？ 鲁迅说：楼下一个男人病的要死，那间壁的一家唱着留声机；对面是弄孩子，楼上有两人狂笑，还有打牌声，河中的穿上有女人哭着她死去的母亲，人类的悲欢并不相通，我只是觉得她们吵闹。 大话西游中说：你看那个人，好像一条狗！ 一千个读者，有一千个哈姆雷特！ 一个人走的太远太久了，便看腻了人潮似海。 如果问，你所理解的孤独是什么？大概每个人都有自己的答案吧。 突然觉得，原本以为亲密无间的伙伴并没有把我当朋友。 小心翼翼地与人相处，把她当作真诚的伙伴，害怕隔阂，害怕犯错。 或许，你所害怕的不是失去某个朋友，而是不够勇敢地去面对一个人的孤独。 有人说，最孤独的事，不是不能跟一个人在一起，而是你根本不知道想跟谁在一起… 其实，我们生来就是孤独; 生命的本质就是孤独，不管你拥有什么，我们生来就是孤独。 出现在这个世界本来就是一个偶然的事，谣言嘈杂的社会，人来人往，浮光掠影，匆匆碌碌。 这个世界永远都是陌生的，理解是奢侈的，你永远想不起来来时的路，你永远无法让一个人不离你而去。 不管你拥有什么，我们生来就是孤独。 当我年轻的时候我想变成任何人，除了我自己。 ","date":"2016-09-20","objectID":"https://samzong.me/%E7%94%9F%E8%80%85%E5%AD%A4%E7%8B%AC/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"生者孤独","uri":"https://samzong.me/%E7%94%9F%E8%80%85%E5%AD%A4%E7%8B%AC/#"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#1-测试环境"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#2-install-java-se-development-kit-7-jdk7"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#3-build-java-environment"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#4-download-tomcat7"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#5-create-a-script--use-service-manage-tomcat7"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#6-add-tomcat7-to-system-service"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#7-打开浏览器测试tomcat-server搭建完成默认页面如下"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#8-使用curl-测试"},{"categories":["Tomcat"],"content":" 本文件是采用的模板是CentOS 6，同样适用于CentOS 系列其他发行版本。 0.0.1 1. 测试环境 VMware Fushion 8 Pro # windows Use VirtualBox CentOS-6.8-x86_64-minimal.iso JDK 7 Tomcat 7 0.0.2 2. Install Java SE Development Kit 7 (JDK7) [root@ultraera ~]# curl -LO -H \"Cookie: oraclelicense=accept-securebackup-cookie\" \\ \"http://download.oracle.com/otn-pub/java/jdk/7u75-b13/jdk-7u75-linux-x64.rpm\" [root@ultraera ~]# rpm -Uvh jdk-7u75-linux-x64.rpm Preparing... ########################################### [100%] 1:jdk ########################################### [100%] Unpacking JAR files... rt.jar... jsse.jar... charsets.jar... tools.jar... localedata.jar... jfxrt.jar... 0.0.3 3. Build Java Environment. [root@ultraera ~]# vi /etc/profile # add follows to the end export JAVA_HOME=/usr/java/default export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar [root@ultraera ~]# source /etc/profile [root@ultraera ~]# java -version java version \"1.7.0_75\" Java(TM) SE Runtime Environment (build 1.7.0_75-b13) Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode) 0.0.4 4. Download Tomcat7Make sure the latest one and download it from the site below. =》 http://ftp.riken.jp/net/apache/tomcat/tomcat-7/ [root@ultraera ~]# wget http://ftp.riken.jp/net/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# tar zxvf apache-tomcat-7.0.70.tar.gz [root@ultraera ~]# mv apache-tomcat-7.0.70 /usr/tomcat7 [root@ultraera ~]# useradd -M -d /usr/tomcat7 tomcat7 [root@ultraera ~]# chown -R tomcat7. /usr/tomcat7 0.0.5 5. create a script , use service manage tomcat7 [root@ultraera ~]# cat /etc/rc.d/init.d/tomcat7 #!/bin/bash # Tomcat7: Start/Stop Tomcat 7 # # chkconfig: - 90 10 # description: Tomcat is a Java application Server. . /etc/init.d/functions . /etc/sysconfig/network CATALINA_HOME=/usr/tomcat7 TOMCAT_USER=tomcat7 LOCKFILE=/var/lock/subsys/tomcat7 RETVAL=0 start(){ echo \"Starting Tomcat7: \" su - $TOMCAT_USER -c \"$CATALINA_HOME/bin/startup.sh\" RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 touch $LOCKFILE return $RETVAL } stop(){ echo \"Shutting down Tomcat7: \" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? echo [ $RETVAL -eq 0 ] \u0026\u0026 rm -f $LOCKFILE return $RETVAL } case \"$1\" in start) start ;; stop) stop ;; restart) stop start ;; *) echo $\"Usage: $0 {start|stop|restart}\" exit 1 ;; esac exit $? 0.0.6 6. Add tomcat7 to system service [root@ultraera ~]# chmod 755 /etc/rc.d/init.d/tomcat7 [root@ultraera ~]# /etc/rc.d/init.d/tomcat7 start Starting Tomcat7: Using CATALINA_BASE: /usr/tomcat7 Using CATALINA_HOME: /usr/tomcat7 Using CATALINA_TMPDIR: /usr/tomcat7/temp Using JRE_HOME: /usr/java/default Using CLASSPATH: /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar Tomcat started. [root@ultraera ~]# netstat -ntlp | grep java tcp 0 0 ::ffff:127.0.0.1:8005 :::* LISTEN 6326/java tcp 0 0 :::8009 :::* LISTEN 6326/java tcp 0 0 :::8080 :::* LISTEN 6326/java [root@ultraera ~]# ps axu | grep java tomcat7 6326 8.3 85.6 5229768 2910176 ? Sl Aug22 3216:38 /usr/bin/java -Djava.util.logging.config.file=/usr/tomcat7/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -Djava.endorsed.dirs=/usr/tomcat7/endorsed -classpath /usr/tomcat7/bin/bootstrap.jar:/usr/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/usr/tomcat7 -Dcatalina.home=/usr/tomcat7 -Djava.io.tmpdir=/usr/tomcat7/temp org.apache.catalina.startup.Bootstrap start [root@ultraera ~]# chkconfig --add tomcat7 [root@ultraera ~]# chkconfig tomcat7 on 0.0.7 7. 打开浏览器测试Tomcat Server搭建完成，默认页面如下 0.0.8 8. 使用curl 测试 [root@ultraera ~]# curl -I http://localhost:8080 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Sun, 18 Sep 2016 11:14:06 GMT 0.0.9 9. Tomcat 文件树 [root@ultraera /usr/tomcat7]# tree . ├── bin │ ├── bootstrap.jar │ ├── catalina.bat │ ├── catalina.sh │ ├── catalina-tasks.xml │ ├── commons-daemon.jar │ ├── commons-daemon-native.tar.gz │ ├── configtest.bat │ ├── config","date":"2016-09-19","objectID":"https://samzong.me/howto-install-a-tomcat-server-7/:0:0","series":null,"tags":["Tomcat"],"title":"HowTo Install a Tomcat Server 7","uri":"https://samzong.me/howto-install-a-tomcat-server-7/#9-tomcat-文件树"},{"categories":null,"content":"现在时间凌晨2点多，已经记不得这是第几个凌晨2点还没睡觉了，好像早睡已经是很久远的事情了，看书学习，刷视频，发呆，玩手机平板，总之不想睡觉；花在睡觉上的时间越来越少，感觉，其实挺累的，生活在大都市里啊，忙碌工作生活奔波，总感觉时间不够用，要做的事情太多，你总要面对很多事情和责任，与人相处；我很努力么，也不那么见得，一旦你成为这个社会一员，总有人或事再推着你前进，在你耳边脑海嚷嚷着不要停，不要停啊！ 每年生日的时候，都会给自己写点东西，回首曾经的岁月又多了一年，我不知道这个习惯会坚持到什么时候，或许写着写着就不想写了，或者自己落入庸俗的圈套，不敢回首过往岁月；我一直坚持的，就是希望在将来回望曾经岁月时不会面带羞愧，我没想过自己会有怎么牛逼的人生，如果回想起今天能觉得，哎哟，不错哦，那就很好了啊；我会坚持去自己想做的事，年岁在增长，不忘初心；就像，这个我喜欢啊，嗯，那就坚持下去咯。 早上醒来的时候，收到前女友的“生日快乐”，挺意外的，然后感动；中午收到爸妈姐姐姐夫外甥的祝福，觉得自己好幸福啊，感恩这些在乎我的人，我爱他们，我想这些会是我生活的动力；今年的生日和往常一样，没有庆祝，我性格不太喜欢仪式感很强烈的事情，没有太多的心思，过的开心就好了，费那么大劲折腾犯不着，生活就是这样。 今年好像没什么好说的，工作没换，现在单位还不错，有自己努力的方向，领导也重视，比之去年也有提升，唯一的感觉就是时间不够用，要学习的东西太多了，但是还学的进去，这一点我很满足，接下来的一年要坚持下去；学业学习上来说，去年报的上外英本，今年上半年都没去上课了，虽然不是翘课，但是关心的力度不够，抽个时间要去趟学校，跟班主任聊聊接下来的学习规划，毕竟还是要考试的；生活上呢，终于感觉到我是爸妈亲生的了啊喂，超幸福美满，这个没得说，还有一个优秀的妹妹，作为谈心的伙伴和学习的榜样也是十分满足；不过，与朋友相处这块近期有些糟糕，这个要好好检讨，以后在这方面要更加成熟；总之目标啊就是努力挣钱啊挣钱啊，上海买房啊买房啊，虽然这座城市生活着挺辛苦的，但是我爱它，所以我要留在这里；至于恋爱结婚什么的，没什么进展也没什么打算，总之先努力工作，努力生活咯。 还是和往年一样，自己从奶奶去世，我一直不喜欢过节，还是会想念她，不愿意听别人提及她，工作累了，与人相处不融洽的时候，很多时候，我都会想起她，想起小时候，为我遮风挡雨，是我最温暖最踏实的依靠，生活虽然艰辛，但那是我一生最快乐的时光，教我做人做事，让我努力，支持我鼓励我教训我，可是我却未能报答这份恩情，每次清明节回去，望着那座坟墓，总是还想听听您喊我的名字；所以呢，我要努力过好自己的人生，才能对得起奶奶的期望，人生的努力，终有一个理由。 好了，接下来要开始走向25岁了。 ","date":"2016-08-19","objectID":"https://samzong.me/%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%B2%81/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"二十四岁","uri":"https://samzong.me/%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%B2%81/#"},{"categories":["Linux","Shell"],"content":" #!/bin/bash # if [[ $1 == \"uninstall\" ]];then echo \"starting backup data...\" mkdir -p /www/backup service mysqld stop service nginxd stop service httpd stop service wdapache stop service pureftpd stop tar zcvf /www/backup/mysqldatdbk.tar.gz /www/wdlinux/mysql/var tar zcvf /www/backup/ngconfbk.tar.gz /www/wdlinux/nginx/conf tar zcvf /www/backup/apconfbk.tar.gz /www/wdlinux/apache/conf rpm -e lanmp_wdcp --nodeps rm -fr /www/wdlinux echo echo \" lanmp,wdcp remove is OK\" echo exit 0 fi echo \"Turn off selinux...\" setenforce 0 sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config sed -i 's/^exclude=/#exclude=/g' /etc/yum.conf yum install -y gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel patch libmcrypt-devel libmhash-devel ncurses-devel sudo bzip2 iptables sendmail iptables unzip #echo \"Check the network...\" #ping -c 2 113.105.167.1 #if [[ $? != 0 ]];then # echo # echo \"network err\" # exit 1 #fi ping -c 3 dl.wdlinux.cn if [[ $? == 2 ]];then echo echo \"dns error\" exit 1 fi if [[ ! -d /www/wdlinux ]];then echo echo \"rpm remove...\" rpm -e php --nodeps rpm -e httpd --nodeps rpm -e mysql-server --nodeps rpm -e mysql --nodeps fi echo \"yum update...\" yum install -y make autoconf sudo wget libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel patch libmcrypt-devel libmhash-devel ncurses-devel iptables arch=i386 Aurl=\"http://dl.wdlinux.cn:5180/rpms\" if [[ `uname -m` == \"x86_64\" ]];then arch=\"x86_64\" fi function in_finsh { echo echo \" configuration ,lamp or lnmp,wdcp install is finshed\" echo \" visit http://ip\" echo \" wdcp visit http://ip:8080\" echo \" more infomation please visit http://www.wdlinux.cn\" echo } function in_check { if [[ $1 == 1 ]];then echo echo \"============ $2 install error =============\" echo exit 1 else echo echo \"============ $2 install OK ==============\" echo echo fi } grep -E 'wdOS 1|5\\.' /etc/redhat-release \u003e /dev/null 2\u003e\u00261 v1=$? grep -E 'wdOS 2|6\\.' /etc/redhat-release \u003e /dev/null 2\u003e\u00261 v2=$? if [ $v1 == 0 ];then RF=\"lanmp_wdcp-2-5.$arch.rpm\"; elif [ $v2 == 0 ];then RF=\"lanmp_wdcp-2-5.el6.$arch.rpm\"; if [ $arch == \"x86_64\" ];then wget -c http://dl.wdlinux.cn:5180/soft/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm rpm -ivh rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm else wget -c http://dl.wdlinux.cn:5180/soft/rpmforge-release-0.5.2-2.el6.rf.i686.rpm rpm -ivh rpmforge-release-0.5.2-2.el6.rf.i686.rpm fi yum install -y mhash-devel libmcrypt-devel else echo echo \"The current system does not support\" echo exit fi wget -c http://dl.wdlinux.cn:5180/rpms/$RF rpm -ivh $RF --nodeps I_F=$? if [ $I_F == 0 ];then echo fi in_check $I_F lanmp_wdcp rm -f wdcp_v* wget -c http://down.wdlinux.cn/down/wdcp_v2.5.tar.gz \u003e /dev/null 2\u003e\u00261 tar zxvf wdcp_v2.5.tar.gz -C / \u003e /dev/null 2\u003e\u00261 in_finsh ","date":"2016-08-13","objectID":"https://samzong.me/script-install-lnmp/:0:0","series":null,"tags":["Shell","CentOS"],"title":"Script Install LNMP","uri":"https://samzong.me/script-install-lnmp/#"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#介绍"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#实验环境"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#环境检测"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#安装"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#1-在所有节点编辑etchosts"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#2-在所有node上安装-mariadb-galera"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#3-在其中一个节点上编辑etcmycnfdservercnf配置文件"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#4-在其它节点上编辑etcmycnfdservercnf配置文件"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#node5"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#node6"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#登陆各个节点数据库检查配置是否成功"},{"categories":["数据库","MySQL"],"content":" 0.0.1 介绍         MariaDB Galera Cluster 是一套在MySQL InnoDB存储引擎上面实现multi-master及数据实时同步的系统架构，业务层面无需做读写分离工作，数据库读写压力都能按照既定的规则分发到 各个节点上去。在数据方面完全兼容 MariaDB 和 MySQL。使用MariaDB Galera的解决方案，可以方便快速的搭建出高可用的数据库Cluster，不是主备模式，而是双活模式，也就是说，没有主节点和备份节点，每个节点都可以看做是主节点，都可以进行读写，由Galera来实现底层的数据同步。 真正的多主架构，任何节点都可以进行读写 同步复制，各节点间无延迟且节点宕机不会导致数据丢失 紧密耦合，所有节点均保持相同状态 自动节点配置，无需手工备份当前数据库并拷贝至新节点 0.0.2 实验环境 Cluster node4 IP address 172.16.102.168 Cluster node5 IP address 172.16.102.165 Cluster node6 IP address 172.16.102.164 setenforce 0；sed -i ’s/SELINUX=enforcing/SELINUX=disabled/’ /etc/selinux/config /etc/init.d/iptables stop;chkconfig iptables off 使用vmware 测试需注意:克隆机器需要删除 /etc/udev/rules.d/70-persistent-net.rules 以及/etc/sysconfig/network-scripts/ifcfg-eth0中的网卡mac地址选项，不然网卡起不来 0.0.3 环境检测 检查iptables状态：/etc/init.d/iptables status;chkconfig –list | grep iptables 检查selinux状态：getenforce 检查openssh-client包是否安装：系统中是否有ssh命令 检查是否系统中含有mysql相关的包：rpm -qa | grep mysql，有的话都需要卸载掉 检查网络是否通畅：ping www.baidu.com 0.0.4 安装 0.0.4.1 1. 在所有节点编辑/etc/hosts [root@node4 ~]# vi /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 # add follows 172.16.102.164 node6 172.16.102.165 node5 172.16.102.168 node4 [root@node4 ~]# # 依次在node5和node6上编辑/etc/hosts 0.0.4.2 2. 在所有node上安装 MariaDB Galera [root@node4 ~]# vi /etc/yum.repos.d/mariadb.repo # MariaDB 10.0 CentOS repository list # http://mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 enabled=0 [root@node4 ~]# yum --enablerepo=mariadb -y install MariaDB-Galera-server # 依次在node5和node6上安装 MariaDB-Galera-server 注意安装完成之后，不要启动mysql 0.0.4.3 3. 在其中一个节点上编辑/etc/my.cnf.d/server.cnf配置文件 [root@node4 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # own IP address wsrep_node_address=\"172.16.102.168\" wsrep_node_name=\"node4\" # 启动数据库 [root@node4 ~]# /etc/rc.d/init.d/mysql bootstrap Starting MySQL. SUCCESS! # 初始化你的数据库 [root@node4 ~]# mysql_secure_installation 0.0.4.4 4. 在其它节点上编辑/etc/my.cnf.d/server.cnf配置文件 0.0.4.5 node5 [root@node5 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.165\" wsrep_node_name=\"node5\" # 启动数据库 [root@node5 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 0.0.4.6 node6 [root@node6 ~]# vi /etc/my.cnf.d/server.cnf # 19 行，取消下面的注释，并修改为需求 [galera] wsrep_provider=/usr/lib64/galera/libgalera_smm.so # 指定节点地址，这里也可以使用ip,如果没做安装1，可以直接把cluster的ip写在这里。 wsrep_cluster_address=\"gcomm://node4,node5,node6\" binlog_format=row default_storage_engine=InnoDB innodb_autoinc_lock_mode=2 bind-address=0.0.0.0 # add follows # cluster name wsrep_cluster_name=\"Visionet_MariaDB_Cluster\" # replication provider wsrep_sst_method=rsync # 以下内容注意，注意应设置为当前服务器信息 wsrep_node_address=\"172.16.102.164\" wsrep_node_name=\"node6\" # 启动数据库 [root@node6 ~]# /etc/rc.d/init.d/mysql start Starting MySQL...SST in progress, setting sleep higher. SUCCESS! 注意：只需要初始化第一个节点服务器的数据库，其他数据的配置文件会自动同步，所以你给node4设置的root可以在node5和node6直接使用，当然这是安装正确的前提。 0.0.5 登陆各个节点数据库检查配置是否成功 server.cnf的配置如果没有问题，那么wsrep_local_state_comment的状态应该是Synced。 [root@no","date":"2016-08-04","objectID":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/:0:0","series":null,"tags":["MariaDB","CentOS"],"title":"HowTo Setup MariaDB Galera Cluster 10 On CentOS 6.x","uri":"https://samzong.me/howto-setup-mariadb-galera-cluster-10-on-centos-6-x/#结论"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#install-centos-6x-x86_64"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#安装依赖软件"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#下载openfire-38-到本地"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#安装openfire-38"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#设置服务开启自启动"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#yum-install-mysql-server"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#创建openfire数据库"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#启动openfire"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#之后的初始化步骤请根据实际操作注意设定数据库地址用户名和密码时不要出错"},{"categories":["Linux","CentOS"],"content":" 0.0.1 Install Centos 6.x x86_64略. 0.0.2 安装依赖软件 yum -y install wget java glibc.i686 0.0.3 下载openfire 3.8 到本地 wget http://download.igniterealtime.org/openfire/openfire-3.8.1-1.i386.rpm 0.0.4 安装openfire 3.8 yum -y install ./openfire*rpm 0.0.5 设置服务开启自启动 chkconfig openfire on 0.0.6 Yum Install mysql-server详见： How to Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7 0.0.7 创建openfire数据库 mysql -u root -p create database openfire character set utf8; grant all privileges on openfire.* to 'openfire'@'127.0.0.1' identified by 'openfire' with grant option; 0.0.8 启动openfire http://Host:9090 0.0.9 之后的初始化步骤，请根据实际操作，注意设定数据库地址用户名和密码时不要出错 0.0.10 FAQopenfire安装完毕后无法登录控制台 报错：Login failed:make sure your username and password are correct and that you’re an admin or moderator 解决方案如下： 1.使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行该SQL INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES ('admin', 'admin', 'Administrator', 'admin@example.com', '0', '0'); 2.关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可 openfire 进程无法启动 报错：nohup: failed to run command `/opt/openfire/jre/bin/java': No such file or directory 解决方案如下： 经检查是由于openfire未能正确识别jre环境变量导致，安装时自带的jre是32位，但操作系统却是64位操作平台。 ，故在/etc/init.d/openfire的启动脚本修改， JAVA_HOME=\"/usr/lib/jvm/jre-$VERSION.x86_64\" ","date":"2016-08-02","objectID":"https://samzong.me/howto-install-openfire-on-centos/:0:0","series":null,"tags":["Openfire"],"title":"HowTo Install Openfire  on CentOS","uri":"https://samzong.me/howto-install-openfire-on-centos/#faq"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#1-安装centos-7x"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#2-安装docker"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#3-基础docker命令"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#4-运行一个docker镜像"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#进入交互式程序"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#5-编辑dockerfile"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#6-生成自定义docker镜像"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#7-ssh登陆到docker容器内部署项目环境"},{"categories":["虚拟化","Docker"],"content":" 0.0.1 1. 安装CentOS 7.x略。 0.0.2 2. 安装docker详见： How to Install Docker on CentOS 6.x 0.0.3 3. 基础docker命令 ＃ 获取centos6 docker镜像 [root@docker ~]# docker pull centos6 Using default tag: latest latest: Pulling from library/centos:centos6 43db9dbdcb30: Downloading 41.14 MB/49.33 MB 43db9dbdcb30: Pull complete 2dc64e8f8d4f: Pull complete 670a583e1b50: Pull complete 183b0bfcd10e: Pull complete Digest: sha256:c6674c44c6439673bf56536c1a15916639c47ea04c3d6296c5df938add67b54b Status: Downloaded newer image for centso:centos6 ＃ 查看当前服务器上的docker镜像 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB ＃ 查找docker镜像 [root@docker ~]# docker search centos:centos6 NAME DESCRIPTION STARS OFFICIAL AUTOMATED imagine10255/centos6-lnmp-php56 centos6-lnmp-php56 10 [OK] lemonbar/centos6-ssh Installed openssh-server on centos6, defau... 7 [OK] sergeyzh/centos6-nginx 2 [OK] guyton/centos6 From official centos6 container with full ... 2 [OK] paijp/centos6-apache-php-sqlite2 php5.3.3 with sqlite2 and apache on CentOS... 1 [OK] edrans/centos6 1 [OK] mohri1219/centos6.7-ruby2.2.2-mysql5.6 centos6.7-ruby2.2.2-mysql5.6 1 [OK] ... ... ＃ 删除 centos6 docker镜像 [root@docker ~]# docker rmi IMAGES_NAME [root@docker ~]# docker rmi centos:centos6 # 报错无法删除 Error response from daemon: conflict: unable to remove repository reference \"centos\" (must force) - container 705a30cbc002 is using its referenced image 42118e3df429 # 这是因为之间的运行的进程没有清楚导致该images正在使用中，使用一下命令查看占有的进程 [root@docker ~]# docker ps -a ＃ 查看所有的docker进程 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 705a30cbc002 centos:centos6 \"/bin/bash\" 6 minutes ago Exited (0) 6 minutes ago centos6 [root@docker ~]# docker rm 705a30cbc002 705a30cbc002 [root@docker ~]# docker rmi centos:centos6 Untagged: centos:centos6 Deleted: sha256:42118e3df429f09ca581a9deb3df274601930e428e452f7e4e9f1833c56a100a Deleted: sha256:d72d0199021776e77ac14a764a3decd156e9f6f18b37e25b867b0f1ca42fb3d9 Deleted: sha256:fb178c6cea1453d089ce033b96eba0efdb42274138e042517ea2d5ea7bb51665 Deleted: sha256:8945af30572845a904adce2aeaf73402c842d86e99e8f10688b25cb27834110b Deleted: sha256:ea9f151abb7e06353e73172dad421235611d4f6d0560ec95db26e0dc240642c1 0.0.4 4. 运行一个docker镜像 0.0.5 进入交互式程序 [root@docker ~]# docker run -it centos:centos6 /bin/bash [root@c1d190f95562 /]# cat /etc/redhat-release CentOS release 6.8 (Final) # Install openssh-server and httpd root@d8c122dbe09d:/# yum install -y openssh-sever httpd root@d8c122dbe09d:/# exit # 注意当你执行exit，从容器之中退出时，容器也会随着关闭，这时如果还继续执行上条命令 # 你会发现之前所有的操作都被还原，因为相对于docker，又是新开了一个进程 # 在exit退出之后，使用一下命令查看上次提交，然后commit修改，便可保存之前的修改 [root@docker ~]# docker ps -l [root@docker ~]# docker commit c1d190f95562 centos:centos6-httpd sha256:77eb12e36c7bbe9ef874555b1873019022b5258740aa731627e2cd6fa749c325 [root@docker ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE centos centos6-httpd 77eb12e36c7b 3 seconds ago 290.3 MB centos6-visionet latest aeed37612ecb 6 hours ago 1.916 GB centos centos6 a3c09d36ab4a 2 days ago 194.6 MB registry latest c6c14b3960bd 3 days ago 33.28 MB 0.0.6 5. 编辑Dockerfile # dockfile的第一行一定是FROM，指定了父镜像 FROM centos:centos6 # RUN 指的是运行的命令 RUN yum install -y epel-release RUN yum install -y bash-completion RUN yum install -y openssh-server openssh-client sudo RUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 增加一个用户，并赋予sudo权限 RUN useradd visionet RUN echo \"visionet:visionet\" | chpasswd RUN echo \"visionet ALL=(ALL) ALL\" \u003e\u003e /etc/sudoers ＃ 注意，如果没有执行一下两个命令，sshd是无法远程登陆的 RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key ＃ EXPOSE 22， 将22端口暴露出来，方便ssh远程连接 RUN mkdir /var/run/sshd EXPOSE 22 ＃ CMD 为系统内部执行命令 CMD [\"/usr/sbin/sshd\", \"-D\"] 0.0.7 6. 生成自定义docker镜像 # build 编译镜像 [root@docker ~]# docker build -f dockerfile3 -t centos:centos6-ssh . Sending build ","date":"2016-08-02","objectID":"https://samzong.me/howto-use-docker-create-a-tomcat-project/:0:0","series":null,"tags":["Docker"],"title":"HowTo Use Docker create a Tomcat Project","uri":"https://samzong.me/howto-use-docker-create-a-tomcat-project/#8-推送centoscentos6-tomcat到私有docker仓库"},{"categories":null,"content":"还剩不到1小时就要进入8月，也许写完这篇文章就已经8月，我其实不擅长写作文，自小如此，所以每次都是特别慢；时间慢慢流逝，听着音乐，随心所致，大概也是件快乐的事情吧。 定期自省己身，所行之事，所思之虑，有则改之，无则勉之，坚守吾心，戒嗔戒躁，自打懂得事理之后，便妄以此法施加吾身，奈何小子年幼，定力不坚，常因一时欢愉便抛诸脑后，事后便懊悔不已；虽言，生而为人，便逃不过七情六欲加身，然，时时自省吾身，常思吾之过，常念德行事，方可为人；撰此文，便是警醒己身。 犯错并不是一件可怕的事儿，从小做了不知多少混账事，也没见的把天捅破，可见，所谓捅破天也不是件容易的事儿；首先是工作上的失职，自今年年初，开始搭建自身的团队班子，虽然只有三三两两人，刚开始做小头头，我并没有正确认识到自己的责任，在完成本职工作的同时，也要照顾底下的员工，不光是工作安排，还有学习成长，很多事情吩咐下去之后，自己又要去检查，弄的比自己一人工作时还要劳累；之后，连着手下两名员工都离职了，我开始反省自己，从招聘到工作分配到培养，头大如斗，深感做领导的不易。公司因装修改造，扩展一个会议室，我自己怕麻烦，便将工作推给一个员工，却未考虑他的自身的能力，导致原本清晰简单的事，拖拖拉拉2个月才算弄完，还害得这名员工离职，对行政部门的工作也造成了影响，经此事之后，发觉自身管理能力十分不足。另一事，公司微软云资源的账单，之前一人工作时制定的账单每月资源消耗账单，但是由于后将该事务分配与他人，导致最后帐不对本，弄巧成拙，最后还是花费大量时间，重新制作了所有的账单，问题在于自身没有将事务认真贯彻执行下去，而且任务甩出手之后，缺乏关心。另有很多这样大大小小之事，十分头疼，真应该好好学学如何做一个好领导。 我不太会写叙述的文章，前面一段文字，自己看着都揪心，也是那些复杂的事儿都过去了，才能有闲工夫来写这些东西，两个助手离职之后，拉来之前同事过来帮忙，现在事情都在往好的方向发展，一点点在建立规则，接下来的工作和学习的重心都会放在大数据上，实在的事是公司给了我很好的学习机会，在这家公司也成长了非常的多，感谢的话言之不尽，唯有努力工作方可回报。 谈下关于博客，最近找了一个漂亮的主题，所以一直在折腾怎么弄好看，感觉有点逾越了当初创建博客的初衷；所以，接下来的时间，要整理之前的博文，对知识进行梳理，好记性不如烂笔头，用XMind做思维导图，TodoList工具计划任务清单，博客记录学习内容FAQ等，一直认为好的学习方法才能达到事半功倍的效果，要加快成长，每次参加一些培训和技术的研讨会，都恨不得自己早生十年。 谈下关于减肥，首先这肯定是一个永恒无止尽的话题，之前这段时间因为工作上的乱七八糟导致每天下班时间都到9-10多点钟，再加上公司到家地铁要1小时，所以健身房也一直没去，再加上饮食不规律，体重又回升到了可怕85KG，8月开始，要认真去健身了，该吃吃，该练练，目标体重75KG。 ","date":"2016-08-01","objectID":"https://samzong.me/%E4%BD%A0%E5%A5%BD%E5%85%AB%E6%9C%88/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"你好，八月","uri":"https://samzong.me/%E4%BD%A0%E5%A5%BD%E5%85%AB%E6%9C%88/#"},{"categories":["Blog","Ghost"],"content":"纠正下，在下面博文中的错误，关于单曲不能生成外链的问题，现已经纠正。 我试过百度音乐、QQ音乐、虾米音乐和网易云音乐，目前只有网易云音乐有此功能，先在网易云音乐选择歌曲即可： 0.0.1 分享单曲 0.0.2 分享专辑，歌单        **选定歌单之后，在歌单页面有个生成外链播放器的按钮**        **然后，根据页面提示信息，生成你要的html代码，并嵌入到你的页面之中。** ","date":"2016-08-01","objectID":"https://samzong.me/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%8F%92%E5%85%A5%E6%AD%8C%E6%9B%B2/:0:0","series":null,"tags":["Ghost"],"title":"在网页中插入歌曲","uri":"https://samzong.me/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%8F%92%E5%85%A5%E6%AD%8C%E6%9B%B2/#"},{"categories":["Blog","Ghost"],"content":"纠正下，在下面博文中的错误，关于单曲不能生成外链的问题，现已经纠正。 我试过百度音乐、QQ音乐、虾米音乐和网易云音乐，目前只有网易云音乐有此功能，先在网易云音乐选择歌曲即可： 0.0.1 分享单曲 0.0.2 分享专辑，歌单        **选定歌单之后，在歌单页面有个生成外链播放器的按钮**        **然后，根据页面提示信息，生成你要的html代码，并嵌入到你的页面之中。** ","date":"2016-08-01","objectID":"https://samzong.me/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%8F%92%E5%85%A5%E6%AD%8C%E6%9B%B2/:0:0","series":null,"tags":["Ghost"],"title":"在网页中插入歌曲","uri":"https://samzong.me/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%8F%92%E5%85%A5%E6%AD%8C%E6%9B%B2/#分享单曲"},{"categories":["Blog","Ghost"],"content":"纠正下，在下面博文中的错误，关于单曲不能生成外链的问题，现已经纠正。 我试过百度音乐、QQ音乐、虾米音乐和网易云音乐，目前只有网易云音乐有此功能，先在网易云音乐选择歌曲即可： 0.0.1 分享单曲 0.0.2 分享专辑，歌单        **选定歌单之后，在歌单页面有个生成外链播放器的按钮**        **然后，根据页面提示信息，生成你要的html代码，并嵌入到你的页面之中。** ","date":"2016-08-01","objectID":"https://samzong.me/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%8F%92%E5%85%A5%E6%AD%8C%E6%9B%B2/:0:0","series":null,"tags":["Ghost"],"title":"在网页中插入歌曲","uri":"https://samzong.me/%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%8F%92%E5%85%A5%E6%AD%8C%E6%9B%B2/#分享专辑歌单"},{"categories":["Linux","CentOS"],"content":" 1. 1. CentOS 6.xCentOS 6 上是默认打开了IPv6，但其实在我们实际使用中很难用到它，所以本篇的内容就是如何关闭IPv6。 ＃ 可以看到 inet6 ，说明还没关闭。 [root@ultraera ~]# ifconfig eth0 eth0 Link encap:Ethernet HWaddr 00:0C:29:3A:F9:6F inet addr:172.16.102.161 Bcast:172.16.102.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:fe3a:f96f/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:199 errors:0 dropped:0 overruns:0 frame:0 TX packets:122 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:20124 (19.6 KiB) TX bytes:17182 (16.7 KiB) ＃ 修改/etc/modprobe.d/dist.conf [root@ultraera ~]# vi /etc/modprobe.d/dist.conf # 添加下面两行内容 alias net-pf-10 off alias ipv6 off # 保存退出，并且重新启动系统 # 开机不启动 [root@ultraera ~]# chkconfig ip6tables off ＃ 系统重启完成后，检查是否加载IPv6 [root@ultraera ~]# lsmod | grep v6 ＃ 补充 修改/etc/sysconfig/network，追加 NETWORKING_IPV6=no 修改/etc/hosts文件，把ipv6的那句本地主机名解析的也注释掉 #::1 localhost localhost6 localhost6.localdomain6 ","date":"2016-07-29","objectID":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/:1:0","series":null,"tags":["CentOS"],"title":"HowTo Trun Off IPv6 in CentOS 6.x","uri":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/#1-centos-6x"},{"categories":["Linux","CentOS"],"content":" 2. 2. CentOS 7.x 2.0.1 Setup 1. 修改grub文件，在启动引导时不加载ipv6 [root@ultraera ~]# vim /etc/default/grub # 在GRUB_CMDLINE_LINUX=\" \" ,中增加 ipv6.disable＝1 # 重新生产启动引导文件，注意，这里重启系统是没用的，需要手动重建引导文件 [root@ultraera ~]# grub2-mkconfig -o /boot/grub2/grub.cfg [root@ultraera ~]# reboot ＃ 验证是否关闭 [root@ultraera ~]# lsmod | grep ipv6 2.0.2 Setup 2. 第二种方式 # 修改/etc/sysctl.conf,增加以下： net.ipv6.conf.all.disable_ipv6 = 1 reboot IPv6是默认支持的，所以当你要重新开起IPv6支持时，将以上添加的指令注释掉即可。 之前碰到过安装某些服务时，不能启动，后来检查原因是因为关闭ipv6的问题，因为在这些服务的conf文件，指定了类似监听ipv6,因为关闭了ipv6导致服务无法启动，将其关闭即可。 ","date":"2016-07-29","objectID":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/:2:0","series":null,"tags":["CentOS"],"title":"HowTo Trun Off IPv6 in CentOS 6.x","uri":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/#2-centos-7x"},{"categories":["Linux","CentOS"],"content":" 2. 2. CentOS 7.x 2.0.1 Setup 1. 修改grub文件，在启动引导时不加载ipv6 [root@ultraera ~]# vim /etc/default/grub # 在GRUB_CMDLINE_LINUX=\" \" ,中增加 ipv6.disable＝1 # 重新生产启动引导文件，注意，这里重启系统是没用的，需要手动重建引导文件 [root@ultraera ~]# grub2-mkconfig -o /boot/grub2/grub.cfg [root@ultraera ~]# reboot ＃ 验证是否关闭 [root@ultraera ~]# lsmod | grep ipv6 2.0.2 Setup 2. 第二种方式 # 修改/etc/sysctl.conf,增加以下： net.ipv6.conf.all.disable_ipv6 = 1 reboot IPv6是默认支持的，所以当你要重新开起IPv6支持时，将以上添加的指令注释掉即可。 之前碰到过安装某些服务时，不能启动，后来检查原因是因为关闭ipv6的问题，因为在这些服务的conf文件，指定了类似监听ipv6,因为关闭了ipv6导致服务无法启动，将其关闭即可。 ","date":"2016-07-29","objectID":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/:2:0","series":null,"tags":["CentOS"],"title":"HowTo Trun Off IPv6 in CentOS 6.x","uri":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/#setup-1-修改grub文件在启动引导时不加载ipv6"},{"categories":["Linux","CentOS"],"content":" 2. 2. CentOS 7.x 2.0.1 Setup 1. 修改grub文件，在启动引导时不加载ipv6 [root@ultraera ~]# vim /etc/default/grub # 在GRUB_CMDLINE_LINUX=\" \" ,中增加 ipv6.disable＝1 # 重新生产启动引导文件，注意，这里重启系统是没用的，需要手动重建引导文件 [root@ultraera ~]# grub2-mkconfig -o /boot/grub2/grub.cfg [root@ultraera ~]# reboot ＃ 验证是否关闭 [root@ultraera ~]# lsmod | grep ipv6 2.0.2 Setup 2. 第二种方式 # 修改/etc/sysctl.conf,增加以下： net.ipv6.conf.all.disable_ipv6 = 1 reboot IPv6是默认支持的，所以当你要重新开起IPv6支持时，将以上添加的指令注释掉即可。 之前碰到过安装某些服务时，不能启动，后来检查原因是因为关闭ipv6的问题，因为在这些服务的conf文件，指定了类似监听ipv6,因为关闭了ipv6导致服务无法启动，将其关闭即可。 ","date":"2016-07-29","objectID":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/:2:0","series":null,"tags":["CentOS"],"title":"HowTo Trun Off IPv6 in CentOS 6.x","uri":"https://samzong.me/howto-trun-off-ipv6-in-centos-6-x/#setup-2-第二种方式"},{"categories":["虚拟化"],"content":"生产环境的KVM宿主机越来越多，需要对宿主机的状态进行调控。这里用webvirtmgr进行管理。图形化的WEB，让人能更方便的查看kvm 宿主机的情况和操作. GitHub Project. ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:0","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#install"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#安装支持的软件源"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#安装相关软件"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#从git-hub中下载相关的webvirtmgr代码"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#安装webvirtmgr"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#安装数据库"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#对django进行环境配置"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#拷贝web到-相关目录"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#设置ssh"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#编辑nginx配置文件"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#启动nginx"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#修改防火墙规则--如果关闭selinux此步可省略"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#设置-supervisor"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#设置开机启动"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#启动进程"},{"categories":["虚拟化"],"content":" 0.1 Install 0.1.1 安装支持的软件源 yum install -y epel-release 0.1.2 安装相关软件 yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx 0.1.3 从git-hub中下载相关的webvirtmgr代码 cd /usr/local/src/ git clone git://github.com/retspen/webvirtmgr.git 0.1.4 安装webvirtmgr cd webvirtmgr/ pip install -r requirements.txt 0.1.5 安装数据库 yum install python-sqlite2 0.1.6 对django进行环境配置 ./manage.py syncdb You just installed Django's auth system, which means you don't have any superusers defined. Would you like to create one now? (yes/no): yes Username (leave blank to use 'root'): admin Email address: luchuanjia@msn.com Password:********* Password (again):********* ./manage.py collectstatic #生成配置文件 ./manage.py createsuperuser #添加管理员账号 0.1.7 拷贝web到 相关目录 cd .. rm -rf /var/www mkdir -pv /var/www cp -Rv webvirtmgr /var/www/webvirtmgr 0.1.8 设置ssh ssh-keygen ssh-copy-id 192.168.2.32 ssh 192.168.2.32 -L localhost:8000:localhost:8000 -L localhost:6080:localhost:6080 0.1.9 编辑nginx配置文件 mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak vim /etc/nginx/conf.d/webvirtmgr.conf #添加下面内容到文件中 server { listen 80 default_server; server_name $hostname; #access_log /var/log/nginx/webvirtmgr_access_log; location /static/ { root /var/www/webvirtmgr/webvirtmgr; # or /srv instead of /var expires max; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-for $proxy_add_x_forwarded_for; proxy_set_header Host $host:$server_port; proxy_set_header X-Forwarded-Proto $remote_addr; proxy_connect_timeout 600; proxy_read_timeout 600; proxy_send_timeout 600; client_max_body_size 1024M; # Set higher depending on your needs } } 0.1.10 启动nginx service nginx start 0.1.11 修改防火墙规则 ( 如果关闭selinux，此步可省略) /usr/sbin/setsebool httpd_can_network_connect true 0.1.12 设置 supervisor chown -R nginx:nginx /var/www/webvirtmgr vim /etc/supervisord.conf #在文件末尾添加 [program:webvirtmgr] command=/usr/bin/python /var/www/webvirtmgr/manage.py run_gunicorn -c /var/www/webvirtmgr/conf/gunicorn.conf.py directory=/var/www/webvirtmgr autostart=true autorestart=true logfile=/var/log/supervisor/webvirtmgr.log log_stderr=true user=nginx [program:webvirtmgr-console] command=/usr/bin/python /var/www/webvirtmgr/console/webvirtmgr-console directory=/var/www/webvirtmgr autostart=true autorestart=true stdout_logfile=/var/log/supervisor/webvirtmgr-console.log redirect_stderr=true user=nginx 修改/var/www/webvirtmgr/conf/gunicorn.conf.py bind = \"0:8000\" 0.1.13 设置开机启动 chkconfig supervisord on chkconfig nginx on vim /etc/rc.local /usr/sbin/setsebool httpd_can_network_connect true 0.1.14 启动进程 service nginx start service supervisord start 0.1.15 访问 http://$server_ip/login/ ","date":"2016-07-27","objectID":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/:0:1","series":null,"tags":["KVM"],"title":"HowTo Install KVM Manage Server webvirtmgr","uri":"https://samzong.me/howto-install-kvm-manage-server-webvirtmgr/#访问"},{"categories":["Linux","CentOS"],"content":" 0.0.1 查看/etc/yum.repos.d/CentOS-Base.repo [base] name=CentOS-$releasever - Base mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=os\u0026infra=$infra #baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/ gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 其实在日常使用之中，我们在很多地方，特别是脚本内看到了调用$releasever和$basearch $releasever的值,这个表示当前系统的发行版本 [root@ultraera /]# rpm -qi centos-release Name : centos-release Relocations: (not relocatable) Version : 6 Vendor: CentOS Release : 7.el6.centos.12.3 Build Date: Tue 04 Aug 2015 12:13:46 AM CST Install Date: Sat 21 May 2016 03:31:27 AM CST Build Host: c6b9.bsys.dev.centos.org Group : System Environment/Base Source RPM: centos-release-6-7.el6.centos.12.3.src.rpm Size : 35634 License: GPLv2 Signature : RSA/SHA1, Tue 04 Aug 2015 12:15:08 AM CST, Key ID 0946fca2c105b9de Packager : CentOS BuildSystem \u003chttp://bugs.centos.org\u003e Summary : CentOS release file Description : CentOS release files # 其中Version 6 就是我们的版本号 $basearch是我们的系统硬件架构(CPU指令集),就是我们常说的i386\\i486\\i586\\i686\\ [root@ultraera /]# arch i386 但是，当我在命令行查看是却发现$releasever和$basearch是空的。 Google 一下之后，说明Yum变量的说明可以在这里（5.3.3. Using Yum Variables）找到，说明如下： 5.3.3. Using Yum Variables You can use and reference the following built-in variables in yum commands and in all Yum configuration files (that is, /etc/yum.conf and all .repo files in the /etc/yum.repos.d/ directory): $releasever You can use this variable to reference the release version of Red Hat Enterprise Linux. Yum obtains the value of $releasever from the distroverpkg=value line in the /etc/yum.conf configuration file. If there is no such line in /etc/yum.conf, then yum infers the correct value by deriving the version number from the redhat-release package. $arch You can use this variable to refer to the system’s CPU architecture as returned when calling Python’s os.uname() function. Valid values for $arch include: i586, i686 and x86_64. $basearch You can use $basearch to reference the base architecture of the system. For example, i686 and i586 machines both have a base architecture of i386, and AMD64 and Intel64 machines have a base architecture of x86_64. $YUM0-9 These ten variables are each replaced with the value of any shell environment variables with the same name. If one of these variables is referenced (in /etc/yum.conf for example) and a shell environment variable with the same name does not exist, then the configuration file variable is not replaced. To define a custom variable or to override the value of an existing one, create a file with the same name as the variable (without the “$” sign) in the /etc/yum/vars/ directory, and add the desired value on its first line. For example, repository descriptions often include the operating system name. To define a new variable called $osname, create a new file with “Red Hat Enterprise Linux” on the first line and save it as /etc/yum/vars/osname: echo “Red Hat Enterprise Linux” \u003e /etc/yum/vars/osname Instead of “Red Hat Enterprise Linux 6”, you can now use the following in the .repo files: name=$osname $releasever 文中说到$releasever的定义可以查看 /etc/yum.conf 文件的事distroverpkg=value 行，打开 /etc/yum.conf 看一下，默认文件（我的是CentOS 6）内容如下： [main] cachedir=/var/cache/yum/$basearch/$releasever keepcache=0 debuglevel=2 logfile=/var/log/yum.log exactarch=1 obsoletes=1 gpgcheck=1 plugins=1 installonly_limit=5 bugtracker_url=http://bugs.centos.org/set_project.php?project_id=16\u0026ref=http://bugs.centos.org/bug_report_page.php?category=yum distroverpkg=centos-release distroverpkg=centos-release 代表什么？ 去哪找 centos-release 。找到这里我再一次表示困惑。 不过另一篇文章进行了我的视野： yum的$releasever真是太反动了， 关键内空如下： 在 /etc/yum.repos.d/ 目录下的软件库定义文件中，常常会在 baseurl 的路径中提到 $releasever 这个变量，表示当前发行版的大版本号，但大家知道这个变量是在哪设置的吗？我 grep 了整个 etc 目录都没找到，还是看了 yum.conf 才知道的，是在 yum.conf 文件里 distroverpkg 选项定义的。但这个选项就很有问题： distroverpkg 和 releasever 名字不同，且看不出什么联系 distroverpkg 的值，并不是明文，而是“redhat-release”。不知道大家看到这个会有什么想法，反正我是首先想到了 /etc/redhat-release 文件，但我错了。实际上指的是 redhat-release 这个RPM包。所谓“dist","date":"2016-07-27","objectID":"https://samzong.me/yum%E4%B8%AD-releasever%E5%92%8C-basearch%E7%9A%84%E5%8F%96%E5%80%BC/:0:0","series":null,"tags":["Yum"],"title":"Yum中$releasever和$basearch的取值","uri":"https://samzong.me/yum%E4%B8%AD-releasever%E5%92%8C-basearch%E7%9A%84%E5%8F%96%E5%80%BC/#"},{"categories":["Linux","CentOS"],"content":" 0.0.1 查看/etc/yum.repos.d/CentOS-Base.repo [base] name=CentOS-$releasever - Base mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=os\u0026infra=$infra #baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/ gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 其实在日常使用之中，我们在很多地方，特别是脚本内看到了调用$releasever和$basearch $releasever的值,这个表示当前系统的发行版本 [root@ultraera /]# rpm -qi centos-release Name : centos-release Relocations: (not relocatable) Version : 6 Vendor: CentOS Release : 7.el6.centos.12.3 Build Date: Tue 04 Aug 2015 12:13:46 AM CST Install Date: Sat 21 May 2016 03:31:27 AM CST Build Host: c6b9.bsys.dev.centos.org Group : System Environment/Base Source RPM: centos-release-6-7.el6.centos.12.3.src.rpm Size : 35634 License: GPLv2 Signature : RSA/SHA1, Tue 04 Aug 2015 12:15:08 AM CST, Key ID 0946fca2c105b9de Packager : CentOS BuildSystem Summary : CentOS release file Description : CentOS release files # 其中Version 6 就是我们的版本号 $basearch是我们的系统硬件架构(CPU指令集),就是我们常说的i386\\i486\\i586\\i686\\ [root@ultraera /]# arch i386 但是，当我在命令行查看是却发现$releasever和$basearch是空的。 Google 一下之后，说明Yum变量的说明可以在这里（5.3.3. Using Yum Variables）找到，说明如下： 5.3.3. Using Yum Variables You can use and reference the following built-in variables in yum commands and in all Yum configuration files (that is, /etc/yum.conf and all .repo files in the /etc/yum.repos.d/ directory): $releasever You can use this variable to reference the release version of Red Hat Enterprise Linux. Yum obtains the value of $releasever from the distroverpkg=value line in the /etc/yum.conf configuration file. If there is no such line in /etc/yum.conf, then yum infers the correct value by deriving the version number from the redhat-release package. $arch You can use this variable to refer to the system’s CPU architecture as returned when calling Python’s os.uname() function. Valid values for $arch include: i586, i686 and x86_64. $basearch You can use $basearch to reference the base architecture of the system. For example, i686 and i586 machines both have a base architecture of i386, and AMD64 and Intel64 machines have a base architecture of x86_64. $YUM0-9 These ten variables are each replaced with the value of any shell environment variables with the same name. If one of these variables is referenced (in /etc/yum.conf for example) and a shell environment variable with the same name does not exist, then the configuration file variable is not replaced. To define a custom variable or to override the value of an existing one, create a file with the same name as the variable (without the “$” sign) in the /etc/yum/vars/ directory, and add the desired value on its first line. For example, repository descriptions often include the operating system name. To define a new variable called $osname, create a new file with “Red Hat Enterprise Linux” on the first line and save it as /etc/yum/vars/osname: echo “Red Hat Enterprise Linux” \u003e /etc/yum/vars/osname Instead of “Red Hat Enterprise Linux 6”, you can now use the following in the .repo files: name=$osname $releasever 文中说到$releasever的定义可以查看 /etc/yum.conf 文件的事distroverpkg=value 行，打开 /etc/yum.conf 看一下，默认文件（我的是CentOS 6）内容如下： [main] cachedir=/var/cache/yum/$basearch/$releasever keepcache=0 debuglevel=2 logfile=/var/log/yum.log exactarch=1 obsoletes=1 gpgcheck=1 plugins=1 installonly_limit=5 bugtracker_url=http://bugs.centos.org/set_project.php?project_id=16\u0026ref=http://bugs.centos.org/bug_report_page.php?category=yum distroverpkg=centos-release distroverpkg=centos-release 代表什么？ 去哪找 centos-release 。找到这里我再一次表示困惑。 不过另一篇文章进行了我的视野： yum的$releasever真是太反动了， 关键内空如下： 在 /etc/yum.repos.d/ 目录下的软件库定义文件中，常常会在 baseurl 的路径中提到 $releasever 这个变量，表示当前发行版的大版本号，但大家知道这个变量是在哪设置的吗？我 grep 了整个 etc 目录都没找到，还是看了 yum.conf 才知道的，是在 yum.conf 文件里 distroverpkg 选项定义的。但这个选项就很有问题： distroverpkg 和 releasever 名字不同，且看不出什么联系 distroverpkg 的值，并不是明文，而是“redhat-release”。不知道大家看到这个会有什么想法，反正我是首先想到了 /etc/redhat-release 文件，但我错了。实际上指的是 redhat-release 这个RPM包。所谓“dist","date":"2016-07-27","objectID":"https://samzong.me/yum%E4%B8%AD-releasever%E5%92%8C-basearch%E7%9A%84%E5%8F%96%E5%80%BC/:0:0","series":null,"tags":["Yum"],"title":"Yum中$releasever和$basearch的取值","uri":"https://samzong.me/yum%E4%B8%AD-releasever%E5%92%8C-basearch%E7%9A%84%E5%8F%96%E5%80%BC/#查看etcyumreposdcentos-baserepo"},{"categories":["Linux","CentOS"],"content":" 0.0.1 查看/etc/yum.repos.d/CentOS-Base.repo [base] name=CentOS-$releasever - Base mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=os\u0026infra=$infra #baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/ gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 其实在日常使用之中，我们在很多地方，特别是脚本内看到了调用$releasever和$basearch $releasever的值,这个表示当前系统的发行版本 [root@ultraera /]# rpm -qi centos-release Name : centos-release Relocations: (not relocatable) Version : 6 Vendor: CentOS Release : 7.el6.centos.12.3 Build Date: Tue 04 Aug 2015 12:13:46 AM CST Install Date: Sat 21 May 2016 03:31:27 AM CST Build Host: c6b9.bsys.dev.centos.org Group : System Environment/Base Source RPM: centos-release-6-7.el6.centos.12.3.src.rpm Size : 35634 License: GPLv2 Signature : RSA/SHA1, Tue 04 Aug 2015 12:15:08 AM CST, Key ID 0946fca2c105b9de Packager : CentOS BuildSystem Summary : CentOS release file Description : CentOS release files # 其中Version 6 就是我们的版本号 $basearch是我们的系统硬件架构(CPU指令集),就是我们常说的i386\\i486\\i586\\i686\\ [root@ultraera /]# arch i386 但是，当我在命令行查看是却发现$releasever和$basearch是空的。 Google 一下之后，说明Yum变量的说明可以在这里（5.3.3. Using Yum Variables）找到，说明如下： 5.3.3. Using Yum Variables You can use and reference the following built-in variables in yum commands and in all Yum configuration files (that is, /etc/yum.conf and all .repo files in the /etc/yum.repos.d/ directory): $releasever You can use this variable to reference the release version of Red Hat Enterprise Linux. Yum obtains the value of $releasever from the distroverpkg=value line in the /etc/yum.conf configuration file. If there is no such line in /etc/yum.conf, then yum infers the correct value by deriving the version number from the redhat-release package. $arch You can use this variable to refer to the system’s CPU architecture as returned when calling Python’s os.uname() function. Valid values for $arch include: i586, i686 and x86_64. $basearch You can use $basearch to reference the base architecture of the system. For example, i686 and i586 machines both have a base architecture of i386, and AMD64 and Intel64 machines have a base architecture of x86_64. $YUM0-9 These ten variables are each replaced with the value of any shell environment variables with the same name. If one of these variables is referenced (in /etc/yum.conf for example) and a shell environment variable with the same name does not exist, then the configuration file variable is not replaced. To define a custom variable or to override the value of an existing one, create a file with the same name as the variable (without the “$” sign) in the /etc/yum/vars/ directory, and add the desired value on its first line. For example, repository descriptions often include the operating system name. To define a new variable called $osname, create a new file with “Red Hat Enterprise Linux” on the first line and save it as /etc/yum/vars/osname: echo “Red Hat Enterprise Linux” \u003e /etc/yum/vars/osname Instead of “Red Hat Enterprise Linux 6”, you can now use the following in the .repo files: name=$osname $releasever 文中说到$releasever的定义可以查看 /etc/yum.conf 文件的事distroverpkg=value 行，打开 /etc/yum.conf 看一下，默认文件（我的是CentOS 6）内容如下： [main] cachedir=/var/cache/yum/$basearch/$releasever keepcache=0 debuglevel=2 logfile=/var/log/yum.log exactarch=1 obsoletes=1 gpgcheck=1 plugins=1 installonly_limit=5 bugtracker_url=http://bugs.centos.org/set_project.php?project_id=16\u0026ref=http://bugs.centos.org/bug_report_page.php?category=yum distroverpkg=centos-release distroverpkg=centos-release 代表什么？ 去哪找 centos-release 。找到这里我再一次表示困惑。 不过另一篇文章进行了我的视野： yum的$releasever真是太反动了， 关键内空如下： 在 /etc/yum.repos.d/ 目录下的软件库定义文件中，常常会在 baseurl 的路径中提到 $releasever 这个变量，表示当前发行版的大版本号，但大家知道这个变量是在哪设置的吗？我 grep 了整个 etc 目录都没找到，还是看了 yum.conf 才知道的，是在 yum.conf 文件里 distroverpkg 选项定义的。但这个选项就很有问题： distroverpkg 和 releasever 名字不同，且看不出什么联系 distroverpkg 的值，并不是明文，而是“redhat-release”。不知道大家看到这个会有什么想法，反正我是首先想到了 /etc/redhat-release 文件，但我错了。实际上指的是 redhat-release 这个RPM包。所谓“dist","date":"2016-07-27","objectID":"https://samzong.me/yum%E4%B8%AD-releasever%E5%92%8C-basearch%E7%9A%84%E5%8F%96%E5%80%BC/:0:0","series":null,"tags":["Yum"],"title":"Yum中$releasever和$basearch的取值","uri":"https://samzong.me/yum%E4%B8%AD-releasever%E5%92%8C-basearch%E7%9A%84%E5%8F%96%E5%80%BC/#小结br"},{"categories":["Linux","Shell"],"content":" 0.0.1 Tomcat 项目管理交互式脚本. Install pssh Use Key Login Server Hosts ~/.ssh/config 配置使用host名登录服务 指定 Server Group Files 存放位置 #!/bin/bash # Author Alex LU # Date 2016-07-20 # Version 1.0 # HostFile HostDIR=~/.ssh/host/ # war包上传到该目录 # /warfolder :' jobs_select (){ STRING=``cat $vmname | grep group if [ -z \"$STRING\" ] then job_tomcat else job2_tomcat fi } ' function HOST() { echo \"\" echo \"############ Host List ###############\" echo \"ckgroup:ck01,ck02,ck03,ck04\" echo \"sjgroup:sj01,sj02,sj03,sj04\" echo \"ddgroup:dd01,dd02,dd03,dd04\" echo \"htgroup:ht01,ht02\" echo \"othergroup:report,tg\" echo \"######################################\" echo \"\" echo \" Tips: 如果要选择ck01，则输入ck01即可，如果输入ck组，输入ckgroup即可,如果要退出当前脚本输入exit\" echo \" Tips: 退回上一步请输入back\" read -p \"请输入你的选择:\" vmname case \"$vmname\" in ck01|ck02|ck03|ck04|sj01|sj02|sj03|sj04|dd01|dd02|dd03|dd04|report|tg|ht01|ht02) job_tomcat $vmname ;; ckgroup|sjgroup|htgroup|ddgroup|othergroup) job2_tomcat $vmname ;; exit) exit 0; ;; back) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入的选择!\" HOST ;; esac } function job_tomcat () { echo \"\" echo \"############ 动作 ###############\" echo \" 1. 查看当前tomcat7状态\" echo \" 2. 关闭tomcat7\" echo \" 3. 启动tomcat7\" echo \" 4. 重启tomcat7\" echo \" 5. 获取最近200行日志\" echo \" 6. 重新选择主机\" echo \" 7. 回到顶层目录\" echo \"\" echo \"#################################\" read -p \"请输入你的选择:\" service_tomcat case $service_tomcat in 1) pssh -H $vmname -i \"ps aux | grep tomcat\" job_tomcat ;; 2) pssh -H $vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -H $vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -H $vmname -i \"rm -rf /tomcat7/work/*\" pssh -H $vmname -i \"rm -rf /tomcat7/logs/*\" pssh -H $vmname -i \"rm -rf /tomcat7/temp/*\" job_tomcat ;; 3) pssh -H $vmname -i \"service tomcat7 start\" job_tomcat ;; 4) pssh -H $vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -H $vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -H $vmname -i \"rm -rf /tomcat7/work/*\" pssh -H $vmname -i \"rm -rf /tomcat7/logs/*\" pssh -H $vmname -i \"rm -rf /tomcat7/temp/*\" sleep 1 pssh -H $vmname -i \"service tomcat7 start\" job_tomcat ;; 5) pssh -H $vmname -i \"tail -n 200 /tomcat7/logs/catalina.out\" job_tomcat ;; 6) echo \"\" HOST ;; 7) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入正确的选项！\" job_tomcat ;; esac } function job2_tomcat () { echo \"\" echo \"############ 动作 ###############\" echo \" 1. 查看当前tomcat7状态\" echo \" 2. 关闭tomcat7\" echo \" 3. 启动tomcat7\" echo \" 4. 重启tomcat7\" echo \" 5. 获取最近200行日志\" echo \" 6. 重新选择主机\" echo \" 7. 回到顶层目录\" echo \"\" echo \"################################\" read -p \"请输入你的选择:\" service_tomcat case $service_tomcat in 1) pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat\" job2_tomcat ;; 2) pssh -h $HostDIR/$vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/work/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/logs/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/temp/*\" job2_tomcat ;; 3) pssh -h $HostDIR/$vmname -i \"service tomcat7 start\" job2_tomcat ;; 4) pssh -h $HostDIR/$vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/work/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/logs/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/temp/*\" sleep 1 pssh -h $HostDIR/$vmname -i \"service tomcat7 start\" job2_tomcat ;; 5) pssh -h $HostDIR/$vmname -i \"tail -n 200 /tomcat7/logs/catalina.out\" job2_tomcat ;; 6) echo \"\" HOST ;; 7) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工","date":"2016-07-27","objectID":"https://samzong.me/manage-tomcat-service-use-shell-script/:0:0","series":null,"tags":["Shell","CentOS","Tomcat"],"title":"Manage Tomcat Service Use Shell Script","uri":"https://samzong.me/manage-tomcat-service-use-shell-script/#"},{"categories":["Linux","Shell"],"content":" 0.0.1 Tomcat 项目管理交互式脚本. Install pssh Use Key Login Server Hosts ~/.ssh/config 配置使用host名登录服务 指定 Server Group Files 存放位置 #!/bin/bash # Author Alex LU # Date 2016-07-20 # Version 1.0 # HostFile HostDIR=~/.ssh/host/ # war包上传到该目录 # /warfolder :' jobs_select (){ STRING=``cat $vmname | grep group if [ -z \"$STRING\" ] then job_tomcat else job2_tomcat fi } ' function HOST() { echo \"\" echo \"############ Host List ###############\" echo \"ckgroup:ck01,ck02,ck03,ck04\" echo \"sjgroup:sj01,sj02,sj03,sj04\" echo \"ddgroup:dd01,dd02,dd03,dd04\" echo \"htgroup:ht01,ht02\" echo \"othergroup:report,tg\" echo \"######################################\" echo \"\" echo \" Tips: 如果要选择ck01，则输入ck01即可，如果输入ck组，输入ckgroup即可,如果要退出当前脚本输入exit\" echo \" Tips: 退回上一步请输入back\" read -p \"请输入你的选择:\" vmname case \"$vmname\" in ck01|ck02|ck03|ck04|sj01|sj02|sj03|sj04|dd01|dd02|dd03|dd04|report|tg|ht01|ht02) job_tomcat $vmname ;; ckgroup|sjgroup|htgroup|ddgroup|othergroup) job2_tomcat $vmname ;; exit) exit 0; ;; back) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入的选择!\" HOST ;; esac } function job_tomcat () { echo \"\" echo \"############ 动作 ###############\" echo \" 1. 查看当前tomcat7状态\" echo \" 2. 关闭tomcat7\" echo \" 3. 启动tomcat7\" echo \" 4. 重启tomcat7\" echo \" 5. 获取最近200行日志\" echo \" 6. 重新选择主机\" echo \" 7. 回到顶层目录\" echo \"\" echo \"#################################\" read -p \"请输入你的选择:\" service_tomcat case $service_tomcat in 1) pssh -H $vmname -i \"ps aux | grep tomcat\" job_tomcat ;; 2) pssh -H $vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -H $vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -H $vmname -i \"rm -rf /tomcat7/work/*\" pssh -H $vmname -i \"rm -rf /tomcat7/logs/*\" pssh -H $vmname -i \"rm -rf /tomcat7/temp/*\" job_tomcat ;; 3) pssh -H $vmname -i \"service tomcat7 start\" job_tomcat ;; 4) pssh -H $vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -H $vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -H $vmname -i \"rm -rf /tomcat7/work/*\" pssh -H $vmname -i \"rm -rf /tomcat7/logs/*\" pssh -H $vmname -i \"rm -rf /tomcat7/temp/*\" sleep 1 pssh -H $vmname -i \"service tomcat7 start\" job_tomcat ;; 5) pssh -H $vmname -i \"tail -n 200 /tomcat7/logs/catalina.out\" job_tomcat ;; 6) echo \"\" HOST ;; 7) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工具,您需要预先安装pssh工具，以及配置好ssh免密登录到服务器\" main ;; *) echo \"请输入正确的选项！\" job_tomcat ;; esac } function job2_tomcat () { echo \"\" echo \"############ 动作 ###############\" echo \" 1. 查看当前tomcat7状态\" echo \" 2. 关闭tomcat7\" echo \" 3. 启动tomcat7\" echo \" 4. 重启tomcat7\" echo \" 5. 获取最近200行日志\" echo \" 6. 重新选择主机\" echo \" 7. 回到顶层目录\" echo \"\" echo \"################################\" read -p \"请输入你的选择:\" service_tomcat case $service_tomcat in 1) pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat\" job2_tomcat ;; 2) pssh -h $HostDIR/$vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/work/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/logs/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/temp/*\" job2_tomcat ;; 3) pssh -h $HostDIR/$vmname -i \"service tomcat7 start\" job2_tomcat ;; 4) pssh -h $HostDIR/$vmname -i \"service tomcat7 stop\" # tips： 下面grep的字符串要和你的tomcat项目名称契合 pssh -h $HostDIR/$vmname -i \"ps aux | grep tomcat7 | awk '{print $2}' | xargs kill -9 \" # tips: 下面用到的路径为绝对路径，请更改为自己tomcat的目录，也可以在前面增加自定义变量 pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/work/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/logs/*\" pssh -h $HostDIR/$vmname -i \"rm -rf /tomcat7/temp/*\" sleep 1 pssh -h $HostDIR/$vmname -i \"service tomcat7 start\" job2_tomcat ;; 5) pssh -h $HostDIR/$vmname -i \"tail -n 200 /tomcat7/logs/catalina.out\" job2_tomcat ;; 6) echo \"\" HOST ;; 7) clear echo \"\" echo \"Tips: 欢迎使用Tomcat项目服务管理工","date":"2016-07-27","objectID":"https://samzong.me/manage-tomcat-service-use-shell-script/:0:0","series":null,"tags":["Shell","CentOS","Tomcat"],"title":"Manage Tomcat Service Use Shell Script","uri":"https://samzong.me/manage-tomcat-service-use-shell-script/#tomcat-项目管理交互式脚本"},{"categories":null,"content":" 1. Installtions TuTuAPP VPN Google Account ID   最近看到身边朋友都在玩Pokemon GO, 心痒难耐，于是跟同事请教琢磨了，终于在自己的手机上玩起来了，由于我的手机是iPhone 5s，身边朋友也都是iPhone，所以不确定是Android是否可以玩耍，想来应该是没有问题话，Android平台做破解等操作一直以来比iPhone更加方便。   1. 点击上面的TuTuAPP，可以打开兔兔助手的网站，用手机扫描首页的二维码(可以用微信等，带有二维码扫描的都可以)，注意如果你的iPhone已经越狱，请切换标签页到越狱版本。 2. 安装时注意按照提示添加信任，等待兔兔助手安装完成之后，打开软件，在Search栏输入“精灵宝可梦GO”，请下载美区版，有两个版本：懒人版与移动版；懒人版有移动按钮，可以不需要走动躺在床上玩耍，移动版是需要人走动才能玩耍，我下载的移动版，你根据自己的喜欢选择，选择完成后，按提示按钮安装即可。 3. 安装完成Pokemon GO之后也需要设定信任，请按照提示操作；好了， 到这一步，Pokemon GO已经安装在你的手机上了，下一步就是怎么登录玩耍。 4. 到这里及一下的步骤能继续下去的前提是，你有一个美国的VPN节点。打开你手机App Store，搜索VPN，列表中会有很多的免费应用，因为我一直用的是付费VPN，所以对这些不是很清楚，朋友推荐ArkVPN，如果你没有付费VPN，可以试试这个，注意VPN节点要选择US，如果你也要使付费VPN的，我推荐Shadowsocks＋Potatso( App) 5. 注册Google Account ID，点击   6. 进入游戏，登录Google ID，然后授权，进入游戏。   7. 开始捕捉你的小精灵吧，手动微笑。 Tips：这款游戏会大量耗电发热，因为打开摄像头捕捉小精灵；另外很容易入迷，在室外玩耍时一定要注意安全。 8. 注意：如果看到了GPS signal not found，说明是GPS信息丢失，这是根据GPS定位的游戏，所以这很重要，记得选择美国的VPN代理。 ","date":"2016-07-24","objectID":"https://samzong.me/howto-play-pokemon-go-in-china/:1:0","series":null,"tags":["iPhone"],"title":"HowTo Play Pokemon GO in China","uri":"https://samzong.me/howto-play-pokemon-go-in-china/#installtions"},{"categories":["云服务","Azure"],"content":" Setup1: 这种方法仅适用于已存在的用户，也就是说$Username是之前创建过的用户，否则不适用 ","date":"2016-07-10","objectID":"https://samzong.me/howto-reset-azure-vm-linux-password/:0:0","series":null,"tags":["Azure","CentOS"],"title":"HowTo Reset Azure VM Linux Password","uri":"https://samzong.me/howto-reset-azure-vm-linux-password/#"},{"categories":["云服务","Azure"],"content":" 0.1 1. 指定虚拟机 $vm = Get-AzureVM -ServiceName '云服务名称' -Name '虚拟机名称' $vm.GetInstance().ProvisionGuestAgent = $true ","date":"2016-07-10","objectID":"https://samzong.me/howto-reset-azure-vm-linux-password/:0:1","series":null,"tags":["Azure","CentOS"],"title":"HowTo Reset Azure VM Linux Password","uri":"https://samzong.me/howto-reset-azure-vm-linux-password/#1-指定虚拟机"},{"categories":["云服务","Azure"],"content":" 0.2 2. 输入您当前的用户名和新密码 $UserName = \"指定用户名\" $Password = \"指定密码\" $PrivateConfig = '{\"username\":\"'+ $UserName + '\", \"password\":\"' + $Password + '\"}' ","date":"2016-07-10","objectID":"https://samzong.me/howto-reset-azure-vm-linux-password/:0:2","series":null,"tags":["Azure","CentOS"],"title":"HowTo Reset Azure VM Linux Password","uri":"https://samzong.me/howto-reset-azure-vm-linux-password/#2-输入您当前的用户名和新密码"},{"categories":["云服务","Azure"],"content":" 0.3 3. 开始执行 $ExtensionName = 'VMAccessForLinux' $Publisher = 'Microsoft.OSTCExtensions' $Version = '1.0' Set-AzureVMExtension -ExtensionName $ExtensionName -VM $vm -Publisher $Publisher -Version $Version -PrivateConfiguration $PrivateConfig | Update-AzureVM Setup2: 如果是由于错误修改了SSH的配置文件导致无法登录，例如在登录时报错：This service allows sftp connections only.Connection to vm closed.这是因为错误配置了sftp导致的，那碰到这种问题需要做的是重置ssh服务。 ","date":"2016-07-10","objectID":"https://samzong.me/howto-reset-azure-vm-linux-password/:0:3","series":null,"tags":["Azure","CentOS"],"title":"HowTo Reset Azure VM Linux Password","uri":"https://samzong.me/howto-reset-azure-vm-linux-password/#3-开始执行"},{"categories":["云服务","Azure"],"content":" 0.4 1. 指定虚拟机 $vm = Get-AzureVM -ServiceName 'MyServiceName' -Name 'MyVMName' $PrivateConfig = '{\"reset_ssh\":\"True\"}'' ","date":"2016-07-10","objectID":"https://samzong.me/howto-reset-azure-vm-linux-password/:0:4","series":null,"tags":["Azure","CentOS"],"title":"HowTo Reset Azure VM Linux Password","uri":"https://samzong.me/howto-reset-azure-vm-linux-password/#1-指定虚拟机-1"},{"categories":["云服务","Azure"],"content":" 0.5 2. 开始执行 $ExtensionName = 'VMAccessForLinux' $Publisher = 'Microsoft.OSTCExtensions' $Version = '1.0' Set-AzureVMExtension -ExtensionName $ExtensionName -VM $vm -Publisher $Publisher -Version $Version -PrivateConfiguration $PrivateConfig | Update-AzureVM ","date":"2016-07-10","objectID":"https://samzong.me/howto-reset-azure-vm-linux-password/:0:5","series":null,"tags":["Azure","CentOS"],"title":"HowTo Reset Azure VM Linux Password","uri":"https://samzong.me/howto-reset-azure-vm-linux-password/#2-开始执行"},{"categories":["虚拟化","Docker"],"content":" 0.1 1. Add the EPEL Repository rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:1","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#1-add-the-epel-repository"},{"categories":["虚拟化","Docker"],"content":" 0.2 2. Update your system yum update -y ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:2","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#2-update-your-system"},{"categories":["虚拟化","Docker"],"content":" 0.3 3. Install yum install -y docker-io ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:3","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#3-install"},{"categories":["虚拟化","Docker"],"content":" 0.4 4. Configure service docker start chkconfig docker on docker info ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:4","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#4-configure"},{"categories":["虚拟化","Docker"],"content":" 0.5 5. Download a Docker Container docker pull centos ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:5","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#5-download-a-docker-container"},{"categories":["虚拟化","Docker"],"content":" 0.6 6. Run a Docker Container docker run -i -t centos /bin/bash ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:6","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#6-run-a-docker-container"},{"categories":["虚拟化","Docker"],"content":" 0.7 7. Find Docker Container docker search ubuntu ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:7","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#7-find-docker-container"},{"categories":["虚拟化","Docker"],"content":" 0.8 FAQ 0.8.1 1. Faild to start docker on CentOS 6.x/usr/bin/docker: relocation error: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference the lib-device-mapper that you have isn't exporting a symbol (\"Base\") that Docker needs. this by upgrading lib-device-mapper to version 1.02.90. # You may have to enable the public_ol6_latest repo in order to get this package. sudo yum-config-manager --enable public_ol6_latest sudo yum install device-mapper-event-libs 0.8.2 2. Faild to use dockerGet http:///var/run/docker.sock/v1.19/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS? # this is because docker no restart ok. pkill -9 docker \u0026\u0026 service docker start 0.8.3 3. HowTo save ‘docker run -i -t xxx /bin/bash’ docker ps -l docker commit ID newname docker images ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:8","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#faq"},{"categories":["虚拟化","Docker"],"content":" 0.8 FAQ 0.8.1 1. Faild to start docker on CentOS 6.x/usr/bin/docker: relocation error: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference the lib-device-mapper that you have isn't exporting a symbol (\"Base\") that Docker needs. this by upgrading lib-device-mapper to version 1.02.90. # You may have to enable the public_ol6_latest repo in order to get this package. sudo yum-config-manager --enable public_ol6_latest sudo yum install device-mapper-event-libs 0.8.2 2. Faild to use dockerGet http:///var/run/docker.sock/v1.19/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS? # this is because docker no restart ok. pkill -9 docker \u0026\u0026 service docker start 0.8.3 3. HowTo save ‘docker run -i -t xxx /bin/bash’ docker ps -l docker commit ID newname docker images ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:8","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#1-faild-to-start-docker-on-centos-6x"},{"categories":["虚拟化","Docker"],"content":" 0.8 FAQ 0.8.1 1. Faild to start docker on CentOS 6.x/usr/bin/docker: relocation error: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference the lib-device-mapper that you have isn't exporting a symbol (\"Base\") that Docker needs. this by upgrading lib-device-mapper to version 1.02.90. # You may have to enable the public_ol6_latest repo in order to get this package. sudo yum-config-manager --enable public_ol6_latest sudo yum install device-mapper-event-libs 0.8.2 2. Faild to use dockerGet http:///var/run/docker.sock/v1.19/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS? # this is because docker no restart ok. pkill -9 docker \u0026\u0026 service docker start 0.8.3 3. HowTo save ‘docker run -i -t xxx /bin/bash’ docker ps -l docker commit ID newname docker images ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:8","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#2-faild-to-use-docker"},{"categories":["虚拟化","Docker"],"content":" 0.8 FAQ 0.8.1 1. Faild to start docker on CentOS 6.x/usr/bin/docker: relocation error: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference the lib-device-mapper that you have isn't exporting a symbol (\"Base\") that Docker needs. this by upgrading lib-device-mapper to version 1.02.90. # You may have to enable the public_ol6_latest repo in order to get this package. sudo yum-config-manager --enable public_ol6_latest sudo yum install device-mapper-event-libs 0.8.2 2. Faild to use dockerGet http:///var/run/docker.sock/v1.19/info: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS? # this is because docker no restart ok. pkill -9 docker \u0026\u0026 service docker start 0.8.3 3. HowTo save ‘docker run -i -t xxx /bin/bash’ docker ps -l docker commit ID newname docker images ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-docker-on-centos-6-x/:0:8","series":null,"tags":["Docker"],"title":"HowTo Install Docker on CentOS 6.x","uri":"https://samzong.me/howto-install-docker-on-centos-6-x/#3-howto-save-docker-run--i--t-xxx-binbash"},{"categories":["数据库","MySQL"],"content":" 1. Install Mysql 5.5 on RHEL/CentOS 5/6/7 ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:0","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#font-colorredinstall-mysql-55-on-rhelcentos-567-font"},{"categories":["数据库","MySQL"],"content":" 1.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.5 RPM based on your CentOS/RHEL release: 1.1.1 mysql-server-5.5.repo for CentOS/RHEL 5.x rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm 1.1.2 * Only Install MySQL 5.5 On CentOS 5.xIf you already have MySql client or server installed (rpm -q mysql mysql-server), then you can upgrade using the following method: yum install mysql.`uname -i` yum-plugin-replace yum replace mysql --replace-with mysql55w “yum install mysql” is only there to make sure yum-plugin-replace can resolve dependencies correctly if only mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install mysql55w mysql55w-server 1.1.3 mysql-server-5.5.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 1.1.4 mysql-server-5.5.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-1-use-repository"},{"categories":["数据库","MySQL"],"content":" 1.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.5 RPM based on your CentOS/RHEL release: 1.1.1 mysql-server-5.5.repo for CentOS/RHEL 5.x rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm 1.1.2 * Only Install MySQL 5.5 On CentOS 5.xIf you already have MySql client or server installed (rpm -q mysql mysql-server), then you can upgrade using the following method: yum install mysql.`uname -i` yum-plugin-replace yum replace mysql --replace-with mysql55w “yum install mysql” is only there to make sure yum-plugin-replace can resolve dependencies correctly if only mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install mysql55w mysql55w-server 1.1.3 mysql-server-5.5.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 1.1.4 mysql-server-5.5.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-55repo-for-centosrhel-5x"},{"categories":["数据库","MySQL"],"content":" 1.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.5 RPM based on your CentOS/RHEL release: 1.1.1 mysql-server-5.5.repo for CentOS/RHEL 5.x rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm 1.1.2 * Only Install MySQL 5.5 On CentOS 5.xIf you already have MySql client or server installed (rpm -q mysql mysql-server), then you can upgrade using the following method: yum install mysql.`uname -i` yum-plugin-replace yum replace mysql --replace-with mysql55w “yum install mysql” is only there to make sure yum-plugin-replace can resolve dependencies correctly if only mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install mysql55w mysql55w-server 1.1.3 mysql-server-5.5.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 1.1.4 mysql-server-5.5.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#-only-install-mysql-55-on-centos-5x"},{"categories":["数据库","MySQL"],"content":" 1.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.5 RPM based on your CentOS/RHEL release: 1.1.1 mysql-server-5.5.repo for CentOS/RHEL 5.x rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm 1.1.2 * Only Install MySQL 5.5 On CentOS 5.xIf you already have MySql client or server installed (rpm -q mysql mysql-server), then you can upgrade using the following method: yum install mysql.`uname -i` yum-plugin-replace yum replace mysql --replace-with mysql55w “yum install mysql” is only there to make sure yum-plugin-replace can resolve dependencies correctly if only mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install mysql55w mysql55w-server 1.1.3 mysql-server-5.5.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 1.1.4 mysql-server-5.5.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-55repo-for-centosrhel-6x"},{"categories":["数据库","MySQL"],"content":" 1.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.5 RPM based on your CentOS/RHEL release: 1.1.1 mysql-server-5.5.repo for CentOS/RHEL 5.x rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm 1.1.2 * Only Install MySQL 5.5 On CentOS 5.xIf you already have MySql client or server installed (rpm -q mysql mysql-server), then you can upgrade using the following method: yum install mysql.`uname -i` yum-plugin-replace yum replace mysql --replace-with mysql55w “yum install mysql” is only there to make sure yum-plugin-replace can resolve dependencies correctly if only mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install mysql55w mysql55w-server 1.1.3 mysql-server-5.5.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 1.1.4 mysql-server-5.5.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.5-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-55repo-for-centosrhel-7x"},{"categories":["数据库","MySQL"],"content":" 1.2 Setup 2. Install MySQL Server 5.5If you already have MySql client or server installed (rpm -q mysql mysql-server), then you must uninstall using the following method: # It's RHEL/CentOS 6/7 yum remove -y mysql-server yum remove -y mysql* If you don’t have mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install -y mysql-community-server ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:2","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-2-install-mysql-server-55"},{"categories":["数据库","MySQL"],"content":" 1.3 Setup 3. Service ConfigureYou should upgrade existing tables before setting the server to become a production machine, which can be done by starting the server and running the mysql_upgrade script (this may take time depending on the size of the database). service mysqld start This will issue a password prompt for the user. If you don’t have a root user password, remove the “-p” mysql_secure_installation ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:1:3","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-3-service-configure"},{"categories":["数据库","MySQL"],"content":" 2. Install Mysql 5.6 on RHEL/CentOS 5/6/7 ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:2:0","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#font-colorredinstall-mysql-56-on-rhelcentos-567-font"},{"categories":["数据库","MySQL"],"content":" 2.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.6 RPM based on your CentOS/RHEL release: 2.1.1 mysql-server-5.6.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/x86_64/mysql-community-release-el5-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/i386/mysql-community-release-el5-5.noarch.rpm 2.1.2 mysql-server-5.6.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 2.1.3 mysql-server-5.6.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:2:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-1-use-repository-1"},{"categories":["数据库","MySQL"],"content":" 2.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.6 RPM based on your CentOS/RHEL release: 2.1.1 mysql-server-5.6.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/x86_64/mysql-community-release-el5-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/i386/mysql-community-release-el5-5.noarch.rpm 2.1.2 mysql-server-5.6.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 2.1.3 mysql-server-5.6.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:2:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-56repo-for-centosrhel-5x"},{"categories":["数据库","MySQL"],"content":" 2.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.6 RPM based on your CentOS/RHEL release: 2.1.1 mysql-server-5.6.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/x86_64/mysql-community-release-el5-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/i386/mysql-community-release-el5-5.noarch.rpm 2.1.2 mysql-server-5.6.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 2.1.3 mysql-server-5.6.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:2:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-56repo-for-centosrhel-6x"},{"categories":["数据库","MySQL"],"content":" 2.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.6 RPM based on your CentOS/RHEL release: 2.1.1 mysql-server-5.6.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/x86_64/mysql-community-release-el5-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/5/i386/mysql-community-release-el5-5.noarch.rpm 2.1.2 mysql-server-5.6.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/6/i386/mysql-community-release-el6-5.noarch.rpm 2.1.3 mysql-server-5.6.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/x86_64/mysql-community-release-el7-5.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.6-community/el/7/i386/mysql-community-release-el7-5.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:2:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-56repo-for-centosrhel-7x"},{"categories":["数据库","MySQL"],"content":" 2.2 Setup 2. Install MySQL Server 5.6If you already have MySql client or server installed (rpm -q mysql mysql-server), then you must uninstall using the following method: yum remove -y mysql-server yum remove -y mysql* If you don’t have mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install -y mysql-community-server ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:2:2","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-2-install-mysql-server-56"},{"categories":["数据库","MySQL"],"content":" 2.3 Setup 3. Service ConfigureYou should upgrade existing tables before setting the server to become a production machine, which can be done by starting the server and running the mysql_upgrade script (this may take time depending on the size of the database). service mysqld start This will issue a password prompt for the user. If you don’t have a root user password, remove the “-p” mysql_secure_installation ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:2:3","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-3-service-configure-1"},{"categories":["数据库","MySQL"],"content":" 3. Install Mysql 5.7 on RHEL/CentOS 5/6/7 ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:3:0","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#font-colorredinstall-mysql-57-on-rhelcentos-567-font"},{"categories":["数据库","MySQL"],"content":" 3.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.7 RPM based on your CentOS/RHEL release: 3.1.1 mysql-server-5.7.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/x86_64/mysql-community-release-el5-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/i386/mysql-community-release-el5-7.noarch.rpm 3.1.2 mysql-server-5.7.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/i386/mysql-community-release-el6-7.noarch.rpm 3.1.3 mysql-server-5.7.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-release-el7-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/i386/mysql-community-release-el7-7.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:3:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-1-use-repository-2"},{"categories":["数据库","MySQL"],"content":" 3.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.7 RPM based on your CentOS/RHEL release: 3.1.1 mysql-server-5.7.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/x86_64/mysql-community-release-el5-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/i386/mysql-community-release-el5-7.noarch.rpm 3.1.2 mysql-server-5.7.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/i386/mysql-community-release-el6-7.noarch.rpm 3.1.3 mysql-server-5.7.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-release-el7-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/i386/mysql-community-release-el7-7.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:3:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-57repo-for-centosrhel-5x"},{"categories":["数据库","MySQL"],"content":" 3.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.7 RPM based on your CentOS/RHEL release: 3.1.1 mysql-server-5.7.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/x86_64/mysql-community-release-el5-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/i386/mysql-community-release-el5-7.noarch.rpm 3.1.2 mysql-server-5.7.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/i386/mysql-community-release-el6-7.noarch.rpm 3.1.3 mysql-server-5.7.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-release-el7-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/i386/mysql-community-release-el7-7.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:3:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-57repo-for-centosrhel-6x"},{"categories":["数据库","MySQL"],"content":" 3.1 Setup 1. Use Repository.First, to set up the yum repository, install the mysql－community-server 5.7 RPM based on your CentOS/RHEL release: 3.1.1 mysql-server-5.7.repo for CentOS/RHEL 5.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/x86_64/mysql-community-release-el5-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/5/i386/mysql-community-release-el5-7.noarch.rpm 3.1.2 mysql-server-5.7.repo for CentOS/RHEL 6.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/x86_64/mysql-community-release-el6-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/6/i386/mysql-community-release-el6-7.noarch.rpm 3.1.3 mysql-server-5.7.repo for CentOS/RHEL 7.x # For x86_64 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql-community-release-el7-7.noarch.rpm # For i386 yum install http://repo.mysql.com/yum/mysql-5.7-community/el/7/i386/mysql-community-release-el7-7.noarch.rpm ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:3:1","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#mysql-server-57repo-for-centosrhel-7x"},{"categories":["数据库","MySQL"],"content":" 3.2 Setup 2. Install MySQL Server 5.7If you already have MySql client or server installed (rpm -q mysql mysql-server), then you must uninstall using the following method: yum remove -y mysql-server yum remove -y mysql* If you don’t have mysql-server was installed. Otherwise, to install MySql client and server, then run: yum install -y mysql-community-server ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:3:2","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-2-install-mysql-server-57"},{"categories":["数据库","MySQL"],"content":" 3.3 Setup 3. Service ConfigureYou should upgrade existing tables before setting the server to become a production machine, which can be done by starting the server and running the mysql_upgrade script (this may take time depending on the size of the database). service mysqld start This will issue a password prompt for the user. If you don’t have a root user password, remove the “-p” mysql_secure_installation ","date":"2016-07-07","objectID":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/:3:3","series":null,"tags":["MySQL"],"title":"HowTo Install MySQL 5.5/6/7 on RHEL/CentOS 5/6/7","uri":"https://samzong.me/howto-install-mysql-5-5-6-7-on-rhel-centos-5-6-7/#setup-3-service-configure-2"},{"categories":["数据库","Redis"],"content":" 1. Setup 1. InstallFrist, To install remi Repo and epel Repo. 1.0.1 Remi EL6 for CentOS/RHEL 6.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 1.0.2 Remi EL5 for CentOS/RHEL 5.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 1.0.3 有时间我们会碰到remi.repo无法使用报错，就像这样： http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 1.0.4 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样： baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/ #mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 1.0.5 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。 [repoName] name=repoName repo baseurl=http://repoPath gpgcheck=0 # 是否启用gpgkey检查 enabled=0 # 是否启用该源 1.0.6 Install Redis yum install -y redis [root@zabbix yum.repos.d]# rpm -qi redis Name : redis Version : 3.2.1 Release : 2.el5.remi Architecture: x86_64 Install Date: Thu 28 Jul 2016 12:00:41 PM CST Group : Applications/Databases Size : 2113279 License : BSD Signature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56 Source RPM : redis-3.2.1-2.el5.remi.src.rpm Build Date : Fri 24 Jun 2016 01:28:27 PM CST Build Host : builder.remirepo.net Relocations : (not relocatable) Packager : http://blog.remirepo.net/ Vendor : Remi Collet URL : http://redis.io Summary : A persistent key-value database ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:1:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#setup-1-install"},{"categories":["数据库","Redis"],"content":" 1. Setup 1. InstallFrist, To install remi Repo and epel Repo. 1.0.1 Remi EL6 for CentOS/RHEL 6.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 1.0.2 Remi EL5 for CentOS/RHEL 5.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 1.0.3 有时间我们会碰到remi.repo无法使用报错，就像这样： http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 1.0.4 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样： baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/ #mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 1.0.5 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。 [repoName] name=repoName repo baseurl=http://repoPath gpgcheck=0 # 是否启用gpgkey检查 enabled=0 # 是否启用该源 1.0.6 Install Redis yum install -y redis [root@zabbix yum.repos.d]# rpm -qi redis Name : redis Version : 3.2.1 Release : 2.el5.remi Architecture: x86_64 Install Date: Thu 28 Jul 2016 12:00:41 PM CST Group : Applications/Databases Size : 2113279 License : BSD Signature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56 Source RPM : redis-3.2.1-2.el5.remi.src.rpm Build Date : Fri 24 Jun 2016 01:28:27 PM CST Build Host : builder.remirepo.net Relocations : (not relocatable) Packager : http://blog.remirepo.net/ Vendor : Remi Collet URL : http://redis.io Summary : A persistent key-value database ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:1:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#remi-el6-for-centosrhel-6x"},{"categories":["数据库","Redis"],"content":" 1. Setup 1. InstallFrist, To install remi Repo and epel Repo. 1.0.1 Remi EL6 for CentOS/RHEL 6.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 1.0.2 Remi EL5 for CentOS/RHEL 5.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 1.0.3 有时间我们会碰到remi.repo无法使用报错，就像这样： http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 1.0.4 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样： baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/ #mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 1.0.5 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。 [repoName] name=repoName repo baseurl=http://repoPath gpgcheck=0 # 是否启用gpgkey检查 enabled=0 # 是否启用该源 1.0.6 Install Redis yum install -y redis [root@zabbix yum.repos.d]# rpm -qi redis Name : redis Version : 3.2.1 Release : 2.el5.remi Architecture: x86_64 Install Date: Thu 28 Jul 2016 12:00:41 PM CST Group : Applications/Databases Size : 2113279 License : BSD Signature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56 Source RPM : redis-3.2.1-2.el5.remi.src.rpm Build Date : Fri 24 Jun 2016 01:28:27 PM CST Build Host : builder.remirepo.net Relocations : (not relocatable) Packager : http://blog.remirepo.net/ Vendor : Remi Collet URL : http://redis.io Summary : A persistent key-value database ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:1:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#remi-el5-for-centosrhel-5x"},{"categories":["数据库","Redis"],"content":" 1. Setup 1. InstallFrist, To install remi Repo and epel Repo. 1.0.1 Remi EL6 for CentOS/RHEL 6.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 1.0.2 Remi EL5 for CentOS/RHEL 5.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 1.0.3 有时间我们会碰到remi.repo无法使用报错，就像这样： http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 1.0.4 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样： baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/ #mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 1.0.5 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。 [repoName] name=repoName repo baseurl=http://repoPath gpgcheck=0 # 是否启用gpgkey检查 enabled=0 # 是否启用该源 1.0.6 Install Redis yum install -y redis [root@zabbix yum.repos.d]# rpm -qi redis Name : redis Version : 3.2.1 Release : 2.el5.remi Architecture: x86_64 Install Date: Thu 28 Jul 2016 12:00:41 PM CST Group : Applications/Databases Size : 2113279 License : BSD Signature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56 Source RPM : redis-3.2.1-2.el5.remi.src.rpm Build Date : Fri 24 Jun 2016 01:28:27 PM CST Build Host : builder.remirepo.net Relocations : (not relocatable) Packager : http://blog.remirepo.net/ Vendor : Remi Collet URL : http://redis.io Summary : A persistent key-value database ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:1:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#有时间我们会碰到remirepo无法使用报错就像这样"},{"categories":["数据库","Redis"],"content":" 1. Setup 1. InstallFrist, To install remi Repo and epel Repo. 1.0.1 Remi EL6 for CentOS/RHEL 6.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 1.0.2 Remi EL5 for CentOS/RHEL 5.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 1.0.3 有时间我们会碰到remi.repo无法使用报错，就像这样： http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 1.0.4 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样： baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/ #mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 1.0.5 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。 [repoName] name=repoName repo baseurl=http://repoPath gpgcheck=0 # 是否启用gpgkey检查 enabled=0 # 是否启用该源 1.0.6 Install Redis yum install -y redis [root@zabbix yum.repos.d]# rpm -qi redis Name : redis Version : 3.2.1 Release : 2.el5.remi Architecture: x86_64 Install Date: Thu 28 Jul 2016 12:00:41 PM CST Group : Applications/Databases Size : 2113279 License : BSD Signature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56 Source RPM : redis-3.2.1-2.el5.remi.src.rpm Build Date : Fri 24 Jun 2016 01:28:27 PM CST Build Host : builder.remirepo.net Relocations : (not relocatable) Packager : http://blog.remirepo.net/ Vendor : Remi Collet URL : http://redis.io Summary : A persistent key-value database ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:1:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#这时我们需要修改etcyumreposdremirepo像这样"},{"categories":["数据库","Redis"],"content":" 1. Setup 1. InstallFrist, To install remi Repo and epel Repo. 1.0.1 Remi EL6 for CentOS/RHEL 6.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 1.0.2 Remi EL5 for CentOS/RHEL 5.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 1.0.3 有时间我们会碰到remi.repo无法使用报错，就像这样： http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 1.0.4 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样： baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/ #mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 1.0.5 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。 [repoName] name=repoName repo baseurl=http://repoPath gpgcheck=0 # 是否启用gpgkey检查 enabled=0 # 是否启用该源 1.0.6 Install Redis yum install -y redis [root@zabbix yum.repos.d]# rpm -qi redis Name : redis Version : 3.2.1 Release : 2.el5.remi Architecture: x86_64 Install Date: Thu 28 Jul 2016 12:00:41 PM CST Group : Applications/Databases Size : 2113279 License : BSD Signature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56 Source RPM : redis-3.2.1-2.el5.remi.src.rpm Build Date : Fri 24 Jun 2016 01:28:27 PM CST Build Host : builder.remirepo.net Relocations : (not relocatable) Packager : http://blog.remirepo.net/ Vendor : Remi Collet URL : http://redis.io Summary : A persistent key-value database ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:1:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#如果发现安装后yum-makecache没看到相应的源站点请检查repo文件的enable参数是否为11为开启0为关闭状态"},{"categories":["数据库","Redis"],"content":" 1. Setup 1. InstallFrist, To install remi Repo and epel Repo. 1.0.1 Remi EL6 for CentOS/RHEL 6.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 1.0.2 Remi EL5 for CentOS/RHEL 5.x rpm -Uvh https://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm 1.0.3 有时间我们会碰到remi.repo无法使用报错，就像这样： http://remi.schlundtech.de/enterprise/latest/remi/x86_64/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - \"The requested URL returned error: 404 Not Found\" 1.0.4 这时我们需要修改/etc/yum.repos.d/remi.repo，像这样： baseurl=http://rpms.famillecollet.com/enterprise/5/remi/$basearch/ #mirrorlist=http://rpms.famillecollet.com/enterprise/5/remi/mirror/$basearch/ 1.0.5 如果发现安装后yum makecache没看到相应的源站点，请检查repo文件的enable参数是否为1，1为开启，0为关闭状态。 [repoName] name=repoName repo baseurl=http://repoPath gpgcheck=0 # 是否启用gpgkey检查 enabled=0 # 是否启用该源 1.0.6 Install Redis yum install -y redis [root@zabbix yum.repos.d]# rpm -qi redis Name : redis Version : 3.2.1 Release : 2.el5.remi Architecture: x86_64 Install Date: Thu 28 Jul 2016 12:00:41 PM CST Group : Applications/Databases Size : 2113279 License : BSD Signature : DSA/SHA1, Fri 24 Jun 2016 01:30:12 PM CST, Key ID 004e6f4700f97f56 Source RPM : redis-3.2.1-2.el5.remi.src.rpm Build Date : Fri 24 Jun 2016 01:28:27 PM CST Build Host : builder.remirepo.net Relocations : (not relocatable) Packager : http://blog.remirepo.net/ Vendor : Remi Collet URL : http://redis.io Summary : A persistent key-value database ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:1:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#install-redis"},{"categories":["数据库","Redis"],"content":" 2. Setup 2. 基本配置项 2.0.7 Redis 配置默认文件/etc/redis.conf＃ 设置Redis的运行模式，yes表示后台运行，no表示不开启后台运行。 daemonize yes ＃ 指定 redis 监听端口，默认为 6379 port 6379 ＃ 设置bind_ip，默认监听接口，默认是监听本地，如果未配置的情况下，只有本地可以访问redis，如果取消，则默认监听所有接口 # bind 127.0.0.1 ＃ 指定日志记录级别 # debug 记录很多信息，用于开发和测试 # varbose 很多精简的有用信息，不像 debug 会记录那么多 # notice 普通的 verbose，常用于生产环境 # warning 只有非常重要或者严重的信息会记录到日志 loglevel verbose ＃ 配置 log 文件名称和全路径地址，默认为stdout，即标准输出，输出到/dev/null，可以手动指定redis日志文件地址，建议级别不要太高，否则会产生大量日志，注意避免磁盘因此撑满。 logfile stdout ＃ 可用数据库数，默认值为 16，默认数据库存储在 DB 0 号 ID 库中，无特殊需求，建议仅设置一个数据库 ＃ 查询数据库使用 SELECT ‘dbid’，dbid 介于 0 到 ‘databases’-1 之间。 database 16 ＃ 安全限定，要求客户端在处理任何命令时都要验证身份和设置密码。 ＃ 默认不启用，若要启用，需要将下行取消注释，并将foobared设置自定一的密码接即可。 ＃ 因为redis加密是通过配置文件进行，所以目前各大云厂家的redis PAAS 服务，都不支持redis加密，在程序开发时需要注意。 # requirepass foobared # 如果开启了安全验证，这时通过redis-cli登录时需要首先执行auth，否则不能正常使用。 redis-cli\u003e auth foobared ＃ 向redis内插入一条数据 redis-cli\u003e set [key] [values] ＃ 获取key的值 redis-cli\u003e get key ＃ 查看redis的db信息 redis-cli\u003e info ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:2:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#setup-2-基本配置项"},{"categories":["数据库","Redis"],"content":" 2. Setup 2. 基本配置项 2.0.7 Redis 配置默认文件/etc/redis.conf＃ 设置Redis的运行模式，yes表示后台运行，no表示不开启后台运行。 daemonize yes ＃ 指定 redis 监听端口，默认为 6379 port 6379 ＃ 设置bind_ip，默认监听接口，默认是监听本地，如果未配置的情况下，只有本地可以访问redis，如果取消，则默认监听所有接口 # bind 127.0.0.1 ＃ 指定日志记录级别 # debug 记录很多信息，用于开发和测试 # varbose 很多精简的有用信息，不像 debug 会记录那么多 # notice 普通的 verbose，常用于生产环境 # warning 只有非常重要或者严重的信息会记录到日志 loglevel verbose ＃ 配置 log 文件名称和全路径地址，默认为stdout，即标准输出，输出到/dev/null，可以手动指定redis日志文件地址，建议级别不要太高，否则会产生大量日志，注意避免磁盘因此撑满。 logfile stdout ＃ 可用数据库数，默认值为 16，默认数据库存储在 DB 0 号 ID 库中，无特殊需求，建议仅设置一个数据库 ＃ 查询数据库使用 SELECT ‘dbid’，dbid 介于 0 到 ‘databases’-1 之间。 database 16 ＃ 安全限定，要求客户端在处理任何命令时都要验证身份和设置密码。 ＃ 默认不启用，若要启用，需要将下行取消注释，并将foobared设置自定一的密码接即可。 ＃ 因为redis加密是通过配置文件进行，所以目前各大云厂家的redis PAAS 服务，都不支持redis加密，在程序开发时需要注意。 # requirepass foobared # 如果开启了安全验证，这时通过redis-cli登录时需要首先执行auth，否则不能正常使用。 redis-cli\u003e auth foobared ＃ 向redis内插入一条数据 redis-cli\u003e set [key] [values] ＃ 获取key的值 redis-cli\u003e get key ＃ 查看redis的db信息 redis-cli\u003e info ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:2:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#redis-配置默认文件etcredisconf"},{"categories":["数据库","Redis"],"content":" 3. Setup 3. Others redis-dump master/slave slow log ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:3:0","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#setup-3-others"},{"categories":["数据库","Redis"],"content":" 3.1 Wait … ","date":"2016-07-07","objectID":"https://samzong.me/howto-use-remi-install-redis/:3:1","series":null,"tags":["Yum","Redis","CentOS"],"title":"HowTo Use Remi Install Redis","uri":"https://samzong.me/howto-use-remi-install-redis/#font-colorblackmsis-size45-wait--font"},{"categories":["Linux","CentOS"],"content":"传统我们服务器之间文件共享的方式有采用NFS、Samba等等，但是在我看来配置都有一定的复杂性，当然复杂也有它们的优势，这里推荐一个依赖于SSH的文件共享工具，Fuse-sshfs。 SSH 是一个强大且安全的工具，我们除了可以用它来远程管理主机外，还可以通过它建立 SSH tunnel 作 Proxy 用，远程传输文件等等。而这里我想要介绍另外一个功能，那就是结合 sshfs 这个工具可以把远程主机的文件系统映射到本地主机上，透过 SSH 把远程文件系统挂载到本机上，这样我们可以不必使用 scp 工具就可以做到直接复制及删除远程主机的文件了，就像操作本地磁盘一样方便。 sshfs 是基于 FUSE 构建的 SSH 文件系统客户端程序，通过它远程主机的配置无需作任何改变，就可以透过 SSH 协议来挂载远程文件系统了，非常方便及安全。 ","date":"2016-07-05","objectID":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/:0:0","series":null,"tags":["SSH","CentOS"],"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","uri":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/#"},{"categories":["Linux","CentOS"],"content":" 0.1 Install fuse-sshfs [cent@localhost ~]$ sudo yum install -y epel-relese [cent@localhost ~]$ sudo yum --enablerepo=epel install -y fuse-sshfs ","date":"2016-07-05","objectID":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/:0:1","series":null,"tags":["SSH","CentOS"],"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","uri":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/#install-fuse-sshfs"},{"categories":["Linux","CentOS"],"content":" 0.2 挂载远程 ssh文件系统 [cent@localhost ~]$ mkdir ./mnt [cent@localhost ~]$ sshfs root@192.168.16.230:/home/ ./mnt root@192.168.16.230's password: [cent@localhost ~]$ mount root@192.168.16.230:/home/ on /home/cent/mnt type fuse.sshfs (rw,nosuid,nodev,user=cent) ","date":"2016-07-05","objectID":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/:0:2","series":null,"tags":["SSH","CentOS"],"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","uri":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/#挂载远程-ssh文件系统"},{"categories":["Linux","CentOS"],"content":" 0.3 卸载远程 ssh文件系统 [cent@localhost ~]$ fusermount -u ./mnt ","date":"2016-07-05","objectID":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/:0:3","series":null,"tags":["SSH","CentOS"],"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","uri":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/#卸载远程-ssh文件系统"},{"categories":["Linux","CentOS"],"content":" 0.4 常用参数 -C 压缩，或者-o compression=yes -o reconnect 自动重连 -o transform_symlinks 表示转换绝对链接符号为相对链接符号 -o follow_symlinks 沿用服务器上的链接符号 -o cache=yes -o allow_other 这个参数最重要，必须写，否则任何文件都是Permission Deny ","date":"2016-07-05","objectID":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/:0:4","series":null,"tags":["SSH","CentOS"],"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","uri":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/#常用参数"},{"categories":["Linux","CentOS"],"content":" 0.5 缺点当然sshfs也不尽是优点，例如远程主机失去响应后本地挂载点卡死并影响本地系统使用，需要手工找出 sshfs进程并杀死，因网速问题造成操作响应缓慢等等，不过一般在稳定快速的网络中不太会遇上，对比其强大的功能，还是可以接受的，正所谓暇不掩瑜。 所以sshfs适合内部网络比较稳定的地方 配合ssh免密登录使用会更好哦 可以看到的是sshfs默认挂载是rw的权限，但是通过sshfs –help 可以看到有非常详尽的参数配置可以选择，大家可以仔细研究下。 ","date":"2016-07-05","objectID":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/:0:5","series":null,"tags":["SSH","CentOS"],"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","uri":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/#缺点"},{"categories":["Linux","CentOS"],"content":" 0.6 附1.Link 在windows下可以使用sshfs. ","date":"2016-07-05","objectID":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/:0:6","series":null,"tags":["SSH","CentOS"],"title":"HowTo Use Fuse-sshfs to Mount Remote Filesystems","uri":"https://samzong.me/howto-use-fuse-sshfs-to-mount-remote-filesystems/#附1"},{"categories":["数据库","MySQL"],"content":" 环境：MySQL 5.5 \u0026 MySQL 5.6 \u0026 RHEL/CentOS 5/6/7 ","date":"2016-06-16","objectID":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 常用配置优化","uri":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/#"},{"categories":["数据库","MySQL"],"content":" 0.1 1. MySQL 系统配置优化网络配置方面：修改/etc/sysctl.conf # 增加tcp支持的队列数 net.ipv4.tcp_max_syn_backlog = 65535 # 减少断开时 打开文件限制 修改/etc/security/limits.conf # 增加： * sort nofile 65535 * hard nofile 65535 ","date":"2016-06-16","objectID":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/:0:1","series":null,"tags":["MySQL"],"title":"MySQL 常用配置优化","uri":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/#1-mysql-系统配置优化"},{"categories":["数据库","MySQL"],"content":" 0.2 2. MySQL 配置文件优化 配置文件位置：/etc/my.cnf /etc/mysql/my.cnf 如果/etc下没有my.cnf，需要拷贝一份 cp /usr/share/mysql/my-medium.cnf /etc/my.cnf 配置文件查找顺序：mysql -verbose –help | grep -A 1 ‘Default options’ 常用配置说明: innodb_buffer_pool_size 设置mysql数据库innodb存储缓冲池的大小，如果是独立的mysql服务，建议设置为物理内存的75％左右，如果和apahce等服务一起运行时，则根据实际需求设定，尽可能大。 innodb_buffer_pool_instances 这是mysql5.5中新增的一个参数，用于控制缓冲池的个数，默认情况下只有1个缓冲池，设置多个缓冲池可以增加并发性，提事物运算效率。 innodb_log_buffer_size 设定日志缓冲区的大小，由于体制最长每秒就会刷新，不需要太大。 innodb_flush_log_at_trx_commit 关键参数，对于innodb的IO效率影响很大，默认值为1，可以取值0：不自动同步log到磁盘，由mysql每秒自动执行，1：将所有事物直接写到磁盘，可以用在保证数据绝对安全的地方，会影响效率，2：先将事物纪录保存在内存中，有mysql每秒统一写入磁盘，建议设定为2 innodb_read_io_threads; innodb_write_io_threadsm; mysql5.5 新增的两个参数，决定了Innodb读写的io进程数量，默认为4，可以根据CPU的实际性能设定。 innodb_file_per_table 关键参数，控制Innodb每一个表实用独立的表空间，默认为off，也就是所有的表都会建立在共享空间，不利于资源回收 innodb_stats_on_metadata 决定了mysql在什么情况下会刷新innodb表的统计信息，可以关闭，管理员选取时间手动刷新。存在的目的保证优化器正确找到索引. mysql最大连接数限制 max_connections=5000 不区分表名称大小写 lower_case_table_names=1 修改默认字符编码 # mysql 5.1 default-character-set=utf8 # mysql 5.5 \u0026 mysql 5.6 character-set-server=utf8 最大错误操作次数 : 默认是10，尽量调大，否则容易导致mysql对来访主机锁定 max_connect_errors = 10000 设置mysql时区：默认mysql使用的系统时区，其实我们也可以在mysql内设定时区 default-time_zone = '+8:00' 以上配置，如何在mysql内，检测是否生效 show variables like '%max_connections%' show variables like '%time_zone%' show variables like '%max_connect_errors%' show variables like '%character-set-server%' show variables like '%lower_case_table_names%' 修改/etc/my.cnf这是需要重启mysql才能生效，但是很多时候，我们不方便重启mysql，这时我们需要在mysql临时修改配置，注意并不是所有选项都可以在运行中修改，以修改时区为例： # 修改全局设置 set global time_zone='+8:00' # 修改当前会话 set time_zone='+8:00' ","date":"2016-06-16","objectID":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/:0:2","series":null,"tags":["MySQL"],"title":"MySQL 常用配置优化","uri":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/#2--mysql-配置文件优化"},{"categories":["数据库","MySQL"],"content":" 0.3 3. 第三方工具对mysql配置进行优化 http://toolspercona.com 先回答问题，然后根据问题你给出的答案，网站会给你一个参考配置。 ","date":"2016-06-16","objectID":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/:0:3","series":null,"tags":["MySQL"],"title":"MySQL 常用配置优化","uri":"https://samzong.me/mysql-1-%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96/#3--第三方工具对mysql配置进行优化"},{"categories":["Tomcat"],"content":" 设置JVM空间大小，Xms和Xmx一样大：JVM初始分配的内存由-Xms指定，默认是物理内存的1/64；JVM最大分配的内存由-Xmx指定，默认是物理内存的1/4。默认空余堆内存小于 40%时，JVM就会增大堆直到-Xmx的最大限制；空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。因此服务器一般设置-Xms、 -Xmx相等以避免在每次GC 后调整堆的大小。 关闭dns查询 增加线程数量 maxThreads、acceptCount ： 增加并发，同时增加这两个的数量 内存优化 ： /tomcatbin/catalina.sh JAVA_OPTS=\"-XX:PermSize=64M -XX:MaxPermSize=128m -Xms512m -Xmx1024m -Duser.timezone=Asia/Shanghai\" 缓存优化 并发优化，线程优化 \u003cConnector port=“80” protocol=“HTTP/1.1” maxThreads=“600” minSpareThreads=“100” maxSpareThreads=“500” acceptCount=“700” connectionTimeout=“20000” redirectPort=“8443” /\u003e 关闭DNS查询 :修改server.xml文件中的Connector元素，修改属性enableLookups参数值: enableLookups=“false” 使用apr插件，提高tomcat响应时间 (1)安装APR tomcat-native apr-1.3.8.tar.gz 安装在/usr/local/apr #tar zxvf apr-1.3.8.tar.gz #cd apr-1.3.8 #./configure;make;make install apr-util-1.3.9.tar.gz 安装在/usr/local/apr/lib #tar zxvf apr-util-1.3.9.tar.gz #cd apr-util-1.3.9 #./configure --with-apr=/usr/local/apr ----with-java-home=JDK;make;make install #cd apache-tomcat-6.0.20/bin #tar zxvf tomcat-native.tar.gz #cd tomcat-native/jni/native #./configure --with-apr=/usr/local/apr;make;make install (2)设置 Tomcat 整合 APR 修改 tomcat 的启动 shell （startup.sh），在该文件中加入启动参数： CATALINA_OPTS=\"$CATALINA_OPTS -Djava.library.path=/usr/local/apr/lib\" 。 (3)判断安装成功: 如果看到下面的启动日志，表示成功。 2007-4-26 15:34:32 org.apache.coyote.http11.Http11AprProtocol init 开启manager 管理 使用http://visualvm.Java.net/download.html 工具监控tomcat的性能 JAVA_OPTS=’-Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false' 设置自动更新autodeploy＝false ","date":"2016-06-16","objectID":"https://samzong.me/tomcat-3-%E4%BC%98%E5%8C%96%E8%AE%BE%E5%AE%9A/:0:0","series":null,"tags":["Tomcat"],"title":"Tomcat 优化设定","uri":"https://samzong.me/tomcat-3-%E4%BC%98%E5%8C%96%E8%AE%BE%E5%AE%9A/#"},{"categories":["Linux"],"content":"身为一名服务器运维人员，每天打交道最多的就是服务器了，最常用的连接服务器的工具就是SSH，因为SSH是一个不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响，无意间看到了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。 0.0.1 Mosh 主页 0.0.2 1. 安装配置需要在服务端和客户端同时安装Mosh： ＃ 以centos 6.x 为例： [user@host ~]$ sudo yum install -y epel-release [user@host ~]$ sudo yum install -y mosh 0.0.3 2. 采用SSH配置进行认证登录，只需要将ssh 替换为mosh即可 [user@host ~]$ mosh user@host # 如何需要指定特定的ssh port或者使用ssh keyfile. 可以使用-ssh参数： [user@host ~]$ mosh -ssh=\"ssh -i ~/.ssh/id_rsa -p 10002\" user@host 0.0.4 3. Other另外Mosh还支持使用临时key的方式认证，需要服务器端创建临时key，然后客户端通过这个key进行登录，该key在会话结束的十分钟后自动失效。 # 创建临时key [user@host ~]$ mosh-server MOSH CONNECT 53371 asdAADfdse234LSDSdIbow mosh-server (mosh 1.2.4) Copyright 2012 Keith Winstein \u003cmosh-devel@mit.edu\u003e License GPLv3+: GNU GPL version 3 or later \u003chttp://gnu.org/licenses/gpl.html\u003e. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. [mosh-server detached, pid = 27290] # 然后在client定义MOSH_KEY [user@host ~]$ export MOSH_KEY=asdAADfdse234LSDSdIbow # 注意mosh-client只能跟上具体的ip和临时端口，不支持主机名和域名方式 # 使用临时key连接服务器 [user@host ~]$ mosh-client 10.0.2.4 53371 ","date":"2016-06-16","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","series":null,"tags":["SSH"],"title":"使用mosh代替ssh连接服务器","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/#"},{"categories":["Linux"],"content":"身为一名服务器运维人员，每天打交道最多的就是服务器了，最常用的连接服务器的工具就是SSH，因为SSH是一个不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响，无意间看到了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。 0.0.1 Mosh 主页 0.0.2 1. 安装配置需要在服务端和客户端同时安装Mosh： ＃ 以centos 6.x 为例： [user@host ~]$ sudo yum install -y epel-release [user@host ~]$ sudo yum install -y mosh 0.0.3 2. 采用SSH配置进行认证登录，只需要将ssh 替换为mosh即可 [user@host ~]$ mosh user@host # 如何需要指定特定的ssh port或者使用ssh keyfile. 可以使用-ssh参数： [user@host ~]$ mosh -ssh=\"ssh -i ~/.ssh/id_rsa -p 10002\" user@host 0.0.4 3. Other另外Mosh还支持使用临时key的方式认证，需要服务器端创建临时key，然后客户端通过这个key进行登录，该key在会话结束的十分钟后自动失效。 # 创建临时key [user@host ~]$ mosh-server MOSH CONNECT 53371 asdAADfdse234LSDSdIbow mosh-server (mosh 1.2.4) Copyright 2012 Keith Winstein License GPLv3+: GNU GPL version 3 or later . This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. [mosh-server detached, pid = 27290] # 然后在client定义MOSH_KEY [user@host ~]$ export MOSH_KEY=asdAADfdse234LSDSdIbow # 注意mosh-client只能跟上具体的ip和临时端口，不支持主机名和域名方式 # 使用临时key连接服务器 [user@host ~]$ mosh-client 10.0.2.4 53371 ","date":"2016-06-16","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","series":null,"tags":["SSH"],"title":"使用mosh代替ssh连接服务器","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/#mosh-主页httpsmoshmitedugetting"},{"categories":["Linux"],"content":"身为一名服务器运维人员，每天打交道最多的就是服务器了，最常用的连接服务器的工具就是SSH，因为SSH是一个不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响，无意间看到了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。 0.0.1 Mosh 主页 0.0.2 1. 安装配置需要在服务端和客户端同时安装Mosh： ＃ 以centos 6.x 为例： [user@host ~]$ sudo yum install -y epel-release [user@host ~]$ sudo yum install -y mosh 0.0.3 2. 采用SSH配置进行认证登录，只需要将ssh 替换为mosh即可 [user@host ~]$ mosh user@host # 如何需要指定特定的ssh port或者使用ssh keyfile. 可以使用-ssh参数： [user@host ~]$ mosh -ssh=\"ssh -i ~/.ssh/id_rsa -p 10002\" user@host 0.0.4 3. Other另外Mosh还支持使用临时key的方式认证，需要服务器端创建临时key，然后客户端通过这个key进行登录，该key在会话结束的十分钟后自动失效。 # 创建临时key [user@host ~]$ mosh-server MOSH CONNECT 53371 asdAADfdse234LSDSdIbow mosh-server (mosh 1.2.4) Copyright 2012 Keith Winstein License GPLv3+: GNU GPL version 3 or later . This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. [mosh-server detached, pid = 27290] # 然后在client定义MOSH_KEY [user@host ~]$ export MOSH_KEY=asdAADfdse234LSDSdIbow # 注意mosh-client只能跟上具体的ip和临时端口，不支持主机名和域名方式 # 使用临时key连接服务器 [user@host ~]$ mosh-client 10.0.2.4 53371 ","date":"2016-06-16","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","series":null,"tags":["SSH"],"title":"使用mosh代替ssh连接服务器","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/#1-安装配置"},{"categories":["Linux"],"content":"身为一名服务器运维人员，每天打交道最多的就是服务器了，最常用的连接服务器的工具就是SSH，因为SSH是一个不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响，无意间看到了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。 0.0.1 Mosh 主页 0.0.2 1. 安装配置需要在服务端和客户端同时安装Mosh： ＃ 以centos 6.x 为例： [user@host ~]$ sudo yum install -y epel-release [user@host ~]$ sudo yum install -y mosh 0.0.3 2. 采用SSH配置进行认证登录，只需要将ssh 替换为mosh即可 [user@host ~]$ mosh user@host # 如何需要指定特定的ssh port或者使用ssh keyfile. 可以使用-ssh参数： [user@host ~]$ mosh -ssh=\"ssh -i ~/.ssh/id_rsa -p 10002\" user@host 0.0.4 3. Other另外Mosh还支持使用临时key的方式认证，需要服务器端创建临时key，然后客户端通过这个key进行登录，该key在会话结束的十分钟后自动失效。 # 创建临时key [user@host ~]$ mosh-server MOSH CONNECT 53371 asdAADfdse234LSDSdIbow mosh-server (mosh 1.2.4) Copyright 2012 Keith Winstein License GPLv3+: GNU GPL version 3 or later . This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. [mosh-server detached, pid = 27290] # 然后在client定义MOSH_KEY [user@host ~]$ export MOSH_KEY=asdAADfdse234LSDSdIbow # 注意mosh-client只能跟上具体的ip和临时端口，不支持主机名和域名方式 # 使用临时key连接服务器 [user@host ~]$ mosh-client 10.0.2.4 53371 ","date":"2016-06-16","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","series":null,"tags":["SSH"],"title":"使用mosh代替ssh连接服务器","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/#2-采用ssh配置进行认证登录只需要将ssh-替换为mosh即可"},{"categories":["Linux"],"content":"身为一名服务器运维人员，每天打交道最多的就是服务器了，最常用的连接服务器的工具就是SSH，因为SSH是一个不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响，无意间看到了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。 0.0.1 Mosh 主页 0.0.2 1. 安装配置需要在服务端和客户端同时安装Mosh： ＃ 以centos 6.x 为例： [user@host ~]$ sudo yum install -y epel-release [user@host ~]$ sudo yum install -y mosh 0.0.3 2. 采用SSH配置进行认证登录，只需要将ssh 替换为mosh即可 [user@host ~]$ mosh user@host # 如何需要指定特定的ssh port或者使用ssh keyfile. 可以使用-ssh参数： [user@host ~]$ mosh -ssh=\"ssh -i ~/.ssh/id_rsa -p 10002\" user@host 0.0.4 3. Other另外Mosh还支持使用临时key的方式认证，需要服务器端创建临时key，然后客户端通过这个key进行登录，该key在会话结束的十分钟后自动失效。 # 创建临时key [user@host ~]$ mosh-server MOSH CONNECT 53371 asdAADfdse234LSDSdIbow mosh-server (mosh 1.2.4) Copyright 2012 Keith Winstein License GPLv3+: GNU GPL version 3 or later . This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. [mosh-server detached, pid = 27290] # 然后在client定义MOSH_KEY [user@host ~]$ export MOSH_KEY=asdAADfdse234LSDSdIbow # 注意mosh-client只能跟上具体的ip和临时端口，不支持主机名和域名方式 # 使用临时key连接服务器 [user@host ~]$ mosh-client 10.0.2.4 53371 ","date":"2016-06-16","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","series":null,"tags":["SSH"],"title":"使用mosh代替ssh连接服务器","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8mosh%E4%BB%A3%E6%9B%BFssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/#3-other"},{"categories":["云服务","Azure"],"content":" ## Install azure-cli on Mac and CentOS ### In Mac 1. Install brew. 2. brew install nodejs 3. echo “registry = https://registry.npm.taobao.org” \u003e ~/.npmrc 4. npm install azure-cli -g ### In CentOS 1. Install epel 2. yum install -y nodejs npm 3. echo “registry = https://registry.npm.taobao.org” \u003e ~/.npmrc 4. npm install azure-cli -g ","date":"2016-05-24","objectID":"https://samzong.me/azure-2-howto-use-azure-cli-on-mac/:0:0","series":null,"tags":["Azure"],"title":"HowTo Use Azure CLI on Mac","uri":"https://samzong.me/azure-2-howto-use-azure-cli-on-mac/#"},{"categories":["OpenSource","Zabbix"],"content":" 1. 安装插件包 yum install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm -y yum install percona-zabbix-templates.noarch -y yum install php* -y ","date":"2016-05-20","objectID":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/:1:0","series":null,"tags":["MySQL","Zabbix"],"title":"HowTo Monitoring MySQL server for Zabbix","uri":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/#安装插件包"},{"categories":["OpenSource","Zabbix"],"content":" 2. 导入模板把/var/lib/zabbix/percona/templates/zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.6.xml 文件拷贝出来，通过Zabbix的监控页面导入: ConfigurationTemplatesImport(在右上角) 选择导出的模板文件，点击Import完成导入 ","date":"2016-05-20","objectID":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/:2:0","series":null,"tags":["MySQL","Zabbix"],"title":"HowTo Monitoring MySQL server for Zabbix","uri":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/#导入模板"},{"categories":["OpenSource","Zabbix"],"content":" 3. 安装Agent rpm -ivh http://repo.zabbix.com/zabbix/2.4/rhel/6/x86_64/zabbix-release-2.4-1.el6.noarch.rpm yum install zabbix-agent vim /etc/zabbix/zabbix-agentd.conf #配置监控服务器地址 Server=192.168.1.15 #导入配置文件 cp /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf /etc/zabbix/zabbix_agentd.d/ #重启agent service zabbix-agent restart ","date":"2016-05-20","objectID":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/:3:0","series":null,"tags":["MySQL","Zabbix"],"title":"HowTo Monitoring MySQL server for Zabbix","uri":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/#安装agent"},{"categories":["OpenSource","Zabbix"],"content":" 4. Mysql新建用户登陆Mysql数据库，新建一个本地的只有查询权限的mysql用户 grant select on . to ‘percona’@’localhost’ identified by ‘percona’; flush tables; ","date":"2016-05-20","objectID":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/:4:0","series":null,"tags":["MySQL","Zabbix"],"title":"HowTo Monitoring MySQL server for Zabbix","uri":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/#mysql新建用户"},{"categories":["OpenSource","Zabbix"],"content":" 5. 配置Percona插件修改插件使用的mysql用户名密码 sed -i s/cactiuser/percona/g /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php ","date":"2016-05-20","objectID":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/:5:0","series":null,"tags":["MySQL","Zabbix"],"title":"HowTo Monitoring MySQL server for Zabbix","uri":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/#配置percona插件"},{"categories":["OpenSource","Zabbix"],"content":" 6. 测试测试是否可以获取到值 cd /var/lib/zabbix/percona/scripts/ ./get_mysql_stats_wrapper.sh gg 如果获取到值，则说明配置成功 注意：执行完脚本后，请手动删除/tmp/文件夹下生成的*-mysql_cacti_stats.txt文件，然后让程序自己调用创建新文件。 ","date":"2016-05-20","objectID":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/:6:0","series":null,"tags":["MySQL","Zabbix"],"title":"HowTo Monitoring MySQL server for Zabbix","uri":"https://samzong.me/howto-monitoring-mysql-server-for-zabbix/#测试"},{"categories":["虚拟化","CloudStack"],"content":" #!/bin/bash # Install CloudStack.sh # setting static ip in : /etc/sysconfig/network-scripts/ifcfg-eth0 # Check Service # Install # hostname --fqdn # service network restart # trun off selinux in : /etc/selinux/config #SELinux=disabed # trun off iptables. service iptables stop service ip6tables stop chkconfig iptables off chkconfig ip6tables off #NTP yum install -y ntp chkconfig ntpd on service ntpd start # adding cloudstack repos [cloudstack] name=cloudstack baseurl=http://cloudstack.apt-get.eu/centos/6/4.5/ enabled=1 gpgcheck=0 #NFS yum install -y nfs-utils # /etc/exports /secondary *(rw,async,no_root_squash,no_subtree_check) /primary *(rw,async,no_root_squash,no_subtree_check) # add top to /etc/sysconfig/nfs LOCKD_TCPPORT=32803 LOCKD_UDPPORT=32769 MOUNTD_PORT=892 RQUOTAD_PORT=875 STATD_PORT=662 STATD_OUTGOING_PORT=2020 # add iptable rules to /etc/sysconfig/iptables -A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 111 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 111 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 2049 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 32803 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 32769 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 892 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 892 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 875 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 875 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p tcp --dport 662 -j ACCEPT -A INPUT -s 172.16.10.0/24 -m state --state NEW -p udp --dport 662 -j ACCEPT # service iptables restart service rpcbind start service nfs start chkconfig rpcbind on chkconfig nfs on # MySQL server yum install -y mysql-server # adding configure file in /etc/my.cnf : [mysqld] innodb_rollback_on_timeout=1 innodb_lock_wait_timeout=600 max_connections=350 log-bin=mysql-bin binlog-format = 'ROW' service mysqld start chkconfig mysqld on mysql_secure_installation # remeber the root pass. # Cloudstack-management yum -y install cloudstack-management cloudstack-setup-databases cloud:[password]@localhost --deploy-as=root:[password] cloudstack-setup-management #System Template Setup /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m /secondary -u http://cloudstack.apt-get.eu/systemvm/4.6/systemvm64template-4.6.0-kvm.qcow2.bz2 -h kvm -F # Install kvm yum -y install cloudstack-agent # qemu configuration : /etc/libvirt/qemu.conf vnc_listen=0.0.0.0 # Libvirt Configuration : /etc/libvirt/libvirtd.conf listen_tls = 0 listen_tcp = 1 tcp_port = \"16059\" auth_tcp = \"none\" mdns_adv = 0 # /etc/sysconfig/libvirtd LIBVIRTD_ARGS=\"--listen\" service libvirtd restart lsmod | grep kvm: kvm_intel 55496 0 kvm 337772 1 kvm_intel ##### UI Setting #### http://[ip]:8080/client ","date":"2016-05-18","objectID":"https://samzong.me/howto-install-cloudstack-4-8-on-centos-6-x/:0:0","series":null,"tags":["CloudStack"],"title":"HowTo Install CloudStack 4.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-cloudstack-4-8-on-centos-6-x/#"},{"categories":["云服务","Azure"],"content":"我们以管理员身份，运行PowerShell，执行以下命令。实现创建Standard类型，大小为13GB的Redis Cache #弹出界面输入用户名密码 Add-AzureAccount -Environment AzureChinaCloud #设置当前订阅名称 Select-AzureSubscription '[SubscriptionName]' –Current Switch-AzureMode -name AzureResourceManager #在中国东部数据中心，创建新的资源组 New-AzureResourceGroup -name [YourResourceGroupName] -Location 'China East' #在中国东部数据中心，申请13GB的Redis Cache，类型为Standard，有SLA保证 New-AzureRedisCache -ResourceGroupName [YourResourceGroupName] -Name [RedisCacheName] -Location 'China East' -sku 'Standard' -Size '13GB' ","date":"2016-05-12","objectID":"https://samzong.me/azure-4-%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8azure-redis-cache/:0:0","series":null,"tags":["Azure"],"title":"创建和使用Azure Redis Cache","uri":"https://samzong.me/azure-4-%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8azure-redis-cache/#"},{"categories":["OpenSource"],"content":" Installed CentOS 7. yum update -y reboot yum install -y epel-release python -V # 2.7 version yum install -y pyhton-devel python-pip python-setuptools pycrypto pip install fabric ","date":"2016-05-05","objectID":"https://samzong.me/howto-install-fabric-on-centos-7-x/:0:0","series":null,"tags":["Fabric"],"title":"HowTo Install Fabric on CentOS 7.x","uri":"https://samzong.me/howto-install-fabric-on-centos-7-x/#"},{"categories":["Linux","CentOS"],"content":" 1. 关闭防火墙： systemctl stop firewalld.service # 关闭 systemctl disable firewalld.service # 开机不自启动 ","date":"2016-05-05","objectID":"https://samzong.me/centos-7-2-%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/:1:0","series":null,"tags":["CentOS"],"title":"CentOS 系统服务管理方式","uri":"https://samzong.me/centos-7-2-%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/#关闭防火墙"},{"categories":["Linux","CentOS"],"content":" 1. CentOS 7 修改主机名","date":"2016-05-05","objectID":"https://samzong.me/centos-7-1-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E4%B8%BB%E6%9C%BA%E5%90%8D/:1:0","series":null,"tags":["CentOS"],"title":"CentOS 修改系统主机名","uri":"https://samzong.me/centos-7-1-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E4%B8%BB%E6%9C%BA%E5%90%8D/#centos-7-修改主机名"},{"categories":["Linux","CentOS"],"content":" 1.1 方法1: hostname 主机名这种方式，只能修改临时的主机名，当重启机器后，主机名称又变回来了。 ","date":"2016-05-05","objectID":"https://samzong.me/centos-7-1-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E4%B8%BB%E6%9C%BA%E5%90%8D/:1:1","series":null,"tags":["CentOS"],"title":"CentOS 修改系统主机名","uri":"https://samzong.me/centos-7-1-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E4%B8%BB%E6%9C%BA%E5%90%8D/#方法1-code-hostname-主机名code"},{"categories":["Linux","CentOS"],"content":" 1.2 方法2: hostnamectl set-hostname \u003c主机名\u003e 使用这种方式修改，可以永久性的修改主机名称！ ","date":"2016-05-05","objectID":"https://samzong.me/centos-7-1-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E4%B8%BB%E6%9C%BA%E5%90%8D/:1:2","series":null,"tags":["CentOS"],"title":"CentOS 修改系统主机名","uri":"https://samzong.me/centos-7-1-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E4%B8%BB%E6%9C%BA%E5%90%8D/#方法2-code-hostnamectl-set-hostname-主机名--code"},{"categories":["数据库","MySQL"],"content":"常用的mysqldump命令组合。 ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:0:0","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#"},{"categories":["数据库","MySQL"],"content":" 1. 备份数据库 mysqldump db_name \u003e bak_name.sql mysqldump -A -u [dbuser] -p db_name \u003e bak_name.sql mysqldump -d -A --add-drop-table -uroot -p \u003exxx.sql ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:1:0","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#备份数据库"},{"categories":["数据库","MySQL"],"content":" 2. 备份所有库到一个单独的文件 mysql -e 'show databases' | sed -n '2,$p' | xargs -I DB 'mysqldump DB \u003e DB.sql' ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:2:0","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#备份所有库到一个单独的文件"},{"categories":["数据库","MySQL"],"content":" 2.1 1. 导出结构不导出数据 mysqldump　--opt　-d　db_name　-u　root　-p　\u003e　xxx.sql ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:2:1","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#1-导出结构不导出数据"},{"categories":["数据库","MySQL"],"content":" 2.2 2. 导出数据不导出结构 mysqldump　-t　db_name　-uroot　-p　\u003e　xxx.sql ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:2:2","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#2-导出数据不导出结构"},{"categories":["数据库","MySQL"],"content":" 2.3 3. 导出数据和表结构 mysqldump　db_name　-uroot　-p　\u003e　xxx.sql ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:2:3","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#3-导出数据和表结构"},{"categories":["数据库","MySQL"],"content":" 2.4 4. 导出特定表的结构 mysqldump　-uroot　-p　-B　db_name　--table　tb_name　\u003e　xxx.sql ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:2:4","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#4-导出特定表的结构"},{"categories":["数据库","MySQL"],"content":" 3. 导入数据因为mysqldump导出的是完整的SQL语句，所以用mysql客户程序很容易就能把数据导入了： mysql -u db_user -p db_name \u003c xxx.sql mysql\u003e source /path/xxx.sql ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:3:0","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#导入数据"},{"categories":["数据库","MySQL"],"content":" 4. mysqldump参数详解：–all-databases , -A 导出全部数据库 mysqldump -uroot -p –all-databases –all-tablespaces , -Y 导出全部表空间 mysqldump -uroot -p –all-databases –all-tablespaces –no-tablespaces , -y 不导出任何表空间信息 mysqldump -uroot -p –all-databases –no-tablespaces –add-drop-database 每个数据库创建之前添加drop数据库语句 mysqldump -uroot -p –all-databases –add-drop-database –add-drop-table 每个数据表创建之前添加drop数据表语句。(默认为打开状态，使用–skip-add-drop-table取消选项) mysqldump -uroot -p –all-databases (默认添加drop语句) mysqldump -uroot -p –all-databases –skip-add-drop-table (取消drop语句) –add-locks 在每个表导出之前增加LOCK TABLES并且之后UNLOCK TABLE。(默认为打开状态，使用–skip-add-locks取消选项) mysqldump -uroot -p –all-databases(默认添加LOCK语句) mysqldump -uroot -p –all-databases –skip-add-locks (取消LOCK语句) –comments 附加注释信息。 默认为打开，可以用–skip-comments取消mysqldump -uroot -p –all-databases (默认记录注释)mysqldump -uroot -p –all-databases “code” skip-comments (取消注释) –compact 导出更少的输出信息(用于调试),去掉注释和头尾等结构,可以使用选项：–skip-add-drop-table –skip-add-locks –skip-comments –skip-disable-keys mysqldump -uroot -p –all-databases –compact –complete-insert, -c 使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。 mysqldump -uroot -p –all-databases –complete-insert –compress, -C 在客户端和服务器之间启用压缩传递所有信息 mysqldump -uroot -p –all-databases –compress –databases, -B 导出几个数据库。参数后面所有名字参量都被看作数据库名。 mysqldump -uroot -p –databases test mysql –debug 输出debug信息，用于调试。 默认值为：d:t:o,/tmp/mysqldump.trace mysqldump -uroot -p –all-databases –debug mysqldump -uroot -p –all-databases –debug=“d:t:o,/tmp/debug.trace” –debug-info 输出调试信息并退出 mysqldump -uroot -p –all-databases –debug-info –default-character-set 设置默认字符集，默认值为utf8 mysqldump -uroot -p –all-databases –default-character-set=latin1 –delayed-insert 采用延时插入方式（INSERT DELAYED）导出数据 mysqldump -uroot -p –all-databases –delayed-insert –events, -E 导出事件 mysqldump -uroot -p –all-databases –events –flush-logs 开始导出之前刷新日志 请注意：假如一次导出多个数据库(使用选项–databases或者–all-databases)，将会逐个数据库刷新日志。除使用–lock-all-tables或者–master-data外。在这种情况下，日志将会被刷新一次，相应的所以表同时被锁定。因此，如果打算同时导出和刷新日志应该使用–lock-all-tables 或者–master-data 和–flush-logs. mysqldump -uroot -p –all-databases –flush-logs –flush-privileges 在导出mysql数据库之后，发出一条FLUSH PRIVILEGES 语句。为了正确恢复，该选项应该用于导出mysql数据库和依赖mysql数据库数据的任何时候。 mysqldump -uroot -p –all-databases –flush-privileges –force 在导出过程中忽略出现的SQL错误 mysqldump -uroot -p –all-databases –force –host, -h 需要导出的主机信息 mysqldump -uroot -p –host=localhost –all-databases –ignore-table 不导出指定表。 指定忽略多个表时，需要重复多次，每次一个表。每个表必须同时指定数据库和表名. 例如： –ignore-table=database.table1 –ignore-table=database.table2 …… mysqldump -uroot -p –host=localhost –all-databases –ignore-table=mysql.user –lock-all-tables, -x 提交请求锁定所有数据库中的所有表，以保证数据的一致性。 这是一个全局读锁，并且自动关闭–single-transaction 和–lock-tables 选项。 mysqldump -uroot -p –host=localhost –all-databases –lock-all-tables –lock-tables, -l 开始导出前，锁定所有表。 用READ LOCAL锁定表以允许MyISAM表并行插入。对于支持事务的表例如InnoDB和BDB，–single-transaction是一个更好的选择，因为它根本不需要锁定表. 请注意当导出多个数据库时，–lock-tables分别为每个数据库锁定表。因此，该选项不能保证导出文件中的表在数据库之间的逻辑一致性。不同数据库表的导出状态可以完全不同。 mysqldump -uroot -p –host=localhost –all-databases –lock-tables –no-create-db, -n 只导出数据，而不添加CREATE DATABASE 语句。 mysqldump -uroot -p –host=localhost –all-databases –no-create-db –no-create-info,-t 只导出数据，而不添加CREATE TABLE 语句 mysqldump -uroot -p –host=localhost –all-databases –no-create-info –no-data, -d 不导出任何数据，只导出数据库表结构 mysqldump -uroot -p –host=localhost –all-databases –no-data –password, -p 连接数据库密码 –port, -P 连接数据库端口号 –user, -u 指定连接的用户名。 ","date":"2016-05-05","objectID":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/:4:0","series":null,"tags":["MySQL"],"title":"mysqldump 常用参数","uri":"https://samzong.me/mysql-3-mysqldump%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/#mysqldump参数详解"},{"categories":["Python"],"content":"CentOS 6.5 still come with Python 2.6 and I need 2.7, below a simple tutorial how to achieve this with no pain and not messing with installed Python. Update CentOS and install development tools yum -y update yum groupinstall -y 'development tools' Also you need the packages below to enable SSL, bz2, zlib for Python and some utils: yum install -y zlib-devel bzip2-devel openssl-devel xz-libs wget ","date":"2016-05-04","objectID":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/:0:0","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python 2.7.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/#"},{"categories":["Python"],"content":" 1. Installing Python 2.7.8 from sourceDownload Python and extract it wget http://www.python.org/ftp/python/2.7.8/Python-2.7.8.tar.xz xz -d Python-2.7.8.tar.xz tar -xvf Python-2.7.8.tar ","date":"2016-05-04","objectID":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/:1:0","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python 2.7.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/#installing-python-278-from-source"},{"categories":["Python"],"content":" 2. Installation processSince we already installed all the dependencies we are ready to go: # Enter the directory: cd Python-2.7.8 # Run the configure: ./configure --prefix=/usr/local # compile and install it: make make altinstall # Checking Python version: [root@nicetry ~]# python2.7 -V Python 2.7.8 If you need set PATH variable check the line below: export PATH=\"/usr/local/bin:$PATH\" ","date":"2016-05-04","objectID":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/:2:0","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python 2.7.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/#installation-process"},{"categories":["Python"],"content":" 3. Installing pip and virtualenvNow we have Python installed, but something is missing isn’t? Yes! We need pip and virtualenv. ","date":"2016-05-04","objectID":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/:3:0","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python 2.7.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/#installing-pip-and-virtualenv"},{"categories":["Python"],"content":" 3.1 Install setuptools wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz # Extract the files: tar -xvf setuptools-1.4.2.tar.gz cd setuptools-1.4.2 # Install setuptools using the Python 2.7.8: python2.7 setup.py install ","date":"2016-05-04","objectID":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/:3:1","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python 2.7.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/#install-setuptools"},{"categories":["Python"],"content":" 3.2 Install pip curl https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py | python2.7 - ","date":"2016-05-04","objectID":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/:3:2","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python 2.7.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/#install-pip"},{"categories":["Python"],"content":" 3.3 And finally virtualenv pip2.7 install virtualenv And that’s all, we have Python 2.7.8 installed on CentOS. ","date":"2016-05-04","objectID":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/:3:3","series":null,"tags":["Python","CentOS"],"title":"HowTo Install Python 2.7.8 on CentOS 6.x","uri":"https://samzong.me/howto-install-python-2-7-8-on-centos-6-x/#and-finally-virtualenv"},{"categories":["OpenSource"],"content":"This is what about piwik on wiki. goto ","date":"2016-04-27","objectID":"https://samzong.me/howto-add-piwik-tracking-to-ghost/:0:0","series":null,"tags":["Piwik"],"title":"HowTo Add Piwik Tracking to Ghost","uri":"https://samzong.me/howto-add-piwik-tracking-to-ghost/#"},{"categories":["OpenSource"],"content":" 1. Step 1 - Getting your Piwik Tracking codeThe first step to having Piwik tracking your Ghost blog will be to add a new website in Piwik, if you are unfamiliar with this process you can checkout the Piwik documention on Managing Websites. With your Ghost blog added into Piwik you will end up with tracking code that will look similar to the following: \u003c!-- Piwik --\u003e \u003cscript type=\"text/javascript\"\u003e var _paq = _paq || []; (function(){ var u=((\"https:\" == document.location.protocol) ? \"https://{$PIWIK_URL}/\" : \"http://{$PIWIK_URL}/\"); _paq.push(['setSiteId', {$IDSITE}]); _paq.push(['setTrackerUrl', u+'piwik.php']); _paq.push(['trackPageView']); _paq.push(['enableLinkTracking']); var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0]; g.type='text/javascript'; g.defer=true; g.async=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s); })(); \u003c/script\u003e \u003c!-- End Piwik Code --\u003e Where $PIWIK_URL will be the domain name you have setup for Piwik. ","date":"2016-04-27","objectID":"https://samzong.me/howto-add-piwik-tracking-to-ghost/:1:0","series":null,"tags":["Piwik"],"title":"HowTo Add Piwik Tracking to Ghost","uri":"https://samzong.me/howto-add-piwik-tracking-to-ghost/#step-1---getting-your-piwik-tracking-code"},{"categories":["OpenSource"],"content":" 2. Step 2 - Adding Piwik Tracking Code To Ghost Theme FilePiwik recommends that you add the tracking code right above the \u003c/body\u003e tag, which you can find in your Ghost’s default.hbs theme file. You will find the default.hbs file in /path/to/ghost/content/themes/your-theme/default.hbs How you add the tracking code to your default.hbs will depend on if you are editing the file on your local computer or directly on the server. If you are editing your theme locally you can edit this file in any text editor and when you are finished upload this file to your server. Otherwise if you are editing this file directly on the server you can use the command line editor, vim, to add the tracking code. ","date":"2016-04-27","objectID":"https://samzong.me/howto-add-piwik-tracking-to-ghost/:2:0","series":null,"tags":["Piwik"],"title":"HowTo Add Piwik Tracking to Ghost","uri":"https://samzong.me/howto-add-piwik-tracking-to-ghost/#step-2---adding-piwik-tracking-code-to-ghost-theme-file"},{"categories":["OpenSource"],"content":" 3. Step 3 - Restart GhostFor the changes in your theme to take effect you will need to restart Ghost. Restarting Ghost will load up a fresh copy of your theme files, with your Piwik tracking code. How you restart Ghost depends on how you started Ghost. If you followed our Keep Ghost Running with forever, then you can restart Ghost with forever restart ghost. Within a few moments you will start to see data coming in for your Ghost blog! If you have any questions about setting this up or run into any issues please leave us a comment below and we will do what we can to help. ","date":"2016-04-27","objectID":"https://samzong.me/howto-add-piwik-tracking-to-ghost/:3:0","series":null,"tags":["Piwik"],"title":"HowTo Add Piwik Tracking to Ghost","uri":"https://samzong.me/howto-add-piwik-tracking-to-ghost/#step-3---restart-ghost"},{"categories":["OpenSource","Piwik"],"content":" 0.1 This is my nginx config. server { listen blog.ultraera.org:80; server_name blog.ultraera.org; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2368; } } server { listen piwik.ultraera.org:80; server_name piwik.ultraera.org; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2080; } } ","date":"2016-04-27","objectID":"https://samzong.me/howto-install-piwik-with-nginx-on-centos-6-x/:0:1","series":null,"tags":["Piwik"],"title":"HowTo Install piwik with nginx on centos 6.x","uri":"https://samzong.me/howto-install-piwik-with-nginx-on-centos-6-x/#this-is-my-nginx-config"},{"categories":["Git","SourceTree"],"content":" 0.0.0.0.1 Update update: Windows用户在初始化Souretree工具时，需要用到Atlassian ID，新建用户时需要加载google 验证码，这一步需要VPN的支持，请注意。 找到一个版本的SourceTree工具可以不需要以上验证也能使用，下载链接：SourceTreeSetup_1.6.14.exe 密码：c5l4 0.0.0.1 补充1 ：Git学习网站 猴子都能学会的git教程 常用 Git 命令清单 廖雪峰的git教程 Why Git is Better than X 0.0.0.2 补充2 ：利用Git协同开发 团队中的Git实践 Git 使用规范流程 Git分支管理模型 图解Git ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:0:0","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#"},{"categories":["Git","SourceTree"],"content":" 0.0.0.0.1 Update update: Windows用户在初始化Souretree工具时，需要用到Atlassian ID，新建用户时需要加载google 验证码，这一步需要VPN的支持，请注意。 找到一个版本的SourceTree工具可以不需要以上验证也能使用，下载链接：SourceTreeSetup_1.6.14.exe 密码：c5l4 0.0.0.1 补充1 ：Git学习网站 猴子都能学会的git教程 常用 Git 命令清单 廖雪峰的git教程 Why Git is Better than X 0.0.0.2 补充2 ：利用Git协同开发 团队中的Git实践 Git 使用规范流程 Git分支管理模型 图解Git ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:0:0","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#update"},{"categories":["Git","SourceTree"],"content":" 0.0.0.0.1 Update update: Windows用户在初始化Souretree工具时，需要用到Atlassian ID，新建用户时需要加载google 验证码，这一步需要VPN的支持，请注意。 找到一个版本的SourceTree工具可以不需要以上验证也能使用，下载链接：SourceTreeSetup_1.6.14.exe 密码：c5l4 0.0.0.1 补充1 ：Git学习网站 猴子都能学会的git教程 常用 Git 命令清单 廖雪峰的git教程 Why Git is Better than X 0.0.0.2 补充2 ：利用Git协同开发 团队中的Git实践 Git 使用规范流程 Git分支管理模型 图解Git ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:0:0","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#补充1-git学习网站"},{"categories":["Git","SourceTree"],"content":" 0.0.0.0.1 Update update: Windows用户在初始化Souretree工具时，需要用到Atlassian ID，新建用户时需要加载google 验证码，这一步需要VPN的支持，请注意。 找到一个版本的SourceTree工具可以不需要以上验证也能使用，下载链接：SourceTreeSetup_1.6.14.exe 密码：c5l4 0.0.0.1 补充1 ：Git学习网站 猴子都能学会的git教程 常用 Git 命令清单 廖雪峰的git教程 Why Git is Better than X 0.0.0.2 补充2 ：利用Git协同开发 团队中的Git实践 Git 使用规范流程 Git分支管理模型 图解Git ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:0:0","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#补充2-利用git协同开发"},{"categories":["Git","SourceTree"],"content":" 1. 1. 关于 SourceTree 1.0.1 SourceTree 是一款免费且同时支持Windows 和Mac 的git项目管理软件，本文旨在给大家介绍这款应用的基础使用，并用它来管理你的项目。 官网： https://www.sourcetreeapp.com/ ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:1:0","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#1-关于-sourcetree"},{"categories":["Git","SourceTree"],"content":" 1. 1. 关于 SourceTree 1.0.1 SourceTree 是一款免费且同时支持Windows 和Mac 的git项目管理软件，本文旨在给大家介绍这款应用的基础使用，并用它来管理你的项目。 官网： https://www.sourcetreeapp.com/ ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:1:0","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#sourcetree-是一款免费且同时支持windows-和mac-的git项目管理软件本文旨在给大家介绍这款应用的基础使用并用它来管理你的项目"},{"categories":["Git","SourceTree"],"content":" 2. 2. git帐号建立","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:0","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#2-git帐号建立"},{"categories":["Git","SourceTree"],"content":" 2.1 1. 新员工入职之后，你的公司邮箱内会收到一封来自Gitlab的邮件，如下图： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:1","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#1-新员工入职之后你的公司邮箱内会收到一封来自gitlab的邮件如下图"},{"categories":["Git","SourceTree"],"content":" 2.2 2. 点击邮件中的 “Click here to set your password”，设置gitlab登陆密码。 ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:2","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#2-点击邮件中的-click-here-to-set-your-password设置gitlab登陆密码"},{"categories":["Git","SourceTree"],"content":" 2.3 3. 登陆gitlab帐号，将会出现这个界面： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:3","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#3-登陆gitlab帐号将会出现这个界面"},{"categories":["Git","SourceTree"],"content":" 2.4 4. 设定个人信息： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:4","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#4-设定个人信息"},{"categories":["Git","SourceTree"],"content":" 2.5 5. sshKey 2.5.1 5.1 在Linux和Mac上生成sshkey： ➜ ~ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/Alex/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/Alex/.ssh/id_rsa. Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub. The key fingerprint is: SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-Mac The key's randomart image is: +---[RSA 2048]----+ | ..oo. +=. | | ... oo ..| | .. o.o.| | o . +E+| | S = **=| | = * .=BB| | * o oOO| | . +o*| | .oo| +----[SHA256]-----+ ➜ ~ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac ➜ ~ 2.5.2 5.2 在Windows上生成sshkey： 2.5.3 因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址 2.5.4 步骤如下： 2.5.5 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 2.5.6 5.3 上传sshkey： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:5","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#5-sshkey"},{"categories":["Git","SourceTree"],"content":" 2.5 5. sshKey 2.5.1 5.1 在Linux和Mac上生成sshkey： ➜ ~ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/Alex/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/Alex/.ssh/id_rsa. Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub. The key fingerprint is: SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-Mac The key's randomart image is: +---[RSA 2048]----+ | ..oo. +=. | | ... oo ..| | .. o.o.| | o . +E+| | S = **=| | = * .=BB| | * o oOO| | . +o*| | .oo| +----[SHA256]-----+ ➜ ~ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac ➜ ~ 2.5.2 5.2 在Windows上生成sshkey： 2.5.3 因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址 2.5.4 步骤如下： 2.5.5 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 2.5.6 5.3 上传sshkey： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:5","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#51-在linux和mac上生成sshkey"},{"categories":["Git","SourceTree"],"content":" 2.5 5. sshKey 2.5.1 5.1 在Linux和Mac上生成sshkey： ➜ ~ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/Alex/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/Alex/.ssh/id_rsa. Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub. The key fingerprint is: SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-Mac The key's randomart image is: +---[RSA 2048]----+ | ..oo. +=. | | ... oo ..| | .. o.o.| | o . +E+| | S = **=| | = * .=BB| | * o oOO| | . +o*| | .oo| +----[SHA256]-----+ ➜ ~ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac ➜ ~ 2.5.2 5.2 在Windows上生成sshkey： 2.5.3 因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址 2.5.4 步骤如下： 2.5.5 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 2.5.6 5.3 上传sshkey： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:5","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#52-在windows上生成sshkey"},{"categories":["Git","SourceTree"],"content":" 2.5 5. sshKey 2.5.1 5.1 在Linux和Mac上生成sshkey： ➜ ~ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/Alex/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/Alex/.ssh/id_rsa. Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub. The key fingerprint is: SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-Mac The key's randomart image is: +---[RSA 2048]----+ | ..oo. +=. | | ... oo ..| | .. o.o.| | o . +E+| | S = **=| | = * .=BB| | * o oOO| | . +o*| | .oo| +----[SHA256]-----+ ➜ ~ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac ➜ ~ 2.5.2 5.2 在Windows上生成sshkey： 2.5.3 因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址 2.5.4 步骤如下： 2.5.5 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 2.5.6 5.3 上传sshkey： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:5","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#因为windows没有自带openssl模块所以在windows环境中使用第三方工具puttygenexe生成sshkey-下载地址httptheearthlisgtathamputty067x86puttygenexe"},{"categories":["Git","SourceTree"],"content":" 2.5 5. sshKey 2.5.1 5.1 在Linux和Mac上生成sshkey： ➜ ~ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/Alex/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/Alex/.ssh/id_rsa. Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub. The key fingerprint is: SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-Mac The key's randomart image is: +---[RSA 2048]----+ | ..oo. +=. | | ... oo ..| | .. o.o.| | o . +E+| | S = **=| | = * .=BB| | * o oOO| | . +o*| | .oo| +----[SHA256]-----+ ➜ ~ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac ➜ ~ 2.5.2 5.2 在Windows上生成sshkey： 2.5.3 因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址 2.5.4 步骤如下： 2.5.5 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 2.5.6 5.3 上传sshkey： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:5","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#步骤如下"},{"categories":["Git","SourceTree"],"content":" 2.5 5. sshKey 2.5.1 5.1 在Linux和Mac上生成sshkey： ➜ ~ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/Alex/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/Alex/.ssh/id_rsa. Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub. The key fingerprint is: SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-Mac The key's randomart image is: +---[RSA 2048]----+ | ..oo. +=. | | ... oo ..| | .. o.o.| | o . +E+| | S = **=| | = * .=BB| | * o oOO| | . +o*| | .oo| +----[SHA256]-----+ ➜ ~ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac ➜ ~ 2.5.2 5.2 在Windows上生成sshkey： 2.5.3 因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址 2.5.4 步骤如下： 2.5.5 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 2.5.6 5.3 上传sshkey： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:5","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#当sourcetree首次启动时会弹出加载sshkey的提示按提示操作找到之前保存的privateppk文件"},{"categories":["Git","SourceTree"],"content":" 2.5 5. sshKey 2.5.1 5.1 在Linux和Mac上生成sshkey： ➜ ~ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/Alex/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/Alex/.ssh/id_rsa. Your public key has been saved in /Users/Alex/.ssh/id_rsa.pub. The key fingerprint is: SHA256:98jE3jhBhFT5nQlZRj34a3WOk1t6XF+Dbf/hliXl4WQ Alex@Alex-Mac The key's randomart image is: +---[RSA 2048]----+ | ..oo. +=. | | ... oo ..| | .. o.o.| | o . +E+| | S = **=| | = * .=BB| | * o oOO| | . +o*| | .oo| +----[SHA256]-----+ ➜ ~ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCvuQAq65b+nLZPqqc3b3Mj9e7Pt8oWKasJFa2QH1VIEkDvxKLFGcHsT7Ur4zXwEi9YiW2tVRrBSjcMALxuBjVm2IxYV6Lk8SLuGadyYy5telWGJmHsQ3VIPRuKwpzTkLN643kjqc6JFSlnZG/XoP9SPtCOsp2ql4u0s7Auc2bZay4RaTDXbcpJVU9OA0xM8Zy4oTTNYdZ4tvGittVmn+wLrhN255J7clORF5126dmDYxV3E8ZboaDdQpdLGIWmDNcBJQvl0CLwpKUCi7EUDqDVtm4bNgwIX9fEIkTxGdaWjBW1iXBk8TGXWkgB+Qp8B1IwaJ4GHUwUhQrefWvw9XeJ Alex@Alex-Mac ➜ ~ 2.5.2 5.2 在Windows上生成sshkey： 2.5.3 因为windows没有自带openssl模块，所以在Windows环境中使用第三方工具puttygen.exe生成sshkey 下载地址 2.5.4 步骤如下： 2.5.5 当sourcetree首次启动时，会弹出加载sshkey的提示，按提示操作，找到之前保存的private.ppk文件 2.5.6 5.3 上传sshkey： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:5","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#53-上传sshkey"},{"categories":["Git","SourceTree"],"content":" 2.6 6. 回到 dashboard ，点击项目名称进入详情： ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:6","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#6-回到-dashboard-点击项目名称进入详情"},{"categories":["Git","SourceTree"],"content":" 2.7 7. 使用souretree将项目从git服务器clone到本地 2.7.1 7.1 安装souretree 软件 ［略］ 2.7.2 7.2 clone项目到本地 ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:7","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#7-使用souretree将项目从git服务器clone到本地"},{"categories":["Git","SourceTree"],"content":" 2.7 7. 使用souretree将项目从git服务器clone到本地 2.7.1 7.1 安装souretree 软件 ［略］ 2.7.2 7.2 clone项目到本地 ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:7","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#71-安装souretree-软件-略"},{"categories":["Git","SourceTree"],"content":" 2.7 7. 使用souretree将项目从git服务器clone到本地 2.7.1 7.1 安装souretree 软件 ［略］ 2.7.2 7.2 clone项目到本地 ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:7","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#72-clone项目到本地"},{"categories":["Git","SourceTree"],"content":" 2.8 8. 进入项目工作台： 2.8.1 9. 关于sourcetree工具的使用，下面是一些git操作的释疑。 检出仓库: 将在本地创建一个git仓库的克隆版本 工作流: 本地仓库由 git 维护的三棵“树”组成。第一个是 工作目录，它持有实际文件；第二个是 缓存区（Index），它像个缓存区域，临时保存改动；最后是 HEAD，指向最近一次提交后的结果。 提交：可以计划改动（把它们添加到缓存区),将改动提交到了 HEAD，但是还没到提交到远端仓库。 拉取：从远端仓库拉取最新版本状态，特别是在其他人员有所改动之后。 推送：改动现在已经在本地仓库的 HEAD 中了。这时可以使用它将这些改动提交到远端仓库。 分支：分支是用来将特性开发分离出来的。在创建仓库的时候，master 是“默认的”。创建分支将可以从主线开发上分离开来，然后在不影响主线的同时继续工作，完成后再将它们合并到主分支上。 合并： 将分支功能并入主分支。 ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:8","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#8-进入项目工作台"},{"categories":["Git","SourceTree"],"content":" 2.8 8. 进入项目工作台： 2.8.1 9. 关于sourcetree工具的使用，下面是一些git操作的释疑。 检出仓库: 将在本地创建一个git仓库的克隆版本 工作流: 本地仓库由 git 维护的三棵“树”组成。第一个是 工作目录，它持有实际文件；第二个是 缓存区（Index），它像个缓存区域，临时保存改动；最后是 HEAD，指向最近一次提交后的结果。 提交：可以计划改动（把它们添加到缓存区),将改动提交到了 HEAD，但是还没到提交到远端仓库。 拉取：从远端仓库拉取最新版本状态，特别是在其他人员有所改动之后。 推送：改动现在已经在本地仓库的 HEAD 中了。这时可以使用它将这些改动提交到远端仓库。 分支：分支是用来将特性开发分离出来的。在创建仓库的时候，master 是“默认的”。创建分支将可以从主线开发上分离开来，然后在不影响主线的同时继续工作，完成后再将它们合并到主分支上。 合并： 将分支功能并入主分支。 ","date":"2016-04-20","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/:2:8","series":null,"tags":["SourceTree","Git"],"title":"使用SoureceTree管理你的git项目","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8sourecetree%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84git%E9%A1%B9%E7%9B%AE/#9-关于sourcetree工具的使用下面是一些git操作的释疑"},{"categories":["mac"],"content":"很多人觉得默认Launchpad的应用程序图标很大，空间比较拥挤，不过这个其实是可以通过调整Launchpad每一行和每一列图标的数量，来调整Launchpad图标大小。 默认如下图： 代码块： # 调整每一行显示数量为8个。 ➜ defaults write com.apple.dock springboard-columns -int 10 ＃ 重启Launchpad ➜ defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock 修改后如下： ","date":"2016-04-09","objectID":"https://samzong.me/mac-1-%E8%B0%83%E6%95%B4launchpad%E5%9B%BE%E6%A0%87%E5%A4%A7%E5%B0%8F/:0:0","series":null,"tags":["mac"],"title":"MacTips 调整Launchpad图标大小","uri":"https://samzong.me/mac-1-%E8%B0%83%E6%95%B4launchpad%E5%9B%BE%E6%A0%87%E5%A4%A7%E5%B0%8F/#"},{"categories":["mac"],"content":"升级Mac OS X 10.11 之后，使用CleanMyMac 3清理9GB的垃圾文件，之后导致打开iTerm时加载主机名特别的慢，Mac的命令行工具我使用的是iTerm＋ohmyzsh，这个问题困扰了我快两个月，工作比较忙，所以一直用Zoc 代替，也没有认真的研究，最近有需求用到它，实在不行，研究一下，发现，是因为我清理系统的时候把终端日志的索引文件清理掉了，所以每次打开的时候都要先加载索引导致了首次开启非常慢，解决办法是，只要把终端缓存的日志文件删除即可： 代码块： # 日志文件路径 # /private/var/log/asl/*.asl ➜ ~ sudo du -sh /private/var/log/asl/ Password: 2.7G /private/var/log/asl/ ➜ ~ sudo rm -rf /private/var/log/asl/*.asl ➜ ~ sudo du -sh /private/var/log/asl/ 208M /private/var/log/asl/ 关闭终端，再次打开，问题解决。 ","date":"2016-04-08","objectID":"https://samzong.me/mac-2-%E8%A7%A3%E5%86%B3oh-my-zsh%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%8B%E6%89%93%E5%BC%80%E7%BC%93%E6%85%A2/:0:0","series":null,"tags":["mac"],"title":"MacTips 解决 oh-my-zsh 在 Terminal 下打开缓慢","uri":"https://samzong.me/mac-2-%E8%A7%A3%E5%86%B3oh-my-zsh%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%8B%E6%89%93%E5%BC%80%E7%BC%93%E6%85%A2/#"},{"categories":["PHP"],"content":" CentOS 6 默认安装的PHP 版本是5.3， 但现在很多应用对于LAMP中，PHP的版本最低5.4，所以本篇文章的主要内容是，如何升级PHP5.3到5.4以及更高版本 ","date":"2016-04-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/:0:0","series":null,"tags":["CentOS","PHP"],"title":"如何在CentOS 6 安装更高版本的PHP","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/#"},{"categories":["PHP"],"content":" 1. 实验环境：CentOS 6.4解决办法是采用了remi源仓库已经适配的相应php版本 经过测试，该升级办法同样适用目前CentOS 6.x 所有版本 1.0.1 1. 安装Remi源 # 因为remi依赖epel源仓库，所有我们要先安装它。 [root@visionet8 ~]# yum install -y epel-release [root@visionet8 ~]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm [root@visionet8 ~]# rpm -Uvh remi-release-6.rpm 1.0.2 2. 我们看下Remi的的yum配置文件 # Repository: http://rpms.remirepo.net/ # Blog: http://blog.remirepo.net/ # Forum: http://forum.remirepo.net/ [remi] name=Remi's RPM repository for Enterprise Linux 6 - $basearch baseurl=http://rpms.remirepo.net/enterprise/6/remi/$basearch/ #mirrorlist=http://rpms.remirepo.net/enterprise/6/remi/mirror enabled=1 gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php55] name=Remi's PHP 5.5 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php55/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php55/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php56] name=Remi's PHP 5.6 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php56/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php56/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi 经过测试，启用remi源之后，默认情况下php版本为5.4,这时我们只需要升级php即可。 [root@visionet8 html]# yum update -y php* Failed to set locale, defaulting to C Loaded plugins: fastestmirror, refresh-packagekit, security Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirrors.ustc.edu.cn * extras: mirrors.aliyun.com * remi-safe: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.cn99.com remi | 2.9 kB 00:00 remi/primary_db | 1.6 MB 00:05 Setting up Update Process Resolving Dependencies --\u003e Running transaction check ---\u003e Package php.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-cli.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-cli.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-common.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-common.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-gd.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-gd.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Processing Dependency: libt1.so.5()(64bit) for package: php-gd-5.4.45-12.el6.remi.x86_64 ---\u003e Package php-mcrypt.x86_64 0:5.3.3-4.el6 will be updated ---\u003e Package php-mcrypt.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-mysql.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-pdo.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-pdo.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Running transaction check ---\u003e Package t1lib.x86_64 0:5.1.2-6.el6_2.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ========================================================================================================== Package Arch Version Repository Size ========================================================================================================== Updating: php x86_64 5.4.45-12.el6.remi remi 2.8 M php-cli x86_64 5.4.45-12.el6.remi remi 4.1 M php-common x86_64 5.4.45-12.el6.remi remi 968 k php-gd x86_64 5.4.45-12.el6.remi remi 152 k php-mcrypt x86_64 5.4.45-12.el6.remi remi 60 k php-mysql x86_64 5.4.45-12.el6.remi remi 145 k php-pdo x86_64 5.4.45-12.el6.remi remi 129 k Installing for dependencies: t1lib x86_64 5.1.2-6.el6_2.1 base 160 k Transaction Summary ========================================================================================================== Install 1 Package(s) Upgrade 7 Package(s) Total download size: 8.5 M Downloading Packages: (1/8): php-5.4.45-12.el6.remi.x86_64.rpm | 2.8 MB 00:07 (2/8): php-cli-5.4.45-12.el6.remi.x86_64.rpm | 4.1 MB 00:06 (3/8): ph","date":"2016-04-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/:1:0","series":null,"tags":["CentOS","PHP"],"title":"如何在CentOS 6 安装更高版本的PHP","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/#实验环境centos-64"},{"categories":["PHP"],"content":" 1. 实验环境：CentOS 6.4解决办法是采用了remi源仓库已经适配的相应php版本 经过测试，该升级办法同样适用目前CentOS 6.x 所有版本 1.0.1 1. 安装Remi源 # 因为remi依赖epel源仓库，所有我们要先安装它。 [root@visionet8 ~]# yum install -y epel-release [root@visionet8 ~]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm [root@visionet8 ~]# rpm -Uvh remi-release-6.rpm 1.0.2 2. 我们看下Remi的的yum配置文件 # Repository: http://rpms.remirepo.net/ # Blog: http://blog.remirepo.net/ # Forum: http://forum.remirepo.net/ [remi] name=Remi's RPM repository for Enterprise Linux 6 - $basearch baseurl=http://rpms.remirepo.net/enterprise/6/remi/$basearch/ #mirrorlist=http://rpms.remirepo.net/enterprise/6/remi/mirror enabled=1 gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php55] name=Remi's PHP 5.5 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php55/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php55/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php56] name=Remi's PHP 5.6 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php56/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php56/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi 经过测试，启用remi源之后，默认情况下php版本为5.4,这时我们只需要升级php即可。 [root@visionet8 html]# yum update -y php* Failed to set locale, defaulting to C Loaded plugins: fastestmirror, refresh-packagekit, security Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirrors.ustc.edu.cn * extras: mirrors.aliyun.com * remi-safe: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.cn99.com remi | 2.9 kB 00:00 remi/primary_db | 1.6 MB 00:05 Setting up Update Process Resolving Dependencies --\u003e Running transaction check ---\u003e Package php.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-cli.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-cli.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-common.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-common.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-gd.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-gd.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Processing Dependency: libt1.so.5()(64bit) for package: php-gd-5.4.45-12.el6.remi.x86_64 ---\u003e Package php-mcrypt.x86_64 0:5.3.3-4.el6 will be updated ---\u003e Package php-mcrypt.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-mysql.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-pdo.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-pdo.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Running transaction check ---\u003e Package t1lib.x86_64 0:5.1.2-6.el6_2.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ========================================================================================================== Package Arch Version Repository Size ========================================================================================================== Updating: php x86_64 5.4.45-12.el6.remi remi 2.8 M php-cli x86_64 5.4.45-12.el6.remi remi 4.1 M php-common x86_64 5.4.45-12.el6.remi remi 968 k php-gd x86_64 5.4.45-12.el6.remi remi 152 k php-mcrypt x86_64 5.4.45-12.el6.remi remi 60 k php-mysql x86_64 5.4.45-12.el6.remi remi 145 k php-pdo x86_64 5.4.45-12.el6.remi remi 129 k Installing for dependencies: t1lib x86_64 5.1.2-6.el6_2.1 base 160 k Transaction Summary ========================================================================================================== Install 1 Package(s) Upgrade 7 Package(s) Total download size: 8.5 M Downloading Packages: (1/8): php-5.4.45-12.el6.remi.x86_64.rpm | 2.8 MB 00:07 (2/8): php-cli-5.4.45-12.el6.remi.x86_64.rpm | 4.1 MB 00:06 (3/8): ph","date":"2016-04-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/:1:0","series":null,"tags":["CentOS","PHP"],"title":"如何在CentOS 6 安装更高版本的PHP","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/#1-安装remi源"},{"categories":["PHP"],"content":" 1. 实验环境：CentOS 6.4解决办法是采用了remi源仓库已经适配的相应php版本 经过测试，该升级办法同样适用目前CentOS 6.x 所有版本 1.0.1 1. 安装Remi源 # 因为remi依赖epel源仓库，所有我们要先安装它。 [root@visionet8 ~]# yum install -y epel-release [root@visionet8 ~]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm [root@visionet8 ~]# rpm -Uvh remi-release-6.rpm 1.0.2 2. 我们看下Remi的的yum配置文件 # Repository: http://rpms.remirepo.net/ # Blog: http://blog.remirepo.net/ # Forum: http://forum.remirepo.net/ [remi] name=Remi's RPM repository for Enterprise Linux 6 - $basearch baseurl=http://rpms.remirepo.net/enterprise/6/remi/$basearch/ #mirrorlist=http://rpms.remirepo.net/enterprise/6/remi/mirror enabled=1 gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php55] name=Remi's PHP 5.5 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php55/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php55/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php56] name=Remi's PHP 5.6 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php56/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php56/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi 经过测试，启用remi源之后，默认情况下php版本为5.4,这时我们只需要升级php即可。 [root@visionet8 html]# yum update -y php* Failed to set locale, defaulting to C Loaded plugins: fastestmirror, refresh-packagekit, security Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirrors.ustc.edu.cn * extras: mirrors.aliyun.com * remi-safe: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.cn99.com remi | 2.9 kB 00:00 remi/primary_db | 1.6 MB 00:05 Setting up Update Process Resolving Dependencies --\u003e Running transaction check ---\u003e Package php.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-cli.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-cli.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-common.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-common.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-gd.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-gd.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Processing Dependency: libt1.so.5()(64bit) for package: php-gd-5.4.45-12.el6.remi.x86_64 ---\u003e Package php-mcrypt.x86_64 0:5.3.3-4.el6 will be updated ---\u003e Package php-mcrypt.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-mysql.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-pdo.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-pdo.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Running transaction check ---\u003e Package t1lib.x86_64 0:5.1.2-6.el6_2.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ========================================================================================================== Package Arch Version Repository Size ========================================================================================================== Updating: php x86_64 5.4.45-12.el6.remi remi 2.8 M php-cli x86_64 5.4.45-12.el6.remi remi 4.1 M php-common x86_64 5.4.45-12.el6.remi remi 968 k php-gd x86_64 5.4.45-12.el6.remi remi 152 k php-mcrypt x86_64 5.4.45-12.el6.remi remi 60 k php-mysql x86_64 5.4.45-12.el6.remi remi 145 k php-pdo x86_64 5.4.45-12.el6.remi remi 129 k Installing for dependencies: t1lib x86_64 5.1.2-6.el6_2.1 base 160 k Transaction Summary ========================================================================================================== Install 1 Package(s) Upgrade 7 Package(s) Total download size: 8.5 M Downloading Packages: (1/8): php-5.4.45-12.el6.remi.x86_64.rpm | 2.8 MB 00:07 (2/8): php-cli-5.4.45-12.el6.remi.x86_64.rpm | 4.1 MB 00:06 (3/8): ph","date":"2016-04-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/:1:0","series":null,"tags":["CentOS","PHP"],"title":"如何在CentOS 6 安装更高版本的PHP","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/#2-我们看下remi的的yum配置文件"},{"categories":["PHP"],"content":" 1. 实验环境：CentOS 6.4解决办法是采用了remi源仓库已经适配的相应php版本 经过测试，该升级办法同样适用目前CentOS 6.x 所有版本 1.0.1 1. 安装Remi源 # 因为remi依赖epel源仓库，所有我们要先安装它。 [root@visionet8 ~]# yum install -y epel-release [root@visionet8 ~]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm [root@visionet8 ~]# rpm -Uvh remi-release-6.rpm 1.0.2 2. 我们看下Remi的的yum配置文件 # Repository: http://rpms.remirepo.net/ # Blog: http://blog.remirepo.net/ # Forum: http://forum.remirepo.net/ [remi] name=Remi's RPM repository for Enterprise Linux 6 - $basearch baseurl=http://rpms.remirepo.net/enterprise/6/remi/$basearch/ #mirrorlist=http://rpms.remirepo.net/enterprise/6/remi/mirror enabled=1 gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php55] name=Remi's PHP 5.5 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php55/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php55/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php56] name=Remi's PHP 5.6 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php56/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php56/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi 经过测试，启用remi源之后，默认情况下php版本为5.4,这时我们只需要升级php即可。 [root@visionet8 html]# yum update -y php* Failed to set locale, defaulting to C Loaded plugins: fastestmirror, refresh-packagekit, security Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirrors.ustc.edu.cn * extras: mirrors.aliyun.com * remi-safe: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.cn99.com remi | 2.9 kB 00:00 remi/primary_db | 1.6 MB 00:05 Setting up Update Process Resolving Dependencies --\u003e Running transaction check ---\u003e Package php.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-cli.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-cli.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-common.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-common.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-gd.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-gd.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Processing Dependency: libt1.so.5()(64bit) for package: php-gd-5.4.45-12.el6.remi.x86_64 ---\u003e Package php-mcrypt.x86_64 0:5.3.3-4.el6 will be updated ---\u003e Package php-mcrypt.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-mysql.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-pdo.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-pdo.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Running transaction check ---\u003e Package t1lib.x86_64 0:5.1.2-6.el6_2.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ========================================================================================================== Package Arch Version Repository Size ========================================================================================================== Updating: php x86_64 5.4.45-12.el6.remi remi 2.8 M php-cli x86_64 5.4.45-12.el6.remi remi 4.1 M php-common x86_64 5.4.45-12.el6.remi remi 968 k php-gd x86_64 5.4.45-12.el6.remi remi 152 k php-mcrypt x86_64 5.4.45-12.el6.remi remi 60 k php-mysql x86_64 5.4.45-12.el6.remi remi 145 k php-pdo x86_64 5.4.45-12.el6.remi remi 129 k Installing for dependencies: t1lib x86_64 5.1.2-6.el6_2.1 base 160 k Transaction Summary ========================================================================================================== Install 1 Package(s) Upgrade 7 Package(s) Total download size: 8.5 M Downloading Packages: (1/8): php-5.4.45-12.el6.remi.x86_64.rpm | 2.8 MB 00:07 (2/8): php-cli-5.4.45-12.el6.remi.x86_64.rpm | 4.1 MB 00:06 (3/8): ph","date":"2016-04-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/:1:0","series":null,"tags":["CentOS","PHP"],"title":"如何在CentOS 6 安装更高版本的PHP","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/#3-测试"},{"categories":["PHP"],"content":" 1. 实验环境：CentOS 6.4解决办法是采用了remi源仓库已经适配的相应php版本 经过测试，该升级办法同样适用目前CentOS 6.x 所有版本 1.0.1 1. 安装Remi源 # 因为remi依赖epel源仓库，所有我们要先安装它。 [root@visionet8 ~]# yum install -y epel-release [root@visionet8 ~]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm [root@visionet8 ~]# rpm -Uvh remi-release-6.rpm 1.0.2 2. 我们看下Remi的的yum配置文件 # Repository: http://rpms.remirepo.net/ # Blog: http://blog.remirepo.net/ # Forum: http://forum.remirepo.net/ [remi] name=Remi's RPM repository for Enterprise Linux 6 - $basearch baseurl=http://rpms.remirepo.net/enterprise/6/remi/$basearch/ #mirrorlist=http://rpms.remirepo.net/enterprise/6/remi/mirror enabled=1 gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php55] name=Remi's PHP 5.5 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php55/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php55/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php56] name=Remi's PHP 5.6 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php56/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php56/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi 经过测试，启用remi源之后，默认情况下php版本为5.4,这时我们只需要升级php即可。 [root@visionet8 html]# yum update -y php* Failed to set locale, defaulting to C Loaded plugins: fastestmirror, refresh-packagekit, security Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirrors.ustc.edu.cn * extras: mirrors.aliyun.com * remi-safe: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.cn99.com remi | 2.9 kB 00:00 remi/primary_db | 1.6 MB 00:05 Setting up Update Process Resolving Dependencies --\u003e Running transaction check ---\u003e Package php.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-cli.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-cli.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-common.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-common.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-gd.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-gd.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Processing Dependency: libt1.so.5()(64bit) for package: php-gd-5.4.45-12.el6.remi.x86_64 ---\u003e Package php-mcrypt.x86_64 0:5.3.3-4.el6 will be updated ---\u003e Package php-mcrypt.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-mysql.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-pdo.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-pdo.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Running transaction check ---\u003e Package t1lib.x86_64 0:5.1.2-6.el6_2.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ========================================================================================================== Package Arch Version Repository Size ========================================================================================================== Updating: php x86_64 5.4.45-12.el6.remi remi 2.8 M php-cli x86_64 5.4.45-12.el6.remi remi 4.1 M php-common x86_64 5.4.45-12.el6.remi remi 968 k php-gd x86_64 5.4.45-12.el6.remi remi 152 k php-mcrypt x86_64 5.4.45-12.el6.remi remi 60 k php-mysql x86_64 5.4.45-12.el6.remi remi 145 k php-pdo x86_64 5.4.45-12.el6.remi remi 129 k Installing for dependencies: t1lib x86_64 5.1.2-6.el6_2.1 base 160 k Transaction Summary ========================================================================================================== Install 1 Package(s) Upgrade 7 Package(s) Total download size: 8.5 M Downloading Packages: (1/8): php-5.4.45-12.el6.remi.x86_64.rpm | 2.8 MB 00:07 (2/8): php-cli-5.4.45-12.el6.remi.x86_64.rpm | 4.1 MB 00:06 (3/8): ph","date":"2016-04-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/:1:0","series":null,"tags":["CentOS","PHP"],"title":"如何在CentOS 6 安装更高版本的PHP","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/#4-php-55-和php56"},{"categories":["PHP"],"content":" 1. 实验环境：CentOS 6.4解决办法是采用了remi源仓库已经适配的相应php版本 经过测试，该升级办法同样适用目前CentOS 6.x 所有版本 1.0.1 1. 安装Remi源 # 因为remi依赖epel源仓库，所有我们要先安装它。 [root@visionet8 ~]# yum install -y epel-release [root@visionet8 ~]# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm [root@visionet8 ~]# rpm -Uvh remi-release-6.rpm 1.0.2 2. 我们看下Remi的的yum配置文件 # Repository: http://rpms.remirepo.net/ # Blog: http://blog.remirepo.net/ # Forum: http://forum.remirepo.net/ [remi] name=Remi's RPM repository for Enterprise Linux 6 - $basearch baseurl=http://rpms.remirepo.net/enterprise/6/remi/$basearch/ #mirrorlist=http://rpms.remirepo.net/enterprise/6/remi/mirror enabled=1 gpgcheck=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php55] name=Remi's PHP 5.5 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php55/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php55/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi [remi-php56] name=Remi's PHP 5.6 RPM repository for Enterprise Linux 6 - $basearch #baseurl=http://rpms.remirepo.net/enterprise/6/php56/$basearch/ mirrorlist=http://rpms.remirepo.net/enterprise/6/php56/mirror # NOTICE: common dependencies are in \"remi-safe\" enabled=0 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi 经过测试，启用remi源之后，默认情况下php版本为5.4,这时我们只需要升级php即可。 [root@visionet8 html]# yum update -y php* Failed to set locale, defaulting to C Loaded plugins: fastestmirror, refresh-packagekit, security Loading mirror speeds from cached hostfile * base: mirrors.163.com * epel: mirrors.ustc.edu.cn * extras: mirrors.aliyun.com * remi-safe: mirrors.tuna.tsinghua.edu.cn * updates: mirrors.cn99.com remi | 2.9 kB 00:00 remi/primary_db | 1.6 MB 00:05 Setting up Update Process Resolving Dependencies --\u003e Running transaction check ---\u003e Package php.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-cli.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-cli.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-common.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-common.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-gd.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-gd.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Processing Dependency: libt1.so.5()(64bit) for package: php-gd-5.4.45-12.el6.remi.x86_64 ---\u003e Package php-mcrypt.x86_64 0:5.3.3-4.el6 will be updated ---\u003e Package php-mcrypt.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-mysql.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-mysql.x86_64 0:5.4.45-12.el6.remi will be an update ---\u003e Package php-pdo.x86_64 0:5.3.3-48.el6_8 will be updated ---\u003e Package php-pdo.x86_64 0:5.4.45-12.el6.remi will be an update --\u003e Running transaction check ---\u003e Package t1lib.x86_64 0:5.1.2-6.el6_2.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ========================================================================================================== Package Arch Version Repository Size ========================================================================================================== Updating: php x86_64 5.4.45-12.el6.remi remi 2.8 M php-cli x86_64 5.4.45-12.el6.remi remi 4.1 M php-common x86_64 5.4.45-12.el6.remi remi 968 k php-gd x86_64 5.4.45-12.el6.remi remi 152 k php-mcrypt x86_64 5.4.45-12.el6.remi remi 60 k php-mysql x86_64 5.4.45-12.el6.remi remi 145 k php-pdo x86_64 5.4.45-12.el6.remi remi 129 k Installing for dependencies: t1lib x86_64 5.1.2-6.el6_2.1 base 160 k Transaction Summary ========================================================================================================== Install 1 Package(s) Upgrade 7 Package(s) Total download size: 8.5 M Downloading Packages: (1/8): php-5.4.45-12.el6.remi.x86_64.rpm | 2.8 MB 00:07 (2/8): php-cli-5.4.45-12.el6.remi.x86_64.rpm | 4.1 MB 00:06 (3/8): ph","date":"2016-04-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/:1:0","series":null,"tags":["CentOS","PHP"],"title":"如何在CentOS 6 安装更高版本的PHP","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%9C%A8centos-6-%E5%AE%89%E8%A3%85%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E7%9A%84php/#5-php-7"},{"categories":["数据库","MySQL"],"content":" ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:0:0","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#"},{"categories":["数据库","MySQL"],"content":" 1. 1. 测试环境 MacBook Pro 15‘ i7 16GB VMware Fushion 8 Pro MySQL Version 5.1 CentOS Linux 6.x ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:1:0","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#1-测试环境"},{"categories":["数据库","MySQL"],"content":" 2. 2. 实验步骤","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:0","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#2-实验步骤"},{"categories":["数据库","MySQL"],"content":" 2.1 2.1 安装mysql [root@ultraera ~]# yum install mysql mysql-server mysql-devel ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:1","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#21安装mysql"},{"categories":["数据库","MySQL"],"content":" 2.2 2.2 启动mysql，并设置开机自启动 [root@ultraera ~]# service mysqld start [root@ultraera ~]# chkconfig mysqld on [root@ultraera ~]# chkconfig --list | grep mysqld mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:2","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#22-启动mysql并设置开机自启动"},{"categories":["数据库","MySQL"],"content":" 2.3 2.3 相关配置 /etc/my.cnf mysql配置文件 /var/lib/mysql mysql数据库文件 port:3306 mysql默认端口 # Tips : MySQL 绝大对数语句都是以分号结尾，注意是英文模式下的分号。字符和字符串用 '' 引起； ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:3","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#23-相关配置"},{"categories":["数据库","MySQL"],"content":" 2.4 2.4 mysql初始化及登录 [root@ultraera ~]# mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we'll need the current password for the root user. If you've just installed MySQL, and you haven't set the root password yet, the password will be blank, so you should just press enter here. Enter current password for root (enter for none): # 首次登陆默认为空 Setting the root password ensures that nobody can log into the MySQL root user without the proper authorisation. You already have a root password set, so you can safely answer 'n'. Set the root password? [Y/n] y # 设置root用户密码 New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? [Y/n] y # 删除匿名用户 ... Success! Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? [Y/n] y # 关闭root远程登陆 ... Success! By default, MySQL comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? [Y/n] y # 删除 test 数据库 - Dropping test database... ERROR 1008 (HY000) at line 1: Can't drop database 'test'; database doesn't exist ... Failed! Not critical, keep moving... - Removing privileges on test database... ... Success! Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? [Y/n] y # 保存这些设置 ... Success! All done! If you've completed all of the above steps, your MySQL installation should now be secure. Thanks for using MySQL! Cleaning up... [root@ultraera ~]# [root@ultraera ~]# [root@ultraera ~]# mysql -u root -p '123456' [root@ultraera ~]# mysql -u root -p -h localhost “-h” 指定服务器地址 ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:4","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#24-mysql初始化及登录"},{"categories":["数据库","MySQL"],"content":" 2.5 2.5 创建、查看及删除当前数据库 mysql\u003e CREATE DATABASE ultraera; Query OK, 1 row affected (0.00 sec) mysql\u003e SHOW DATABASES; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | test | | ultraera | +--------------------+ 4 rows in set (0.00 sec) mysql\u003e DROP DATABASE ultraera; Query OK, 0 rows affected (0.00 sec) ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:5","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#25-创建查看及删除当前数据库"},{"categories":["数据库","MySQL"],"content":" 2.6 2.6 创建、查看及删除当前表格 #创建表格之前要先选择数据库 mysql\u003e use ultraera; Database changed mysql\u003e CREATE TABLE ultraera( #create 创建表格，至少1列 -\u003e id int NOT NULL, #NOT NULL 不为空,int 整型 -\u003e name char(20) NOT NULL, #char() 字符型 ,()内定义字符长度 -\u003e age int NOT NULL -\u003e ); Query OK, 0 rows affected (0.01 sec) mysql\u003e DESC ultraera; +-------+----------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-------+----------+------+-----+---------+----------------+ | id | int(11) | NO | | NULL | | | name | char(20) | NO | | NULL | | | age | int(11) | NO | | NULL | | +-------+----------+------+-----+---------+----------------+ 3 rows in set (0.00 sec) mysql\u003e DROP TABLE ultraera ; Query OK, 0 rows affected (0.00 sec) ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:6","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#26-创建查看及删除当前表格"},{"categories":["数据库","MySQL"],"content":" 2.7 2.7 修改表格信息 a.重命名表格 mysql\u003e alter table ultraera rename ultraera_org; b.新增列 alter table ultraera add address varchar(200); c.删除列 mysql\u003e alter table ultraera drop column address; d.修改一个列的数据类型 mysql\u003e alter table ultraera modify name varchar(200); e.重命名一个列 mysql\u003e alter table ultraera change column NAME name varchar(200); ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:7","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#27-修改表格信息"},{"categories":["数据库","MySQL"],"content":" 2.8 2.8 向表格中插入数据 a. 全局插入 mysql\u003e insert into ultraera values(1,'name',18); b. 根据列插入 mysql\u003e insert into ultraera(id,name,age) values(2,'john',19); ### 2.9 查看表格中的数据： mysql\u003e select * from ultraera; # *匹配所有列，也可以只查询单个列， mysql\u003e select name from ultraera; ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:8","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#28-向表格中插入数据"},{"categories":["数据库","MySQL"],"content":" 2.9 2.10 where运算符：条件判断查询，查询使用方法：where 列 运算符 值； where支持的运算符：=等于；\u003e大于；\u003c小于；\u003c\u003e不等于；\u003e=大于等于；\u003c=小于等于；BETWEEN在某范围之内； mysql\u003e select * from ultraera where id\u003e1; mysql\u003e select * from ultraera where id=2; mysql\u003e select * from ultraera where id\u003e=1; mysql\u003e select * from ultraera where id\u003c1; mysql\u003e select * from ultraera where id\u003c=1; mysql\u003e select * from ultraera where id between 1 and 4; ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:9","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#210-where运算符条件判断查询查询使用方法where列运算符值"},{"categories":["数据库","MySQL"],"content":" 2.10 2.11 删除表格中的一条记录（同样可以匹配where运算符） mysql\u003e delete from ultraera where id = 4; mysql\u003e delete * from ultraera ； #清空一个表格的数据； ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:10","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#211-删除表格中的一条记录同样可以匹配where运算符"},{"categories":["数据库","MySQL"],"content":" 2.11 2.12 更新表中的一个数据 mysql\u003e update ultraera set age=30 where id=3; ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:11","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#212-更新表中的一个数据"},{"categories":["数据库","MySQL"],"content":" 2.12 2.13 MySQL增加删除一个用户 mysql\u003e create user user1 identified by '123456'; #user1，密码123456，新用户没有权限，无法登录数据库 mysql\u003e drop user user1; #删除用户user1 ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:12","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#213-mysql增加删除一个用户"},{"categories":["数据库","MySQL"],"content":" 2.13 2.14 给用户添加、删除权限 mysql\u003e grant all privileges on *.* to 'user1'@'localhost' identified by '123456'; mysql\u003e revoke all privileges from user1; ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:13","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#214-给用户添加删除权限"},{"categories":["数据库","MySQL"],"content":" 2.14 2.15 使用mysqldump进行数据库备份数据库重命名：mysql不能直接对数据库重命名，所以如果想要重名数据库的话，要先导出，接着创建一个新的数据库，然后将导出的sql文件再导入到新的数据库中 [adam@ultraera ~]$ mysqldump -u root -p ultraera \u003e ultraera.sql #备份 [adam@ultraera ~]$ mysql -u root -p new_ultraera \u003c ultraera.sql #恢复到指定数据库 ","date":"2016-03-29","objectID":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/:2:14","series":null,"tags":["MySQL"],"title":"MySQL数据库使用基础","uri":"https://samzong.me/mysql-4-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/#215-使用mysqldump进行数据库备份"},{"categories":["Linux"],"content":" Linux中除了普通权限之外，还有三个特殊权限。 SUID:：以文件的所属用户执行，而非执行文件的用户，多用于可执行文件，设置suid后，在权限位中，所属用户的 最后一个权 限为变为s，添加SUID权限可用“+s”表示。 例如：passwd [adam@ultraera ~]$ which passwd /usr/bin/passwd [adam@ultraera ~]$ ls -l /usr/bin/passwd -rwsr-xr-x. 1 root root 25980 Feb 22 2012 /usr/bin/passwd [adam@ultraera ~]$ SGID：主要针对文件夹，在设置了SGID的文件夹中创建任何新文件都继承该文件的所属组，设置sgid后，在权限位中，所属 组的最后一个权限位变为s，添加SGID权限可用“+s”表示。 例如： [adam@ultraera ~]$ mkdir ultraera [adam@ultraera ~]$ ls -l total 4 drwxrwxr-x 2 adam adam 4096 Nov 27 21:09 ultraera [adam@ultraera ~]$ chmod g+s ultraera/ [adam@ultraera ~]$ ls -l total 4 drwxrwsr-x 2 adam adam 4096 Nov 27 21:09 ultraera [adam@ultraera ~]$ su Password: [root@ultraera adam]# mkdir -p ultraera/test [root@ultraera adam]# ls -l ultraera/ total 4 drwxr-sr-x 2 root adam 4096 Nov 27 21:09 test [root@ultraera adam]# sticky：针对文件夹，对目录拥有写权限的用户，仅可以删除其所拥有的文件，无法删除其他用户所拥有的文件，设置了sticky 之后，在权限位，other的最后一个权限位变为t,添加SGID权限可用“+t”表示。 例如： [root@ultraera tmp]# mkdir ultraera [root@ultraera tmp]# chmod a=rwx,o+t ultraera/ [root@ultraera tmp]# ls -ld ultraera/ drwxrwxrwt 2 root root 4096 Nov 27 21:29 ultraera/ [root@ultraera tmp]# useradd user1 [root@ultraera tmp]# useradd user2 [root@ultraera tmp]# su user1 [user1@ultraera tmp]$ touch ./ultraera/test [user1@ultraera tmp]$ ls -l ultraera/ total 0 -rw-rw-r-- 1 user1 user1 0 Nov 27 21:31 test [user1@ultraera tmp]$ exit exit [root@ultraera tmp]# su user2 [user2@ultraera tmp]$ rm -f ./ultraera/test rm: cannot remove `./ultraera/test': Operation not permitted [user2@ultraera tmp]$ 同样使用chmod来设定特殊权限，与普通权限一样，特殊权限也可以用数字表示： suid ： 4 sgid ： 2 sticky ： 1 chmod 4644 filename #设置文件suid权限 chmod 2755 flodername #设置文件夹sgid权限 chmod 1755 flodername #设置文件夹sticky权限 ","date":"2016-03-29","objectID":"https://samzong.me/linux-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90/:0:0","series":null,"tags":["Linux"],"title":"Linux 中的三个特殊权限","uri":"https://samzong.me/linux-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90/#"},{"categories":["Linux","CentOS"],"content":" Tips: 本地搭建本地yum源采用的rpm全部来自CentOS-6.7-bin-DVD1\u0026DVD2 ","date":"2016-03-29","objectID":"https://samzong.me/centos-6-1-%E4%BD%BF%E7%94%A8createrepo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%BA%90/:0:0","series":null,"tags":["Yum"],"title":"CentOS 使用createrepo搭建本地源","uri":"https://samzong.me/centos-6-1-%E4%BD%BF%E7%94%A8createrepo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%BA%90/#"},{"categories":["Linux","CentOS"],"content":" 0.1 1. 测试环境 MacBook Pro 15-inch i7 16GB VMware Fushion 8 Pro CentOS-6.7-i686-minimal.iso 因为配置本地yum源需要修改/目录下的文件及/etc下面的配置文件，建议更换到root用户。 ","date":"2016-03-29","objectID":"https://samzong.me/centos-6-1-%E4%BD%BF%E7%94%A8createrepo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%BA%90/:0:1","series":null,"tags":["Yum"],"title":"CentOS 使用createrepo搭建本地源","uri":"https://samzong.me/centos-6-1-%E4%BD%BF%E7%94%A8createrepo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%BA%90/#1-测试环境"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 # 2.1 因为配置本地yum源需要修改/目录下的文件及/etc下面的配置文件，建议更换到root用户。 [adam@ultraera ~]$ su - Password: [root@ultraera ~]# # 2.2 首先在本地创建一个存放rpm包的目录，我这里选择直接在/下创建，你可以自定义： [root@ultraera ~]# mkdir /yumload [root@ultraera ~]# cd /yumload/ [root@ultraera yumload]# pwd /yumload # 2.3 接下来把两张DVD中的Packages中的rpm包全部拷贝到/yumload: [root@ultraera yumload]# cp /media/CentOS_6.5_Final/Packages/* ./ [root@ultraera yumload]# ll ./*.rpm | wc -l #两张DVD一共有的rpm包的数量: 4802 # 2.4 然后使用createrepo指令创建本地repo，CentOS6默认不安装createrepo，需要手动安装，没关系，在我们的DVD光盘中已经集成了createrepo的包，如果报需要依赖安装其他包的使用，依次安装即可。 [root@ultraera yumload]# rpm -ivh createrepo-0.9.9-18.el6.noarch.rpm # 2.5 创建yum仓库，耐心等待，可以加-v参数列出执行信息 [root@ultraera yumload]# createrepo /yumload/ Spawning worker 0 with 4802 pkgs Workers Finished Gathering worker results Saving Primary metadata Saving file lists metadata Saving other metadata Generating sqlite DBs Sqlite DBs complete [root@ultraera yumload]# # 2.6 在/etc/yum.repo.d/下创建一个repo文件，文件名可以自定义，但一定要以repo结尾，并添加一下内容： [ultraera.org] #仓库名称可以自定义 name=This is a local repo #描述信息 baseurl=file:///yumload/ #这里填写仓库的url，注意 有三个正斜线 enabled=1 #是否开启仓库，1为开启，0为关闭 gpgcheck=0 #是否检查gpgkey，1为开启，0为关闭 # 2.7 另外如果想要添加软件包group的信息，可以把DVD1中的repodata文件中的*-comps.xml文件，使用ceraterepo -g 加载本地仓库即可，代码如下： [root@ultraera repodata]# createrepo -g [字符可能不一样，后缀正确就行]c6-i386-comps.xml /yumload/ # 2.8 到这里本地yum源就已经搭建完成了，接下来重新初始化yum缓存： [root@ultraera repodata]# yum clean all Loaded plugins: fastestmirror, refresh-packagekit, security Cleaning repos: ultraera.org Cleaning up Everything Cleaning up list of fastest mirrors [root@ultraera repodata]# yum makecache Loaded plugins: fastestmirror, refresh-packagekit, security Determining fastest mirrors ultraera.org | 2.9 kB 00:00 ... ultraera.org/filelists_db | 4.9 MB 00:00 ... ultraera.org/primary_db | 3.5 MB 00:00 ... ultraera.org/other_db | 2.1 MB 00:00 ... Metadata Cache Created # 2.9 测试group信息是否添加正确可以用如下代码，只要有正确输出信息就表示成功了 [root@ultraera ~]# yum grouplist ","date":"2016-03-29","objectID":"https://samzong.me/centos-6-1-%E4%BD%BF%E7%94%A8createrepo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%BA%90/:0:2","series":null,"tags":["Yum"],"title":"CentOS 使用createrepo搭建本地源","uri":"https://samzong.me/centos-6-1-%E4%BD%BF%E7%94%A8createrepo%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%BA%90/#2-实验步骤"},{"categories":["数据库","MongoDB"],"content":" 1. 1. Overiew 在CentOS Linux 中安装软件的方式有很多种，我会在后续的文章中整理给大家，我比较喜欢的方式是尽量用Yum 安装，不用自己动手去解决软件包之间的依赖关系，“能Yum 就Yum ，不能Yum 想着法Yum 。” – 这是我遵循的真理；今天给大家整理的就是如何使用Yum 来安装Mongodb ，在本文中会给出在32位与64位系统的区别，以及Mongodb 的版本，本文适用于CentOS 6/7 的Linux发行版本，所以同样适用于红帽体系的OS，如 RedHat Enterprise Linux 6/7 、 Fedora 。 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:1:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#1-overiew"},{"categories":["数据库","MongoDB"],"content":" 2. 2. Packages 业内常用的Mongodb 的Yum 仓库有Mongodb-org 与 Mongodb-10gen ,这里提供的Mongodb-org 的repository 仓库，支持以下软件包列表： 2.1 mongodb-org 这个是源数据包，主要是用来组织自动安装下面的4个软件包. 2.2 mongodb-org-sever 这个Mongodb Server端，包含了相关的配置和初始化脚本。 2.3 mongodb-org-mongos 这个是Mongodb的守护进程。 2.4 mongodb-org-shell 这个是mongodb 的shell环境。 2.5 mongodb-org-tools 这个包里包含了下列mongodb 的工具：mongoimport bsondump, mongodump, mongoexport, mongofiles, mongooplog, mongoperf, mongorestore, mongostat, and mongotop 。 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:2:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#2-packages"},{"categories":["数据库","MongoDB"],"content":" 3. 3. 添加相对应版本的Mongodb repo file.","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:3:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#3-添加相对应版本的mongodb-repo-file"},{"categories":["数据库","MongoDB"],"content":" 3.1 3.1 Mongodb 2.6 + OS x64 [root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-2.6.repo [mongodb-org-2.6] name=MongoDB 2.6 Repository baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/ gpgcheck=0 enabled=1 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:3:1","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#31-mongodb-26--os-x64"},{"categories":["数据库","MongoDB"],"content":" 3.2 3.2 Mongodb 2.6 + OS i686 [root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-2.6.repo [mongodb-org-2.6] name=MongoDB 2.6 Repository baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686/ gpgcheck=0 enabled=1 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:3:2","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#32-mongodb-26--os-i686"},{"categories":["数据库","MongoDB"],"content":" 3.3 3.3 Mongodb 3.2 + OS x64 [root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-3.2.repo [mongodb-org-3.2] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/ gpgcheck=0 enabled=1 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:3:3","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#33-mongodb-32---os-x64"},{"categories":["数据库","MongoDB"],"content":" 3.4 3.4 Mongodb 3.2 + OS i686 [root@vm02 ~]# vim /etc/yum.repos.d/mongodb-org-3.2.repo [mongodb-org-3.2] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/i686/ gpgcheck=0 enabled=1 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:3:4","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#34-mongodb-32---os-i686"},{"categories":["数据库","MongoDB"],"content":" 4. 4. Install MongoDB 安装最新版本的 Mongodb ，安装都方式一样，请注意安装相对应的源保证正确安装Mongodb，请使用如下命令： [root@vm02 ~]# yum clean all [root@vm02 ~]# yum makecache [root@vm02 ~]# yum install mongodb-org ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:4:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#4-install-mongodb"},{"categories":["数据库","MongoDB"],"content":" 5. 5. Run MongoDB","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:5:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#5-run-mongodb"},{"categories":["数据库","MongoDB"],"content":" 5.1 5.1 配置SELinux SELinux 默认为开启状态，会导致我们的Mongodb 无法使用，解决方式有两种： 关闭SELinux 添加Mongodb 通过SELinux 设定，指令如下： semanage port -a -t mongod_port_t -p tcp 27017 Tips: 在CentOS 7 ，SELinux 会限定你去修改Mongodb的data目录及lib目录。 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:5:1","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#51-配置selinux"},{"categories":["数据库","MongoDB"],"content":" 5.2 5.2 Start MongoDB [root@vm02 ~]# sudo service mongod start Starting mongod: [ OK ] [root@vm02 ~]# ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:5:2","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#52-start-mongodb"},{"categories":["数据库","MongoDB"],"content":" 5.3 5.3 检查MongoDB日志文件验证服务正常启动， /var/log/mongodb/mongodb.log [root@vm02 ~]# cat /var/log/mongodb/mongod.log # 看到如下内容表示mongodb启动成功了。 2016-03-24T04:09:28.582+0800 I NETWORK [initandlisten] waiting for connections on port 27017 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:5:3","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#53-检查mongodb日志文件验证服务正常启动-varlogmongodbmongodblog"},{"categories":["数据库","MongoDB"],"content":" 5.4 5.4 设置MongoDB 开机自启动 [root@vm02 ~]# chkconfig mongod on ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:5:4","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#54-设置mongodb-开机自启动"},{"categories":["数据库","MongoDB"],"content":" 5.5 5.5 设置MongoDB 允许其他服务器访问 默认情况下，mongodb 只监听 127.0.0.1 ，但是实际生产环境中可能需要其他服务器访问，所以这里添加监听其他网络端口，修改mongodb的配置文件：/etc/mongodb.conf [root@vm02 ~]# vim /etc/mongodb.conf # line 29 增加一行： bindIp: 172.16.102.129 # 注意不要把1270.0.1 去除，这会导致本地无法使用MongoDB . ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:5:5","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#55-设置mongodb-允许其他服务器访问"},{"categories":["数据库","MongoDB"],"content":" 6. 6. Use MongoDB","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:6:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#6-use-mongodb"},{"categories":["数据库","MongoDB"],"content":" 6.1 6.1 检查mongodb 状态 [root@vm02 ~]# service mongod status mongod (pid 6502) is running... [root@vm02 ~]# ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:6:1","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#61-检查mongodb-状态"},{"categories":["数据库","MongoDB"],"content":" 6.2 6.2 mongodb 自带检测工具 [root@vm02 ~]# mongostat insert query update delete getmore command % dirty % used flushes vsize res qr|qw ar|aw netIn netOut conn time *0 *0 *0 *0 0 1|0 0.0 0.0 0 388.0M 68.0M 0|0 0|0 79b 18k 1 2016-03-24T04:25:09+08:00 *0 *0 *0 *0 0 1|0 0.0 0.0 0 388.0M 68.0M 0|0 0|0 79b 18k 1 2016-03-24T04:25:10+08:00 *0 *0 *0 *0 0 1|0 0.0 0.0 0 388.0M 68.0M 0|0 0|0 79b 18k 1 2016-03-24T04:25:11+08:00 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:6:2","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#62-mongodb-自带检测工具"},{"categories":["数据库","MongoDB"],"content":" 6.3 6.3 进入mongodb 命令行模式 [root@vm02 ~]# mongo MongoDB shell version: 3.2.4 connecting to: test Server has startup warnings: 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never' 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'. 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** We suggest setting it to 'never' 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] ** WARNING: soft rlimits too low. rlimits set to 1024 processes, 64000 files. Number of processes should be at least 32000 : 0.5 times number of files. 2016-03-24T04:09:28.577+0800 I CONTROL [initandlisten] \u003e ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:6:3","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#63-进入mongodb-命令行模式"},{"categories":["数据库","MongoDB"],"content":" 7. 7. Uninstall MongoDB","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:7:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#7-uninstall-mongodb"},{"categories":["数据库","MongoDB"],"content":" 7.1 7.1 关闭mongodb [root@vm02 ~]# service mongod stop ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:7:1","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#71-关闭mongodb"},{"categories":["数据库","MongoDB"],"content":" 7.2 7.2 卸载mongodb 软件包 [root@vm02 ~]# yum erase $(rpm -qa | grep mongodb-org) ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:7:2","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#72-卸载mongodb-软件包"},{"categories":["数据库","MongoDB"],"content":" 7.3 7.3 删除mongodb文件：数据库文件和日志文件 [root@vm02 ~]# rm -rf /var/log/mongodb [root@vm02 ~]# rm -rf /var/lib/mongo ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:7:3","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#73-删除mongodb文件数据库文件和日志文件"},{"categories":["数据库","MongoDB"],"content":" 8. 8. FAQ Q : Mongodb 占用99%CPU并且查询速度很慢? A : 数据库需要首先建立索引，类似图书的目录文件，否则当你在数据库内查找数据的时候，就类似于在整本字典一页页翻查一个字如此。 ","date":"2016-03-27","objectID":"https://samzong.me/howto-install-mongodb-on-centos-6-x/:8:0","series":null,"tags":["MongoDB"],"title":"HowTo Install MongoDB  on CentOS 6.x","uri":"https://samzong.me/howto-install-mongodb-on-centos-6-x/#8-faq"},{"categories":["Linux","CentOS"],"content":" 做运维工作的，应该经常会碰到这样的问题，需要新上一个web项目，需要上传文件到服务器上，解决方法有很多种，常见的如sftp和ftp，今天讲如何使用sftp让系统用户用户上传项目的权限，并且实现chroot和无法使用ssh登录到系统。 SFTP是指SSH文件传输协议（SSH File Transfer protocol）或安全文件传输协议（Secure File Transfer Protocol），它提供了可信数据流下的文件访问、文件传输以及文件管理功能。当我们为SFTP配置chroot环境后，只有被许可的用户可以访问，并被限制到他们的家目录中，换言之：被许可的用户将处于牢笼环境中，在此环境中它们甚至不能切换它们的目录。 ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:0","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#"},{"categories":["Linux","CentOS"],"content":" 0.1 1. 测试环境 MacBook Pro 15-inch i7 16GB VMware Fushion 8 Pro Transmit （ SFTP tools for Mac ） [root@test ~]# cat /etc/issue CentOS release 6.6 (Final) Kernel \\r on an \\m [root@test ~]# rpm -qa | grep openssh-server openssh-server-5.3p1-104.el6.i686 ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:1","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#1-测试环境"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#2-实验步骤"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#21-增加一个sftpusers用户组"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#22-创建一个用户user01并分配给sftpusers用户组"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#23-修改用户家目录及指定不能登录shell"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#24-给用户创建密码注意密码不明文显示"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#25-修改ssh的配置文件如下设置"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#26-重启ssh服务"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#27-设置用户家目录权限注意权限不能大于0755"},{"categories":["Linux","CentOS"],"content":" 0.2 2. 实验步骤 0.2.0.1 2.1 增加一个sftpusers用户组 [root@test ~]# groupadd sftpusers 0.2.0.2 2.2 创建一个用户user01，并分配给sftpusers用户组 [root@test ~]# useradd -g sftpusers user01 0.2.0.3 2.3 修改用户家目录及指定不能登录shell [root@test ~]# mkdir /sftp/ [root@test ~]# usermod -s /sbin/nologin -d /sftp/user01 -m user01 0.2.0.4 2.4 给用户创建密码（注意密码不明文显示） [root@test ~]# passwd user01 Changing password for user user01. New password: BAD PASSWORD: it is too simplistic/systematic BAD PASSWORD: is too simple Retype new password: passwd: all authentication tokens updated successfully. [root@test ~]# 0.2.1 2.5 修改ssh的配置文件，如下设置 [root@test ~]# ll /etc/ssh/sshd_config -rw-------. 1 root root 3879 Oct 15 2014 /etc/ssh/sshd_config [root@test ~]# vim /etc/ssh/sshd_config # line 132 #Subsystem sftp /usr/libexec/openssh/sftp-server #注释 Subsystem sftp internal-sftp #修改为internal-sftp # add this lines at the end of file Match Group sftpusers #指定一下参数仅适用的用户组sftpusers X11Forwarding no AllowTcpForwarding no ChrootDirectory %h #设置chroot将用户锁在家目录，%h=家目录 ForceCommand internal-sftp #该参数强制执行内部sftp 0.2.1.1 2.6 重启ssh服务 [root@test ~]# /etc/init.d/sshd restart Stopping sshd: [ OK ] Starting sshd: [ OK ] 0.2.1.2 2.7 设置用户家目录权限,(注意权限不能大于0755) [root@test ~]# chmod 0755 /sftp/user01/ [root@test ~]# chown root /sftp/user01/ [root@test ~]# chgrp -R sftpusers /sftp/user01/ 0.2.1.3 2.8 关于上传,根目录无法上传文件。 因为用户家目录属主是root，并且权限最大0755，所以没法写，我的解决方法是在在家目录建立一个文件夹，作为上传目录，并把属主给user01即可。 [root@test ~]# mkdir /sftp/user01/upload [root@test ~]# chown user01:sftpusers /sftp/user01/upload/ ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:2","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#28-关于上传根目录无法上传文件"},{"categories":["Linux","CentOS"],"content":" 0.3 3. 测试验证 0.3.0.4 3.1 Linux 登录测试 [root@test ~]# su - user01 This account is currently not available. #su - 切换失败 [root@test ~]# cat /etc/passwd | tail -1 user01:x:500:500::/sftp/user01:/sbin/nologin [root@test ~]# ssh user01@localhost The authenticity of host 'localhost (::1)' can't be established. RSA key fingerprint is f3:fc:31:dc:7d:16:d5:ad:8c:bc:eb:69:8f:b2:0b:c9. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'localhost' (RSA) to the list of known hosts. user01@localhost's password: This service allows sftp connections only. #ssh登录也失败，ssh设置成功 Connection to localhost closed. [root@test ~]# sftp user01@localhost Connecting to localhost... user01@localhost's password: sftp\u003e ls upload sftp\u003e pwd Remote working directory: / sftp\u003e 0.3.0.5 3.2 SFTP 工具测试 我这里使用的是Mac，但是传统的文件传输工具都差不多，Windows下有Winscp、Xftp等。 ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:3","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#3-测试验证"},{"categories":["Linux","CentOS"],"content":" 0.3 3. 测试验证 0.3.0.4 3.1 Linux 登录测试 [root@test ~]# su - user01 This account is currently not available. #su - 切换失败 [root@test ~]# cat /etc/passwd | tail -1 user01:x:500:500::/sftp/user01:/sbin/nologin [root@test ~]# ssh user01@localhost The authenticity of host 'localhost (::1)' can't be established. RSA key fingerprint is f3:fc:31:dc:7d:16:d5:ad:8c:bc:eb:69:8f:b2:0b:c9. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'localhost' (RSA) to the list of known hosts. user01@localhost's password: This service allows sftp connections only. #ssh登录也失败，ssh设置成功 Connection to localhost closed. [root@test ~]# sftp user01@localhost Connecting to localhost... user01@localhost's password: sftp\u003e ls upload sftp\u003e pwd Remote working directory: / sftp\u003e 0.3.0.5 3.2 SFTP 工具测试 我这里使用的是Mac，但是传统的文件传输工具都差不多，Windows下有Winscp、Xftp等。 ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:3","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#31-linux-登录测试"},{"categories":["Linux","CentOS"],"content":" 0.3 3. 测试验证 0.3.0.4 3.1 Linux 登录测试 [root@test ~]# su - user01 This account is currently not available. #su - 切换失败 [root@test ~]# cat /etc/passwd | tail -1 user01:x:500:500::/sftp/user01:/sbin/nologin [root@test ~]# ssh user01@localhost The authenticity of host 'localhost (::1)' can't be established. RSA key fingerprint is f3:fc:31:dc:7d:16:d5:ad:8c:bc:eb:69:8f:b2:0b:c9. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'localhost' (RSA) to the list of known hosts. user01@localhost's password: This service allows sftp connections only. #ssh登录也失败，ssh设置成功 Connection to localhost closed. [root@test ~]# sftp user01@localhost Connecting to localhost... user01@localhost's password: sftp\u003e ls upload sftp\u003e pwd Remote working directory: / sftp\u003e 0.3.0.5 3.2 SFTP 工具测试 我这里使用的是Mac，但是传统的文件传输工具都差不多，Windows下有Winscp、Xftp等。 ","date":"2016-03-24","objectID":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/:0:3","series":null,"tags":["SSH"],"title":"在CentOS中配置 SFTP 环境","uri":"https://samzong.me/%E5%9C%A8centos%E4%B8%AD%E9%85%8D%E7%BD%AE-sftp-%E7%8E%AF%E5%A2%83/#32-sftp-工具测试"},{"categories":["数据库","MySQL"],"content":" 说下实际项目场景，公司一个应用已部署主从数据库，业务也正式上线；现在客户公司领导希望可以看到每天的业务数据报表，本设定直接到从库拿数据，然后进行数据处理，生成报表，但是Java同事提出需求新增用户和权限表，这样一来，如果直接使用生产库的表会导致后台系统管理人员与领导的账户和权限混淆，经过讨论决定，按照生产库的表结构新增特殊用户表和权限表；这样操作实际是可以在从库上新增表单，且不影响主从库之间的数据同步，但是从安全性的考虑，新增表单设计需要给用户Insert权限，为了保证从库只有利用主库同步写入数据，则只能给其他用户select权限。 最终决定，因为报表系统的使用率低，直接在报表系统的服务器安装本地mysql数据库，通过计划任务定时到从库上同步数据。 ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:0","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#"},{"categories":["数据库","MySQL"],"content":" 0.1 1. 测试环境 MacBook Pro 15‘ i7 16GB VMware Fushion 8 Pro MySQL Version 5.6 CentOS Linux 6.x slave Server ：172.16.102.129 local Server ：172.167.102.133 ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:1","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#1-测试环境"},{"categories":["数据库","MySQL"],"content":" 0.2 2. 利用mysqldump导出sql文件 需要注意的是，mysqldump时会锁表，需要给mysqldump传递 “–single-transaction” 参数，可以使得mysqldump时不锁表，如下： /usr/bin/mysqldump -h 172.168.102.129 -u dbuser -pdbuser --single-transaction slave \u003e slave.sql ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:2","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#2-利用mysqldump导出sql文件"},{"categories":["数据库","MySQL"],"content":" 0.3 3. 使用mysql恢复sql文件到数据库中 需要注意的是，如果该local server的slave库中有数据表，当表名与slave server的表名相同时，数据表内的数据会被覆盖；如果local server的表在slave.sql中不存在，则不受影响，正是利用这个特性解决用户需求。 /usr/bin/mysql -u dbuser -pdbuser report \u003c /home/.mysql/slave.sql ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:3","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#3-使用mysql恢复sql文件到数据库中"},{"categories":["数据库","MySQL"],"content":" 0.4 4. 编写脚本 首先在本地某一位置作为临时sql存储地址： [root@report ~]# mkdir /home/.mysql # 这个目录可以自定义 脚本1： #!/bin/bash TIME=`date \"+%Y%m%d%H\"` rm -rf /home/.mysql/* /usr/bin/mysqldump -h 172.168.102.129 -u dbuser -pdbuser --single-transaction slave \u003e /home/.mysql/slave_$TIME.sql /usr/bin/mysql -u dbuser -pdbuser report \u003c /home/.mysql/slave_$TIME.sql ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:4","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#4-编写脚本"},{"categories":["数据库","MySQL"],"content":" 0.5 5. 增加邮件通知功能 因为前期同事需要得知备份的执行结果，所以希望数据同步成功后获得邮件提醒，这里使用sendmail实现，在CentOS里预装是没有安装sendmail，所以我们需要安装sendmail服务，另外一个安装命令行邮件工具mailx： [root@report ~]# yum install -y sendmail mailx ...... [root@report ~]# service sendmail start Starting sendmail: [ OK ] Starting sm-client: [ OK ] [root@report ~]# chkconfig sendmail on 完整脚本：report_sync.sh ，如下： #!/bin/bash TIME=`date \"+%Y%m%d%H\"` rm -rf /home/.mysql/* /usr/bin/mysqldump -h 172.168.102.129 -u dbuser -pdbuser --single-transaction slave \u003e /home/.mysql/slave_$TIME.sql /usr/bin/mysql -u dbuser -pdbuser report \u003c /home/.mysql/slave_$TIME.sql # send mail to adminuser if [ $? -eq 0 ] then echo \"report SQL sync is successfully. At time: `date` \" | mail -s report-sync-successfully hello@abc.cn else echo \" Error Error report SQL sync is Error. At time: `date` \" | mail -s report-sync-error hello@abc.cn fi 查看下邮件通知： ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:5","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#5-增加邮件通知功能"},{"categories":["数据库","MySQL"],"content":" 0.6 6. 计划任务crontab 和同事及客户沟通，确认每天1、5、9、13、17、21整时到从库拉去数据，Linux选择使用crontab做计划任务，crontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 0.6.1 6.1 安装crontab [root@report ~]# yum install -y vixie-cron [root@report ~]# yum install -y crontabs 说明： vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 crond 守护进程的表格的程序。 cron 是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务： /sbin/service crond start #启动服务 /sbin/service crond stop #关闭服务 /sbin/service crond restart #重启服务 /sbin/service crond reload #重新载入配置 设置crond开机自启动 [root@report ~]# chkconfig crond on ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:6","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#6-计划任务crontab"},{"categories":["数据库","MySQL"],"content":" 0.6 6. 计划任务crontab 和同事及客户沟通，确认每天1、5、9、13、17、21整时到从库拉去数据，Linux选择使用crontab做计划任务，crontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 0.6.1 6.1 安装crontab [root@report ~]# yum install -y vixie-cron [root@report ~]# yum install -y crontabs 说明： vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 crond 守护进程的表格的程序。 cron 是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务： /sbin/service crond start #启动服务 /sbin/service crond stop #关闭服务 /sbin/service crond restart #重启服务 /sbin/service crond reload #重新载入配置 设置crond开机自启动 [root@report ~]# chkconfig crond on ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:6","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#61-安装crontab"},{"categories":["数据库","MySQL"],"content":" 0.7 7. 添加计划任务 将脚本report_sync.sh 保存到/usr/bin下： [root@report ~]# mv report_sync.sh /usr/bin 增加计划任务： [root@report ~]# crontab -e # add this word. * 1-21/4 * * * /usr/bin/report_sync.sh # 表示在每天的1-21时间内，每4小时执行一个脚本 ","date":"2016-03-24","objectID":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/:0:7","series":null,"tags":["MySQL","CentOS","Shell"],"title":"利用 Linux 计划任务定时同步 MySQL","uri":"https://samzong.me/mysql-6-%E5%88%A9%E7%94%A8linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5mysql/#7-添加计划任务"},{"categories":["Linux"],"content":" 一. 选择题 （1题1分） 1. 当登录Linux时，一个具有唯一进程ID号的shell将被调用，这个ID是什么( ) A. NID　B. PID　C. UID　D. CID 答案:B 2. 用vi打开一个文件，如何用字母\"new\"来代替字母\"old\" ( ) A. :s/old/new/g　B. :s/old/new　C. :1,$s/old/new/g　D. :r/old/new 答案:A 3. 请选择对标准的变量PS2正确的描述( ) A. 是一个主shell提示符变量　B. 是一个一般的shell提示符变量 C. 是第二主shell提示符变量　D. 是一个连续提示符变量 答案:B 4. 哪一个命令能用来查找文件TESTFILE中只包含四个字符的行?( ) A. grep '^????$' TESTFILE　B. grep '????' TESTFILE C. grep '^....$' TESTFILE　D. grep '....' TESTFILE 答案:C 5. 一个bash shell脚本的第一行是什么( ) A. #!/bin/bash　B. #/bin/bash　C. #/bin/csh　D. /bin/bash 答案:A 6. 用标准的输出重定向(\u003e)像\"\u003e file01\"能使文件file01的数据（ ） A. 被移动　B. 被复制　C. 被打印　D. 被覆盖 答案:D 7. 下面哪个命令是用来定义shell的全局变量( ) A. exportfs　B. alias　C. exports　D. export 答案:D 8. 如果想加载一个/dev/sdb1的windows95分区到/mnt/win95目录，需要运行哪个命令( ) A. mount -t hpfs /dev/sdb1 /mnt/win95 B. mount -t hpfs /mnt/win95 /dev/sdb1 C. mount -t vfat /dev/sdb1 /mnt/win95 D. mount -t vfat /mnt/win95 /dev/sdb1 答案:C 9. 哪个文件存放用户密码信息( ) A. /boot/passwd　B. /etc/shadow　C. /var/passwd　D. /dev/passwd 答案:B 10. 假定kernel支持vfat分区，下面哪一个操作是将/dev/sda1，一个window98分区加载到/win目录( ) A. mount -s win /dev'sda1 /win B. mount -fs=msdos /dev/sda1 /win C. mount -t vfat /dev/sda1 /win D. mount -t windows /win /dev/sda1 答案:C 11. 默认情况下管理员创建了一个用户，就会在( )目录下创建一个用户主目录。 A. /usr　B. /home　C. /root　D. /etc 答案:B 12. 如果要列出一个目录下的所有文件需要使用命令行( )。 A. ls –l　B. ls　C. ls –a　D. ls -d 答案:C 13. 利用哪个工具可以设置用户在文件系统中的空间大小( )。 A. turboservice　B. turbofscfg　C. turbonetcfg　D. turboxcfg 答案:B 14. 哪个命令可以将普通用户转换成超级用户( ) A. super　B. passwd　C. tar　D. su 答案:D 15. 哪个命令用来显示/home及其子目录下文件名( ) A. ls -R /home　B. ls -d /home　C. ls -a /home　D. ls -l /home 答案:A 16. 在vi模式下，哪个命令用来删除光标处的字符( ) A. xd　B. x　C. dd　D. d 答案:B　dd删除一行,x删除当前字符 17. 在一行内运行多个命令需要用什么字符隔开( ) A. @　B. $　C. ;　D. * 答案:C 18. 确定myfile的文件类型的命令是( ) A. whatis myfile B. file myfile C. type myfile D. type -q myfile 答案:B 19. 哪些命令组合起来能统计多少用户登录系统( ) A. who | wc –w　B. who | wc –l　C. who | wc –c　D. who | wc 答案:BD 20. 用 \"rm -i\",系统会提示什么来让你确认( ) A. 命令行的每个选项　B. 是否真的删除　C. 是否有写的权限　D. 文件的位置 答案:B 21. Linux启动的第一个进程init启动的第一个脚本程序是( )。 A. /etc/rc.d/init.d　B. /etc/rc.d/rc.sysinit　C. /etc/rc.d/rc5.d　D. /etc/rc.d/rc3.d 答案:B 22. 按下( )键能终止当前运行的命令 A. Ctrl-C　B. Ctrl-F　C. Ctrl-B　D. Ctrl-D 答案:a 23. 用来分离目录名和文件名的字符是( ) A. dash (-)　B. slash (/)　C. period (.)　D. asterisk（*） 答案:B 24. 系统的配置文件在( )目录下 A. /home　B. /dev　C. /etc　D. /usr 答案:C 25. 显示用户的主目录的命令是什么?( ) A. echo $HOME　B. echo $USERDIR　C. echo $ENV　D. echo $ECHO 答案:A 26. 在vi编辑器里，哪个命令能将光标移到第200行( ) A. g200　B. G200　C. :200　D. 200g 答案:C :200可以，200G也可以 27. 用\"useradd jerry\"命令添加一个用户，这个用户的主目录是什么?( ) A. /etc/jerry　B. /var/jerry　C. /home/jerry　D. /bin/jerry 答案:C 28. 哪一个命令能用来删除当前目录及其子目录下名为'core'的文件( ) A. find . -name core -exec rm {} \\ ; B. find . -name core -exec rm ; C. find . -name core -exec rm {} ; D. find . -name core -exec rm {} -; 答案:A 29. 以下哪条命令在创建一个xp用户的时候将用户加入到root组中( ) A. useradd -g xp root　B. useradd -r root xp　C. useradd -g root xp　D. useradd root xp 答案:C 30. 不改变运行级别而重新读入inittab文件的命令是( )。 A. init s　B. init q　C. init S　D. init Q 答案:B 31. 以下哪个命令可以终止一个用户的所有进程( ) A. skillall　B. skill　C. kill　D. killall 答案:D 32. 通过修改哪个文件可以在创建用户的时候改变用　户主目录的路径( ) A. /etc/default/passwd　B. /etc/default/useradd　C. /etc/profile　D. /etc/fstab 答案:B 33. 以只读方式打开一个文件并进入vi编辑器的命令是( ) A. view -r filename　B. view filename　C. vi filename　D. vi -r filename 答案:B 34. 以下哪个命令是将缓存中的内容粘贴到光标之前( ) A. a　B. i　C. P　D. p 答案:C 35. 以下哪条vi命令能将文档5-20行间出现的abc替换成为cba ( ) A. :1,$s/abc/cba/g　B. :5,20/abc/cba/g　C. :5-20s/abc/cba/g　D. :5,20s/abc/cba/g 答案:D . 在vi中通过哪条命令可以将ps命令执行的结果插入到文档中( ) A. :r!ps　B. :!ps　C. :!rps　D. :w!ps 答案:A 36. 以下哪个vi命令可以在当前位置插入/etc/passwd文本文件( ) A. :r /etc/passwd　B. :i /etc/passwd　C. :w /etc/passwd　D. :s /etc/passwd 答案:A 37. vi中复制整行的命令是( ) A. y1　B. yy　C. ss　D. dd 答案:B 38. 以下哪个vi命令可以给文档的每行加上一个编号( ) A. :e number　B. :set number　C. :r!date D. :200g 答案:B 38. 以下哪些文件只有根用户才能读写( ) A. /etc/bashrc　B. /etc/profile　C. /etc/shadow　D. /etc/passwd 答案:BC 39. 使用groupdel删除一个组的时候，命令执行失败，原因可能是( ) A. 该组是系统组　B. 该组是空的　C. 该组中成员非空　D. 该组不存在 答案:CD 40. Linux中文件名构成的规则比较灵活表现在( ) A. 文件名长度多达256个字符　B. 可以使用除了/符号外的所有ASCI","date":"2016-03-23","objectID":"https://samzong.me/linux-%E7%AC%94%E8%AF%95%E8%AF%95%E9%A2%98/:0:0","series":null,"tags":["Linux"],"title":"Linux 笔试试题","uri":"https://samzong.me/linux-%E7%AC%94%E8%AF%95%E8%AF%95%E9%A2%98/#"},{"categories":["数据库","MySQL"],"content":" 工欲善其事，必先利其器 – mysql开启慢日志优化","date":"2016-03-22","objectID":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/:0:0","series":null,"tags":["MySQL"],"title":"MySQL 开启慢日志优化","uri":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/#工欲善其事必先利其器----mysql开启慢日志优化"},{"categories":["数据库","MySQL"],"content":" 0.1 慢查询日志顾名思义就是记录查询比较慢得日志。 ","date":"2016-03-22","objectID":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/:0:1","series":null,"tags":["MySQL"],"title":"MySQL 开启慢日志优化","uri":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/#慢查询日志"},{"categories":["数据库","MySQL"],"content":" 0.2 测试环境 mysql-server 5.6 CentOS 6.5 VMware Fushion 8 pro 首先，第一部查看是否已经开启慢查询日志： mysql\u003e show variables like '%slow%'; +---------------------+---------------------------------+ | Variable_name | Value | +---------------------+---------------------------------+ | log_slow_queries | OFF | | slow_launch_time | 2 | | slow_query_log | OFF | | slow_query_log_file | /var/run/mysqld/mysqld-slow.log | +---------------------+---------------------------------+ 4 rows in set (0.00 sec) mysql\u003e 打开慢查询日志。修改MySQL的配置文件my.cnf一般是在/etc目录下面，加上下面三行配置后重启MySQL。 slow_query_log = ON slow_launch_time = 2 slow_query_log_file = /usr/local/mysql/data/slow_query.log slow_launch_time只能精确到秒，如果需要更精确可以使用一些第三方的工具比如后面介绍的pt-query-digest mysql\u003e show variables like '%slow%'; +---------------------------+--------------------------------------+ | Variable_name | Value | +---------------------------+--------------------------------------+ | log_slow_admin_statements | OFF | | log_slow_slave_statements | OFF | | slow_launch_time | 2 | | slow_query_log | ON | | slow_query_log_file | /usr/local/mysql/data/slow_query.log | +---------------------------+--------------------------------------+ 5 rows in set (0.00 sec) mysql\u003e Tips: 我这里用的MySQL版本是5.6，不同版本的MySQL开启慢查询的配置是不同的，比如5.6之前的某些版本是long_query_time, long_query_time和log-slow-queries。可以先在终端执行show variables like ‘%slow%’;查看下当前版本具体配置是什么。 也可以在终端中通过设置全局变量来打开慢查询日志： set @@global.slow_query_log = ON; ","date":"2016-03-22","objectID":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/:0:2","series":null,"tags":["MySQL"],"title":"MySQL 开启慢日志优化","uri":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/#测试环境"},{"categories":["数据库","MySQL"],"content":" 0.3 保持慢查询日志到表中MySQL支持将慢查询日志保存到mysql.slow_log这张表中。通过@@global.log_output可以设置默认为TABLE，FILE和TABLE只能同时使用一个。 mysql\u003e select @@global.log_output; +---------------------+ | @@global.log_output | +---------------------+ | FILE | +---------------------+ 1 row in set (0.00 sec) mysql\u003e set @@global.log_output='TABLE'; mysql\u003e show create table mysql.slow_log; +----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | Table | Create Table | +----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | slow_log | CREATE TABLE `slow_log` ( `start_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, `user_host` mediumtext NOT NULL, `query_time` time NOT NULL, `lock_time` time NOT NULL, `rows_sent` int(11) NOT NULL, `rows_examined` int(11) NOT NULL, `db` varchar(512) NOT NULL, `last_insert_id` int(11) NOT NULL, `insert_id` int(11) NOT NULL, `server_id` int(10) unsigned NOT NULL, `sql_text` mediumtext NOT NULL, `thread_id` bigint(21) unsigned NOT NULL ) ENGINE=CSV DEFAULT CHARSET=utf8 COMMENT='Slow log' | +----------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 1 row in set (0.00 sec) mysql\u003e 我们可以用下列语句用来模仿慢查询； select sleep(10); mysql\u003e select * from mysql.slow_Log -\u003e ; ERROR 1146 (42S02): Table 'mysql.slow_Log' doesn't exist mysql\u003e select * from mysql.slow_log; +---------------------+---------------------------+------------+-----------+-----------+---------------+----+----------------+-----------+-----------+------------------+-----------+ | start_time | user_host | query_time | lock_time | rows_sent | rows_examined | db | last_insert_id | insert_id | server_id | sql_text | thread_id | +---------------------+---------------------------+------------+-----------+-----------+---------------+----+----------------+-----------+-----------+------------------+-----------+ | 2016-03-21 23:07:15 | root[root] @ localhost [] | 00:00:10 | 00:00:00 | 1 | 0 | | 0 | 0 | 0 | select sleep(10) | 2 | +---------------------+---------------------------+------------+-----------+-----------+---------------+----+----------------+-----------+-----------+------------------+-----------+ 1 row in set (0.01 sec) mysql\u003e ","date":"2016-03-22","objectID":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/:0:3","series":null,"tags":["MySQL"],"title":"MySQL 开启慢日志优化","uri":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/#保持慢查询日志到表中"},{"categories":["数据库","MySQL"],"content":" 0.4 慢查询日志分析 可以使用MySQL自带的mysqldumpslow工具。使用很简单，可以跟-help来查看具体的用法。 # -s：排序方式。c , t , l , r 表示记录次数、时间、查询时间的多少、返回的记录数排序； # ac , at , al , ar 表示相应的倒叙； # -t：返回前面多少条的数据； # -g：包含什么，大小写不敏感的； mysqldumpslow -s r -t 10 /slowquery.log #slow记录最多的10个语句 mysqldumpslow -s t -t 10 -g \"left join\" /slowquery.log #按照时间排序前10中含有\"left join\"的 可以导到mysql.slow_query表中，然后通过sql语句进行分析。 使用第三方工具，下面会有介绍。 ","date":"2016-03-22","objectID":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/:0:4","series":null,"tags":["MySQL"],"title":"MySQL 开启慢日志优化","uri":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/#慢查询日志分析"},{"categories":["数据库","MySQL"],"content":" 0.5 pt-query-digestpt-query-digest可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从SHOW PROCESSLIST和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。 最简单地用法如下： pt-query-digest slow.logs 输出信息大致如下: ","date":"2016-03-22","objectID":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/:0:5","series":null,"tags":["MySQL"],"title":"MySQL 开启慢日志优化","uri":"https://samzong.me/mysql-2-%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97%E4%BC%98%E5%8C%96/#pt-query-digest"},{"categories":["Linux","CentOS"],"content":" 1. CentOS 6.x 初始安装基本优化操作 本文件是采用的模板是centos 6.x，相较于centos 5.x与centos 7.x系列有些区别，不能一概而论。 ","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:0","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#centos-6x-初始安装基本优化操作"},{"categories":["Linux","CentOS"],"content":" 1.1 1. 测试环境 MacBook Pro 15-inch i7 8GB VMware Fushion 8 Pro CentOS-6.7-x86_64-minimal.iso ","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:1","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#1-测试环境"},{"categories":["Linux","CentOS"],"content":" 1.2 2. 默认网卡开机未设定自启动 很多初学者，在安装系统的时候，碰到的第一个问题就是不能上网，所以有些同学就担心是不是需要去安装网卡驱动，其实这样想就把问题复杂化了，如果你在实体机安装Linux的系统时，可能会碰到网卡驱动不上导致无法上网的问题，这个时候是需要自行安装驱动的，但是我们使用的VMware的一款虚拟化工具，所以网卡驱动基本就不用考虑，原因是因为我们没有把网卡设置为开机自启动，下面讲如何开启网卡，并设定为开机自启动。 [root@vm02 ~]# ifup eth0 Determining IP information for eth0... done. [root@vm02 ~]# [root@vm02 ~]# ifconfig eth0 eth0 Link encap:Ethernet HWaddr 00:0C:29:B9:60:D8 inet addr:172.16.102.129 Bcast:172.16.102.255 Mask:255.255.255.0 inet6 addr: fe80::20c:29ff:feb9:60d8/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:127 errors:0 dropped:0 overruns:0 frame:0 TX packets:85 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:14010 (13.6 KiB) TX bytes:11410 (11.1 KiB) [root@vm02 ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 HWADDR=00:0C:29:B9:60:D8 TYPE=Ethernet UUID=7ad636ff-78d9-4afa-9886-706b1de236a8 ONBOOT=no // 默认是no，修改为yes NM_CONTROLLED=yes BOOTPROTO=dhcp ","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:2","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#2-默认网卡开机未设定自启动"},{"categories":["Linux","CentOS"],"content":" 1.3 3. 增加第三方Yum源 CentOS 系统内置的官方源软件更新较慢，而且缺少一些常用软件包，建议安装epel源，EPEL 是 Extra Packages for Enterprise Linux 的缩写（EPEL），是用于 Fedora-based Red Hat Enterprise Linux (RHEL) 的一个高质量软件源，所以同时也适用于 CentOS 或者 Scientific Linux 等发行版。 1.3.0.1 a. 因为我们使用的是minimal版本的ISO安装，所以系统默认没有wget，我们可以直接用yum安装：[wget是Linux常用的命令行下载工具] [root@vm02 ~]# yum install -y wget Loaded plugins: fastestmirror Setting up Install Process base | 3.7 kB 00:00 base/primary_db | 4.6 MB 00:32 extras | 3.4 kB 00:00 extras/primary_db | 34 kB 00:00 updates | 3.4 kB 00:00 updates/primary_db | 4.0 MB 01:05 Resolving Dependencies --\u003e Running transaction check ---\u003e Package wget.x86_64 0:1.12-5.el6_6.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ================================================================================ Package Arch Version Repository Size ================================================================================ Installing: wget x86_64 1.12-5.el6_6.1 base 483 k Transaction Summary ================================================================================ Install 1 Package(s) Total download size: 483 k Installed size: 1.8 M Downloading Packages: wget-1.12-5.el6_6.1.x86_64.rpm | 483 kB 00:01 warning: rpmts_HdrFromFdno: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 Importing GPG key 0xC105B9DE: Userid : CentOS-6 Key (CentOS 6 Official Signing Key) \u003ccentos-6-key@centos.org\u003e Package: centos-release-6-7.el6.centos.12.3.x86_64 (@anaconda-CentOS-201508042137.x86_64/6.7) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 Running rpm_check_debug Running Transaction Test Transaction Test Succeeded Running Transaction Installing : wget-1.12-5.el6_6.1.x86_64 1/1 Verifying : wget-1.12-5.el6_6.1.x86_64 1/1 Installed: wget.x86_64 0:1.12-5.el6_6.1 Complete! [root@vm02 ~]# 1.3.0.2 b. 下载并安装epel源 不同CentOS版本的epel下载地址： CentOS 5 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm CentOS 6 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm CentOS 7 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 本次试验用到的CentOS 6 所以我们下载epel-release-latest-6.noarch.rpm [root@vm02 ~]# wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm --2016-03-18 11:47:17-- https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm Resolving dl.fedoraproject.org... 209.132.181.26, 209.132.181.23, 209.132.181.24, ... Connecting to dl.fedoraproject.org|209.132.181.26|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 14540 (14K) [application/x-rpm] Saving to: “epel-release-latest-6.noarch.rpm” 100%[======================================\u003e] 14,540 69.5K/s in 0.2s 2016-03-18 11:47:25 (69.5 KB/s) - “epel-release-latest-6.noarch.rpm” saved [14540/14540] [root@vm02 ~]# ls anaconda-ks.cfg install.log epel-release-latest-6.noarch.rpm install.log.syslog ","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:3","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#3-增加第三方yum源"},{"categories":["Linux","CentOS"],"content":" 1.3 3. 增加第三方Yum源 CentOS 系统内置的官方源软件更新较慢，而且缺少一些常用软件包，建议安装epel源，EPEL 是 Extra Packages for Enterprise Linux 的缩写（EPEL），是用于 Fedora-based Red Hat Enterprise Linux (RHEL) 的一个高质量软件源，所以同时也适用于 CentOS 或者 Scientific Linux 等发行版。 1.3.0.1 a. 因为我们使用的是minimal版本的ISO安装，所以系统默认没有wget，我们可以直接用yum安装：[wget是Linux常用的命令行下载工具] [root@vm02 ~]# yum install -y wget Loaded plugins: fastestmirror Setting up Install Process base | 3.7 kB 00:00 base/primary_db | 4.6 MB 00:32 extras | 3.4 kB 00:00 extras/primary_db | 34 kB 00:00 updates | 3.4 kB 00:00 updates/primary_db | 4.0 MB 01:05 Resolving Dependencies --\u003e Running transaction check ---\u003e Package wget.x86_64 0:1.12-5.el6_6.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ================================================================================ Package Arch Version Repository Size ================================================================================ Installing: wget x86_64 1.12-5.el6_6.1 base 483 k Transaction Summary ================================================================================ Install 1 Package(s) Total download size: 483 k Installed size: 1.8 M Downloading Packages: wget-1.12-5.el6_6.1.x86_64.rpm | 483 kB 00:01 warning: rpmts_HdrFromFdno: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 Importing GPG key 0xC105B9DE: Userid : CentOS-6 Key (CentOS 6 Official Signing Key) Package: centos-release-6-7.el6.centos.12.3.x86_64 (@anaconda-CentOS-201508042137.x86_64/6.7) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 Running rpm_check_debug Running Transaction Test Transaction Test Succeeded Running Transaction Installing : wget-1.12-5.el6_6.1.x86_64 1/1 Verifying : wget-1.12-5.el6_6.1.x86_64 1/1 Installed: wget.x86_64 0:1.12-5.el6_6.1 Complete! [root@vm02 ~]# 1.3.0.2 b. 下载并安装epel源 不同CentOS版本的epel下载地址： CentOS 5 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm CentOS 6 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm CentOS 7 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 本次试验用到的CentOS 6 所以我们下载epel-release-latest-6.noarch.rpm [root@vm02 ~]# wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm --2016-03-18 11:47:17-- https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm Resolving dl.fedoraproject.org... 209.132.181.26, 209.132.181.23, 209.132.181.24, ... Connecting to dl.fedoraproject.org|209.132.181.26|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 14540 (14K) [application/x-rpm] Saving to: “epel-release-latest-6.noarch.rpm” 100%[======================================\u003e] 14,540 69.5K/s in 0.2s 2016-03-18 11:47:25 (69.5 KB/s) - “epel-release-latest-6.noarch.rpm” saved [14540/14540] [root@vm02 ~]# ls anaconda-ks.cfg install.log epel-release-latest-6.noarch.rpm install.log.syslog ","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:3","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#a-因为我们使用的是minimal版本的iso安装所以系统默认没有wget我们可以直接用yum安装wget是linux常用的命令行下载工具"},{"categories":["Linux","CentOS"],"content":" 1.3 3. 增加第三方Yum源 CentOS 系统内置的官方源软件更新较慢，而且缺少一些常用软件包，建议安装epel源，EPEL 是 Extra Packages for Enterprise Linux 的缩写（EPEL），是用于 Fedora-based Red Hat Enterprise Linux (RHEL) 的一个高质量软件源，所以同时也适用于 CentOS 或者 Scientific Linux 等发行版。 1.3.0.1 a. 因为我们使用的是minimal版本的ISO安装，所以系统默认没有wget，我们可以直接用yum安装：[wget是Linux常用的命令行下载工具] [root@vm02 ~]# yum install -y wget Loaded plugins: fastestmirror Setting up Install Process base | 3.7 kB 00:00 base/primary_db | 4.6 MB 00:32 extras | 3.4 kB 00:00 extras/primary_db | 34 kB 00:00 updates | 3.4 kB 00:00 updates/primary_db | 4.0 MB 01:05 Resolving Dependencies --\u003e Running transaction check ---\u003e Package wget.x86_64 0:1.12-5.el6_6.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ================================================================================ Package Arch Version Repository Size ================================================================================ Installing: wget x86_64 1.12-5.el6_6.1 base 483 k Transaction Summary ================================================================================ Install 1 Package(s) Total download size: 483 k Installed size: 1.8 M Downloading Packages: wget-1.12-5.el6_6.1.x86_64.rpm | 483 kB 00:01 warning: rpmts_HdrFromFdno: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 Importing GPG key 0xC105B9DE: Userid : CentOS-6 Key (CentOS 6 Official Signing Key) Package: centos-release-6-7.el6.centos.12.3.x86_64 (@anaconda-CentOS-201508042137.x86_64/6.7) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 Running rpm_check_debug Running Transaction Test Transaction Test Succeeded Running Transaction Installing : wget-1.12-5.el6_6.1.x86_64 1/1 Verifying : wget-1.12-5.el6_6.1.x86_64 1/1 Installed: wget.x86_64 0:1.12-5.el6_6.1 Complete! [root@vm02 ~]# 1.3.0.2 b. 下载并安装epel源 不同CentOS版本的epel下载地址： CentOS 5 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm CentOS 6 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm CentOS 7 ： https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 本次试验用到的CentOS 6 所以我们下载epel-release-latest-6.noarch.rpm [root@vm02 ~]# wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm --2016-03-18 11:47:17-- https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm Resolving dl.fedoraproject.org... 209.132.181.26, 209.132.181.23, 209.132.181.24, ... Connecting to dl.fedoraproject.org|209.132.181.26|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 14540 (14K) [application/x-rpm] Saving to: “epel-release-latest-6.noarch.rpm” 100%[======================================\u003e] 14,540 69.5K/s in 0.2s 2016-03-18 11:47:25 (69.5 KB/s) - “epel-release-latest-6.noarch.rpm” saved [14540/14540] [root@vm02 ~]# ls anaconda-ks.cfg install.log epel-release-latest-6.noarch.rpm install.log.syslog ","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:3","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#b-下载并安装epel源"},{"categories":["Linux","CentOS"],"content":" 1.4 4. 安装vim：Linux使用最广泛的文件编辑工具 与我们长久使用Win环境不同的是，在Linux之中，我们接触最多的是command line，所以熟练一款命令行下的文本编辑工具是一项必备技能，我这里推荐大家：vim。 [root@vm02 ~]# yum install -y vim Loaded plugins: fastestmirror Setting up Install Process Determining fastest mirrors * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.com Resolving Dependencies --\u003e Running transaction check ---\u003e Package vim-enhanced.x86_64 2:7.4.629-5.el6 will be installed --\u003e Processing Dependency: vim-common = 2:7.4.629-5.el6 for package: 2:vim-enhanced-7.4.629-5.el6.x86_64 --\u003e Processing Dependency: perl(:MODULE_COMPAT_5.10.1) for package: 2:vim-enhanced-7.4.629-5.el6.x86_64 --\u003e Processing Dependency: libperl.so()(64bit) for package: 2:vim-enhanced-7.4.629-5.el6.x86_64 --\u003e Processing Dependency: libgpm.so.2()(64bit) for package: 2:vim-enhanced-7.4.629-5.el6.x86_64 --\u003e Running transaction check ---\u003e Package gpm-libs.x86_64 0:1.20.6-12.el6 will be installed ---\u003e Package perl.x86_64 4:5.10.1-141.el6_7.1 will be installed --\u003e Processing Dependency: perl(version) for package: 4:perl-5.10.1-141.el6_7.1.x86_64 --\u003e Processing Dependency: perl(Pod::Simple) for package: 4:perl-5.10.1-141.el6_7.1.x86_64 --\u003e Processing Dependency: perl(Module::Pluggable) for package: 4:perl-5.10.1-141.el6_7.1.x86_64 ---\u003e Package perl-libs.x86_64 4:5.10.1-141.el6_7.1 will be installed ---\u003e Package vim-common.x86_64 2:7.4.629-5.el6 will be installed --\u003e Processing Dependency: vim-filesystem for package: 2:vim-common-7.4.629-5.el6.x86_64 --\u003e Running transaction check ---\u003e Package perl-Module-Pluggable.x86_64 1:3.90-141.el6_7.1 will be installed ---\u003e Package perl-Pod-Simple.x86_64 1:3.13-141.el6_7.1 will be installed --\u003e Processing Dependency: perl(Pod::Escapes) \u003e= 1.04 for package: 1:perl-Pod-Simple-3.13-141.el6_7.1.x86_64 ---\u003e Package perl-version.x86_64 3:0.77-141.el6_7.1 will be installed ---\u003e Package vim-filesystem.x86_64 2:7.4.629-5.el6 will be installed --\u003e Running transaction check ---\u003e Package perl-Pod-Escapes.x86_64 1:1.04-141.el6_7.1 will be installed --\u003e Finished Dependency Resolution Dependencies Resolved ============================================================================================================================================================================= Package Arch Version Repository Size ============================================================================================================================================================================= Installing: vim-enhanced x86_64 2:7.4.629-5.el6 base 1.0 M Installing for dependencies: gpm-libs x86_64 1.20.6-12.el6 base 28 k perl x86_64 4:5.10.1-141.el6_7.1 updates 10 M perl-Module-Pluggable x86_64 1:3.90-141.el6_7.1 updates 40 k perl-Pod-Escapes x86_64 1:1.04-141.el6_7.1 updates 33 k perl-Pod-Simple x86_64 1:3.13-141.el6_7.1 updates 213 k perl-libs x86_64 4:5.10.1-141.el6_7.1 updates 579 k perl-version x86_64 3:0.77-141.el6_7.1 updates 52 k vim-common x86_64 2:7.4.629-5.el6 base 6.7 M vim-filesystem x86_64 2:7.4.629-5.el6 base 15 k Transaction Summary ============================================================================================================================================================================= Install 10 Package(s) Total download size: 19 M Installed size: 59 M Downloading Packages: (1/10): gpm-libs-1.20.6-12.el6.x86_64.rpm | 28 kB 00:00 (2/10): perl-5.10.1-141.el6_7.1.x86_64.rpm | 10 MB 00:10 (3/10): perl-Module-Pluggable-3.90-141.el6_7.1.x86_64.rpm | 40 kB 00:00 (4/10): perl-Pod-Escapes-1.04-141.el6_7.1.x86_64.rpm | 33 kB 00:00 (5/10): perl-Pod-Simple-3.13-141.el6_7.1.x86_64.rpm | 213 kB 00:00 (6/10): perl-libs-5.10.1-141.el6_7.1.x86_64.rpm | 579 kB 00:00 (7/10): perl-version-0.77-141.el6_7.1.x86_64.rpm | 52 kB 00:00 (8/10): vim-common-7.4.629-5.el6.x86_64.rpm | 6.7 MB 00:07 (9/10): vim-enhanced-7.4.629-5.el6.x86_64.rpm | 1.0 MB 00:01 (10/10): vim-filesystem-7.4.629-5.el6.x86_64.rpm | 15 kB 00:00 --------------------------------------------------------------------","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:4","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#4-安装vimlinux使用最广泛的文件编辑工具"},{"categories":["Linux","CentOS"],"content":" 1.5 4. 关闭SELinux SELinux主要由美国国家安全局开发，并于2000年12月22日发行给开放源代码的开发社区。SELinux旨在加强访问控制架构以对付入侵的威胁或任何企图略过安全架构的应用程序，并且从2.6版的Linux核心就开始集成SELinux；但是SELinux严格的权限控制对于初学者来说并不是非常必要，所以我们建议关闭SELinux，[其实由于SELinux的复杂性，很多运维人员都是选择关闭它，熟悉阿里云ECS的同学可能知道，它是默认关闭SELinux的，但是我们不建议在生产环境关闭SELinux。] SELinux的配置文件主要由两个：/etc/sysconfig/selinux、 /etc/selinux/config，其实第一个是第二个路径的软链接。 [root@vm02 ~]# vim /etc/selinux/config # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. SELINUX=enforcing # SELINUXTYPE= can take one of these two values: # targeted - Targeted processes are protected, # mls - Multi Level Security protection. SELINUXTYPE=targeted SELinux 的状态模式： enforcing : 强制启用SELinux permissive : 只显示警告讯息以替代强制启用SELinux disabled : 停用SELinux Tips: SELinux的参数只能在重启后生效。 SELinux 常用的两个命令：getenforce setenforce : getenforce 获得SELinux 当前的状态，返回值为如上三种； setenforce 临时改变SELinux的状态，参数为布尔值，0是关闭，1是开启。 Tips: 状态已经为disabled时，无法使用setenforce 1 启用。 ","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:5","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#4-关闭selinux"},{"categories":["Linux","CentOS"],"content":" 1.6 5.","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:6","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#5"},{"categories":["Linux","CentOS"],"content":" 1.7 6.","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:7","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#6"},{"categories":["Linux","CentOS"],"content":" 1.8 7.","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:8","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#7"},{"categories":["Linux","CentOS"],"content":" 1.9 8.","date":"2016-03-19","objectID":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/:1:9","series":null,"tags":["Linux","CentOS"],"title":"CentOS 初始安装基本优化操作","uri":"https://samzong.me/centos-6-2-%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%93%8D%E4%BD%9C/#8"},{"categories":["Linux"],"content":" 从inode了解Linux文件系统 硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录        现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包 ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件 ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 int fd; struct input_event ie; fd = open(\"/dev/input/event5\", O_RDONLY); read(fd, \u0026ie, sizeof(struct input_event)); printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value); close(fd); ### 硬链接与软链接的联系与区别        我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 ![](http://120.24.251.209/content/images/2016/03/image001.jpg) 在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 ``` # stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ... // 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz ``` 为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。 link oldfile newfile ln oldfile newfile 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 # ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" \u003e old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =\u003e `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file 文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#"},{"categories":["Linux"],"content":" 从inode了解Linux文件系统 硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录 现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包 ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件 ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 int fd; struct input_event ie; fd = open(\"/dev/input/event5\", O_RDONLY); read(fd, \u0026ie, sizeof(struct input_event)); printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value); close(fd); ### 硬链接与软链接的联系与区别 我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 ![](http://120.24.251.209/content/images/2016/03/image001.jpg) 在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 ``` # stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ... // 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz ``` 为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。 link oldfile newfile ln oldfile newfile 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 # ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" \u003e old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =\u003e `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file 文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#'list1'"},{"categories":["Linux"],"content":" 从inode了解Linux文件系统 硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录 现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包 ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件 ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 int fd; struct input_event ie; fd = open(\"/dev/input/event5\", O_RDONLY); read(fd, \u0026ie, sizeof(struct input_event)); printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value); close(fd); ### 硬链接与软链接的联系与区别 我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 ![](http://120.24.251.209/content/images/2016/03/image001.jpg) 在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 ``` # stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ... // 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz ``` 为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。 link oldfile newfile ln oldfile newfile 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 # ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" \u003e old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =\u003e `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file 文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#'list2'"},{"categories":["Linux"],"content":" 从inode了解Linux文件系统 硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录 现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包 ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件 ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 int fd; struct input_event ie; fd = open(\"/dev/input/event5\", O_RDONLY); read(fd, \u0026ie, sizeof(struct input_event)); printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value); close(fd); ### 硬链接与软链接的联系与区别 我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 ![](http://120.24.251.209/content/images/2016/03/image001.jpg) 在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 ``` # stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ... // 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz ``` 为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。 link oldfile newfile ln oldfile newfile 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 # ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" \u003e old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =\u003e `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file 文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#p1"},{"categories":["Linux"],"content":" 从inode了解Linux文件系统 硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录 现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包 ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件 ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 int fd; struct input_event ie; fd = open(\"/dev/input/event5\", O_RDONLY); read(fd, \u0026ie, sizeof(struct input_event)); printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value); close(fd); ### 硬链接与软链接的联系与区别 我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 ![](http://120.24.251.209/content/images/2016/03/image001.jpg) 在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 ``` # stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ... // 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz ``` 为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。 link oldfile newfile ln oldfile newfile 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 # ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" \u003e old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =\u003e `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file 文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#'list3'"},{"categories":["Linux"],"content":" 从inode了解Linux文件系统 硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录 现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包 ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件 ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 int fd; struct input_event ie; fd = open(\"/dev/input/event5\", O_RDONLY); read(fd, \u0026ie, sizeof(struct input_event)); printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value); close(fd); ### 硬链接与软链接的联系与区别 我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 ![](http://120.24.251.209/content/images/2016/03/image001.jpg) 在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 ``` # stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ... // 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz ``` 为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。 link oldfile newfile ln oldfile newfile 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 # ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" \u003e old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =\u003e `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file 文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#'list4'"},{"categories":["Linux"],"content":" 从inode了解Linux文件系统 硬链接与软链接是 Linux 文件系统中的一个重要概念，其涉及文件系统中的索引节点 (index node 又称 inode)，而索引节点对象是 Linux 虚拟文件系统 (VFS) 的四个基本概念之一。通过剖析硬链接与软链接的联系与区别，我们可更好的了解 Linux 中 VFS 这一通用文件模型。并让 Linux 普通用户和系统管理员正确使用硬链接与软链接，帮助文件系统开发者获取 inode 的相关知识。 Linux的文件系统与目录 现代操作系统为解决信息能独立于进程之外被长期存储引入了文件，文件作为进程创建信息的逻辑单元可被多个进程并发使用。在 UNIX 系统中，操作系统为磁盘上的文本与图像、鼠标与键盘等输入设备及网络交互等 I/O 操作设计了一组通用 API，使他们被处理时均可统一使用字节流方式。换言之，UNIX 系统中除进程之外的一切皆是文件，而 Linux 保持了这一特性。为了便于文件的管理，Linux 还引入了目录（有时亦被称为文件夹）这一概念。目录使文件可被分类管理，且目录的引入使 Linux 的文件系统形成一个层级结构的目录树。清单1.所示的是普通 Linux 系统的顶层目录结构，其中 /dev 是存放了设备相关文件的目录。 清单 1. Linux系统的顶层目录结构 / 根目录 ├── bin 存放用户二进制文件 ├── boot 存放内核引导配置文件 ├── dev 存放设备文件 ├── etc 存放系统配置文件 ├── home 用户主目录 ├── lib 动态共享库 ├── lost+found 文件系统恢复时的恢复文件 ├── media 可卸载存储介质挂载点 ├── mnt 文件系统临时挂载点 ├── opt 附加的应用程序包 ├── proc 系统内存的映射目录，提供内核与进程信息 ├── root root 用户主目录 ├── sbin 存放系统二进制文件 ├── srv 存放服务相关数据 ├── sys sys 虚拟文件系统挂载点 ├── tmp 存放临时文件 ├── usr 存放用户应用程序 └── var 存放邮件、系统日志等变化文件 Linux 将设备当做文件进行处理，清单 2.展示了如何打开设备文件 /dev/input/event5 并读取文件内容。文件 event5 表示一种输入设备，其可能是鼠标或键盘等。查看文件 /proc/bus/input/devices 可知 event5 对应设备的类型。设备文件 /dev/input/event5 使用 read() 以字符流的方式被读取。结构体 input_event 被定义在内核头文件 linux/input.h 中。 清单 2. 打开并读取设备文件 int fd; struct input_event ie; fd = open(\"/dev/input/event5\", O_RDONLY); read(fd, \u0026ie, sizeof(struct input_event)); printf(\"type = %d code = %d value = %d\\n\", ie.type, ie.code, ie.value); close(fd); ### 硬链接与软链接的联系与区别 我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图 1.展示了程序通过文件名获取文件内容的过程。 图 1. 通过文件名打开文件 ![](http://120.24.251.209/content/images/2016/03/image001.jpg) 在Linux 系统中查看 inode号可使用命令stat 或 ls -i（若是 AIX 系统，则使用命令 istat）。清单 3.中使用命令 mv 移动并重命名文件 glibc-2.16.0.tar.xz，其结果不影响文件的用户数据及 inode 号，文件移动前后 inode 号均为：2485677。 清单 3. 移动或重命名文件 ``` # stat /home/harris/source/glibc-2.16.0.tar.xz File: `/home/harris/source/glibc-2.16.0.tar.xz' Size: 9990512 Blocks: 19520 IO Block: 4096 regular file Device: 807h/2055d Inode: 2485677 Links: 1 Access: (0600/-rw-------) Uid: ( 1000/ harris) Gid: ( 1000/ harris) ... ... // 经网友指出，使用mv移动时不跨磁盘inode号不变，如果跨磁盘inode会改变。 # mv /home/harris/source/glibc-2.16.0.tar.xz /home/harris/Desktop/glibc.tar.xz # ls -i -F /home/harris/Desktop/glibc.tar.xz 2485677 /home/harris/Desktop/glibc.tar.xz ``` 为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名（见 图 2.hard link 就是 file 的一个别名，他们有共同的 inode）。硬链接可由命令 link 或 ln 创建。如下是对文件 oldfile 创建硬链接。 link oldfile newfile ln oldfile newfile 由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性： 文件有相同的 inode 及 data block； 只能对已存在的文件进行创建； 不能交叉文件系统进行硬链接的创建； 不能对目录进行创建，只可对文件创建； 删除一个硬链接文件并不影响其他有相同 inode 号的文件。 清单 4. 硬链接特性展示 # ls -li total 0 // 只能对已存在的文件创建硬连接 # link old.file hard.link link: cannot create link `hard.link' to `old.file': No such file or directory # echo \"This is an original file\" \u003e old.file # cat old.file This is an original file # stat old.file File: `old.file' Size: 25 Blocks: 8 IO Block: 4096 regular file Device: 807h/2055d Inode: 660650 Links: 2 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) ... // 文件有相同的 inode 号以及 data block # link old.file hard.link | ls -li total 8 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 hard.link 660650 -rw-r--r-- 2 root root 25 Sep 1 17:44 old.file // 不能交叉文件系统 # ln /dev/input/event5 /root/bfile.txt ln: failed to create hard link `/root/bfile.txt' =\u003e `/dev/input/event5': Invalid cross-device link // 不能对目录进行创建硬连接 # mkdir -p old.dir/test # ln old.dir/ hardlink.dir ln: `old.dir/': hard link not allowed for directory # ls -iF 660650 hard.link 657948 old.dir/ 660650 old.file 文件 old.file 与 hard.link 有着相同的 inode 号：660650 及文件权限，inode 是随着文件的存在而存在，因此只有当文件存在时才可创建硬链接，即当 inode 存在且链接计数器（link count）不为 0 时。inode 号仅在各文件系统下是唯一的，当 Linux 挂载多个文件系统后将出现 inode 号重复的现象（如清单 5.所示，文件 t3","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#'list5'"},{"categories":["Linux"],"content":" find / -inum 1114/media/DiskE/Pictures/t3.jpg /media/DiskF/123.txt /bin/sync \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;值得一提的是，Linux 系统存在 inode 号被用完但磁盘空间还有剩余的情况。我们创建一个 5M 大小的 ext4 类型的 mo.img 文件，并将其挂载至目录 /mnt。然后我们使用一个 shell 脚本将挂载在 /mnt 下 ext4 文件系统的 indoe 耗尽（见\u003ca href=\"#list6\"\u003e清单 6.\u003c/a\u003e）。 \u003ch4 id='list6'\u003e 清单 6. 测试文件系统 inode 耗尽但仍有磁盘空间的情景 \u003c/h4\u003e ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#find---inum-1114"},{"categories":["Linux"],"content":" dd if=/dev/zero of=mo.img bs=5120k count=1","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#dd-ifdevzero-ofmoimg-bs5120k-count1"},{"categories":["Linux"],"content":" ls -lh mo.img-rw-r–r– 1 root root 5.0M Sep 1 17:54 mo.img ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#ls--lh-moimg"},{"categories":["Linux"],"content":" mkfs -t ext4 -F ./mo.img… OS type: Linux Block size=1024 (log=0) Fragment size=1024 (log=0) Stride=0 blocks, Stripe width=0 blocks 1280 inodes, 5120 blocks 256 blocks (5.00%) reserved for the super user … … Writing superblocks and filesystem accounting information: done ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#mkfs--t-ext4---f-moimg"},{"categories":["Linux"],"content":" mount -o loop ./mo.img /mnt","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#mount--o-loop-moimg-mnt"},{"categories":["Linux"],"content":" cat /mnt/inode_test.sh#!/bin/bash for ((i = 1; ; i++)) do if [ $? -eq 0 ]; then echo “This is file_$i” \u003e file_$i else exit 0 fi done ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#cat-mntinode_testsh"},{"categories":["Linux"],"content":" ./inode_test.sh./inode_test.sh: line 6: file_1269: No space left on device ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#inode_testsh"},{"categories":["Linux"],"content":" df -iT /mnt/; du -sh /mnt/Filesystem Type Inodes IUsed IFree IUse% Mounted on /dev/loop0 ext4 1280 1280 0 100% /mnt 1.3M /mnt/ \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;硬链接不能对目录创建是受限于文件系统的设计（见 \u003ca href=\"#list4\"\u003e清单 4.\u003c/a\u003e对目录创建硬链接将失败）。现 Linux 文件系统中的目录均隐藏了两个个特殊的目录：当前目录（.）与父目录（..）。查看这两个特殊目录的 inode 号可知其实这两目录就是两个硬链接（注意目录 /mnt/lost+found/ 的 inode 号）。若系统允许对目录创建硬链接，则会产生目录环。 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#df--it-mnt-du--sh-mnt"},{"categories":["Linux"],"content":" ls -aliF /mnt/lost+foundtotal 44 11 drwx—— 2 root root 12288 Sep 1 17:54 ./ 2 drwxr-xr-x 3 root root 31744 Sep 1 17:57 ../ ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#ls--alif-mntlostfound"},{"categories":["Linux"],"content":" stat /mnt/lost+found/File: `/mnt/lost+found/' Size: 12288 Blocks: 24 IO Block: 1024 directory Device: 700h/1792d Inode: 11 Links: 2 Access: (0700/drwx——) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2012-09-01 17:57:17.000000000 +0800 Modify: 2012-09-01 17:54:49.000000000 +0800 Change: 2012-09-01 17:54:49.000000000 +0800 Birth: - \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的 inode 号以及用户数据块（见 \u003ca href=\"#p2\"\u003e图 2.\u003c/a\u003e）。因此软链接的创建与使用没有类似硬链接的诸多限制： * 软链接有自己的文件属性及权限等； * 可对不存在的文件或目录创建软链接； * 软链接可交叉文件系统； * 软链接可对文件或目录创建； * 创建软链接时，链接计数 i_nlink 不会增加； * 删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。 \u003ch4 id=\"p2\"\u003e 图 2. 软链接的访问 \u003c/h4\u003e ![](http://120.24.251.209/content/images/2016/03/image002.jpg) \u003ch4 id='list7'\u003e 清单 7. 软链接特性展示 \u003c/h4\u003e ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#stat--mntlostfound"},{"categories":["Linux"],"content":" ls -litotal 0 // 可对不存在的文件创建软链接 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#ls--li"},{"categories":["Linux"],"content":" ln -s old.file soft.link","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#ln--s-oldfile-softlink"},{"categories":["Linux"],"content":" ls -liFtotal 0 789467 lrwxrwxrwx 1 root root 8 Sep 1 18:00 soft.link -\u003e old.file // 由于被指向的文件不存在，此时的软链接 soft.link 就是死链接 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#ls--lif"},{"categories":["Linux"],"content":" cat soft.linkcat: soft.link: No such file or directory // 创建被指向的文件 old.file，soft.link 恢复成正常的软链接 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#cat-softlink"},{"categories":["Linux"],"content":" echo “This is an original file_A” » old.file","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#echo-this-is-an-original-file_a--oldfile"},{"categories":["Linux"],"content":" cat soft.linkThis is an original file_A // 对不存在的目录创建软链接 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#cat-softlink-1"},{"categories":["Linux"],"content":" ln -s old.dir soft.link.dir","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#ln--s-olddir-softlinkdir"},{"categories":["Linux"],"content":" mkdir -p old.dir/test","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#mkdir--p-olddirtest"},{"categories":["Linux"],"content":" tree . -F –inodes. ├── [ 789497] old.dir/ │ └── [ 789498] test/ ├── [ 789495] old.file ├── [ 789495] soft.link -\u003e old.file └── [ 789497] soft.link.dir -\u003e old.dir/ \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;当然软链接的用户数据也可以是另一个软链接的路径，其解析过程是递归的。但需注意：软链接创建时原文件的路径指向使用绝对路径较好。使用相对路径创建的软链接被移动后该软链接文件将成为一个死链接（如下所示的软链接 a 使用了相对路径，因此不宜被移动），因为链接数据块中记录的亦是相对路径指向。 $ ls -li total 2136 656627 lrwxrwxrwx 1 harris harris 8 Sep 1 14:37 a -\u003e data.txt 656662 lrwxrwxrwx 1 harris harris 1 Sep 1 14:37 b -\u003e a 656228 -rw——- 1 harris harris 2186738 Sep 1 14:37 data.txt 6 ### 链接相关的命令 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;在 Linux 中查看当前系统已挂着的文件系统类型，除上述使用的命令 df，还可使用命令 mount 或查看文件 /proc/mounts。 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#tree---f---inodes"},{"categories":["Linux"],"content":" mount/dev/sda7 on / type ext4 (rw,errors=remount-ro) proc on /proc type proc (rw,noexec,nosuid,nodev) sysfs on /sys type sysfs (rw,noexec,nosuid,nodev) … … none on /run/shm type tmpfs (rw,nosuid,nodev) \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;命令 ls 或 stat 可帮助我们区分软链接与其他文件并查看文件 inode 号，但较好的方式还是使用 find 命令，其不仅可查找某文件的软链接，还可以用于查找相同 inode 的所有硬链接。（见 \u003ca href=\"#list8\"\u003e清单 8.\u003c/a\u003e） \u003ch4 id='list8'\u003e 清单 8. 使用命令 find 查找软链接与硬链接 \u003c/h4\u003e // 查找在路径 /home 下的文件 data.txt 的软链接 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#mount"},{"categories":["Linux"],"content":" find /home -lname data.txt/home/harris/debug/test2/a // 查看路径 /home 有相同 inode 的所有硬链接 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#find-home--lname-datatxt"},{"categories":["Linux"],"content":" find /home -samefile /home/harris/debug/test3/old.file/home/harris/debug/test3/hard.link /home/harris/debug/test3/old.file ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#find-home--samefile-homeharrisdebugtest3oldfile"},{"categories":["Linux"],"content":" find /home -inum 660650/home/harris/debug/test3/hard.link /home/harris/debug/test3/old.file // 列出路径 /home/harris/debug/ 下的所有软链接文件 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#find-home--inum-660650"},{"categories":["Linux"],"content":" find /home/harris/debug/ -type l -ls656662 0 lrwxrwxrwx 1 harris harris 1 Sep 1 14:37 /home/harris/debug/test2/b -\u003e a 656627 0 lrwxrwxrwx 1 harris harris 8 Sep 1 14:37 /home/harris/debug/test2/a -\u003e data.txt 789467 0 lrwxrwxrwx 1 root root 8 Sep 1 18:00 /home/harris/debug/test/soft.link -\u003e old.file 789496 0 lrwxrwxrwx 1 root root 7 Sep 1 18:01 /home/harris/debug/test/soft.link.dir -\u003e old.dir \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;系统根据磁盘的大小默认设定了 inode 的值（见\u003ca href=\"#list9\"\u003e清单 9.\u003c/a\u003e），如若必要，可在格式文件系统前对该值进行修改。如键入命令 mkfs -t ext4 -I 512/dev/sda4，将使磁盘设备 /dev/sda4 格式成 inode 大小是 512 字节的 ext4 文件系统。 \u003ch4 id='list9'\u003e 清单 9. 查看系统的 inode 值 \u003c/h4\u003e // 查看磁盘分区 /dev/sda7 上的 inode 值 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#find-homeharrisdebug--type-l--ls"},{"categories":["Linux"],"content":" dumpe2fs -h /dev/sda7 | grep “Inode size”dumpe2fs 1.42 (29-Nov-2011) Inode size: 256 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#dumpe2fs--h-devsda7--grep-inode-size"},{"categories":["Linux"],"content":" tune2fs -l /dev/sda7 | grep “Inode size”Inode size: 256 ### Linux VFS \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Linux 有着极其丰富的文件系统，大体上可分如下几类： 1. 网络文件系统，如 nfs、cifs 等； 2. 磁盘文件系统，如 ext4、ext3 等； 3. 特殊文件系统，如 proc、sysfs、ramfs、tmpfs 等。 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;实现以上这些文件系统并在 Linux 下共存的基础就是 Linux VFS（Virtual File System 又称 Virtual Filesystem Switch），即虚拟文件系统。VFS 作为一个通用的文件系统，抽象了文件系统的四个基本概念：文件、目录项 (dentry)、索引节点 (inode) 及挂载点，其在内核中为用户空间层的文件系统提供了相关的接口（见 \u003ca href=\"#p3\"\u003e图 3.\u003c/a\u003e所示 VFS 在 Linux 系统的架构）。VFS 实现了 open()、read() 等系统调并使得 cp 等用户空间程序可跨文件系统。VFS 真正实现了上述内容中：在 Linux 中除进程之外一切皆是文件。 \u003ch4 id='p3'\u003e 图 3. VFS 在系统中的架构 \u003c/h4\u003e ![](http://120.24.251.209/content/images/2016/03/image003.jpg) \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Linux VFS 存在四个基本对象：超级块对象 (superblock object)、索引节点对象 (inode object)、目录项对象 (dentry object) 及文件对象 (file object)。超级块对象代表一个已安装的文件系统；索引节点对象代表一个文件；目录项对象代表一个目录项，如设备文件 event5 在路径 /dev/input/event5 中，其存在四个目录项对象：/ 、dev/ 、input/ 及 event5。文件对象代表由进程打开的文件。这四个对象与进程及磁盘文件间的关系如\u003ca href=\"#p4\"\u003e图 4.\u003c/a\u003e 所示，其中 d_inode 即为硬链接。为文件路径的快速解析，Linux VFS 设计了目录项缓存（Directory Entry Cache，即 dcache）。 \u003ch4 id='p4'\u003e 图 4. VFS 的对象之间的处理 \u003c/h4\u003e ![](http://120.24.251.209/content/images/2016/03/image004.jpg) ### Linux 文件系统中的 inode \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;在 Linux 中，索引节点结构存在于系统内存及磁盘，其可区分成 VFS inode 与实际文件系统的 inode。VFS inode 作为实际文件系统中 inode 的抽象，定义了结构体 inode 与其相关的操作 inode_operations（见内核源码 include/linux/fs.h）。 \u003ch4 id='list10'\u003e 清单 10. VFS 中的 inode 与 inode_operations 结构体 \u003c/h4\u003e struct inode { … const struct inode_operations *i_op; // 索引节点操作 unsigned long i_ino; // 索引节点号 atomic_t i_count; // 引用计数器 unsigned int i_nlink; // 硬链接数目 … } struct inode_operations { … int (*create) (struct inode *,struct dentry *,int, struct nameidata *); int (*link) (struct dentry *,struct inode *,struct dentry *); int (*unlink) (struct inode *,struct dentry *); int (*symlink) (struct inode *,struct dentry *,const char *); int (*mkdir) (struct inode *,struct dentry *,int); int (*rmdir) (struct inode *,struct dentry *); … } \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;如\u003ca href=\"#list10\"\u003e清单 10.\u003c/a\u003e 所见，每个文件存在两个计数器：i_count 与 i_nlink，即引用计数与硬链接计数。结构体 inode 中的 i_count 用于跟踪文件被访问的数量，而 i_nlink 则是上述使用 ls -l 等命令查看到的文件硬链接数。或者说 i_count 跟踪文件在内存中的情况，而 i_nlink 则是磁盘计数器。当文件被删除时，则 i_nlink 先被设置成 0。文件的这两个计数器使得 Linux 系统升级或程序更新变的容易。系统或程序可在不关闭的情况下（即文件 i_count 不为 0），将新文件以同样的文件名进行替换，新文件有自己的 inode 及 data block，旧文件会在相关进程关闭后被完整的删除。 \u003ch4 id='list11'\u003e 清单 11. 文件系统 ext4 中的 inode \u003c/h4\u003e struct ext4_inode { … __le32 i_atime; // 文件内容最后一次访问时间 __le32 i_ctime; // inode 修改时间 __le32 i_mtime; // 文件内容最后一次修改时间 __le16 i_links_count; // 硬链接计数 __le32 i_blocks_lo; // Block 计数 __le32 i_block[EXT4_N_BLOCKS]; // 指向具体的 block … }; \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003ca href=\"#list11\"\u003e清单 11.\u003c/a\u003e 展示的是文件系统 ext4 中对 inode 的定义（见内核源码 fs/ext4/ext4.h）。其中三个时间的定义可对应与命令 stat 中查看到三个时间。i_links_count 不仅用于文件的硬链接计数，也用于目录的子目录数跟踪（目录并不显示硬链接数，命令 ls -ld 查看到的是子目录数）。由于文件系统 ext3 对 i_links_count 有限制，其最大数为：32000（该限制在 ext4 中被取消）。尝试在 ext3 文件系统上验证目录子目录及普通文件硬链接最大数可见 \u003ca href=\"#list12\"\u003e清单 12.\u003c/a\u003e的错误信息。因此实际文件系统的 inode 之间及与 VFS inode 相较是有差异的。 \u003ch4 id='list12'\u003e 清单 12. 文件系统 ext3 中 i_links_count 的限制 \u003c/h4\u003e ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#tune2fs--l-devsda7--grep-inode-size"},{"categories":["Linux"],"content":" ./dirtest.shmkdir: cannot create directory `dir_31999’: Too many links ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#dirtestsh"},{"categories":["Linux"],"content":" ./linkcount.shln: failed to create hard link to `old.file’: Too many links ### 结束语 \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;本文最初描述了 Linux 系统中文件与目录被引入的原因及 Linux 处理文件的方式，然后我们通过区分硬链接与软链接的不同，了解 Linux 中的索引节点的相关知识，并以此引出了 inode 的结构体。索引节点结构体存在在于 Linux VFS 以及实际文件系统中，VFS 作为通用文件模型是 Linux 中“一切皆是文件”实现的基础。文章并未深入 Linux VFS，也没涉及实际文件系统的实现，文章只是从 inode 了解 Linux 的文件系统的相关内容。若想深入文件系统的内容，查看内核文档 Documentation/filesystems/ 是一个不错的方式。 ","date":"2016-03-18","objectID":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/:0:0","series":null,"tags":["Linux"],"title":"理解 Linux 的硬链接与软链接","uri":"https://samzong.me/%E7%90%86%E8%A7%A3-linux-%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/#linkcountsh"},{"categories":null,"content":"大概是多久了，没有在看完一本书之后写写读后感了；看书就行吃面包，饿的时候觉得特别美味，吃饱了也就炮诸脑后。 今年一直都挺忙碌地，正好伴着腿伤在家里休息半个月，于是，一股脑地把《龙族》三部曲看完了，这是一部很好的书，我喜欢，很多人可能会觉得这是一个讲神秘、冒险、还有魔幻的小说，这里面有很多牛逼的任务，牛逼到打个喷嚏就能在太平洋引起一场海啸；可是，在我看来，这是一个看起来有点悲伤的故事。 有个叫路明非的Loser主角，他身边有很多牛逼的朋友，可是这些都和他没有关系，没有理想，没有原则，没有底线，好像这个世界硬一点，他就缩一点，懦弱、犹豫、像个傻逼，虽然整本书的人都在帮他，可是这不是他想要的，刚开始看的时候，一直想主角什么时候牛逼起来啊，作者怎么不按套路出牌啊，后来，我开始不想让他牛逼，他要是一直懦弱下去该多好啊，这样，看着像真实地我们，这样，至少可以好好活下去；是啊，作为一个力挽狂澜的弑龙者多牛逼啊，像所有牛逼的角色，可这都是拿命换来的啊，“人是自私的生物，但是却愿意有那么一瞬间为了很少的人放弃一切甚至生命。”说的多好，听的人是那么的心疼；人的一生中总归有几个人是我们的逆鳞，我们希望她好胜过自己好，我们希望把所有一切都给她甚至生命，可是，那又怎样，那又怎样呢? 另一个我很喜欢的人物，上杉越，一个隐世的牛逼老头子，在龙王复苏，整个东京城都要毁灭的时候，他选择了怯懦的逃离，很没骨气啊，可谁明白他呢，他是一个没有逆鳞的人了，活着只有自己，的确，我们都喜欢孤胆英雄式的角色，我们也渴望能够扮演这个角色，但是拯救世界这个事儿对我们来说太他妈难了，所以我们只能自私地保护自己重要的人；可是，最后一刻，老头留下来了，因为这里有他的逆鳞了，这很好，符合我们的价值观。 最终，这一切都是一个梦，最起码是在路明非的世界，甚至路明非本身就是一个梦，一个提线木偶，一个，孤独又带点悲伤的角色，让人心疼。虽然这个小说也有瑕疵，就好像我不太喜欢第二部，但是不会妨碍我对这个小说的赞赏。 所以，江南，我喜欢这个作者。 ","date":"2016-03-07","objectID":"https://samzong.me/%E9%BE%99%E6%97%8F%E8%B7%AF%E6%98%8E%E9%9D%9E/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"龙族路明非","uri":"https://samzong.me/%E9%BE%99%E6%97%8F%E8%B7%AF%E6%98%8E%E9%9D%9E/#"},{"categories":null,"content":"在@知乎上看到一段话： 我感觉到25岁过后，大多数人都不会纠结于，没有跟喜欢的人过一生，人长大了就会体谅命运的多种可能性，你喜欢她，她不一定喜欢你，你们互相喜欢，不一定合适，你们情投意合有匹配度满分，也可能因为随机产生的变数失散。 到了一个应该“醒过来”的岁数，还能执着于“我那么喜欢ta为什么不是ta陪着我过下辈子”的，估计都是人生赢家们，没怎么吃过闷亏，还妄想跟命运说道理。 大多数人都是可以认的，但“认了”的同时，我们还会心存一点侥幸，张敬轩唱过的，“祈求旧人万岁，旧情万岁，别随便老去”。 我今天要讲的不是一个爱情的故事。 我今年25岁，褪去青涩的旧衣，却又茫然被生活拉扯不知所措，我最近看了很多关于25岁该做什么？如何做5年规划？如何改变不甘于现状却又不思进取的状态？人这一辈子，到底是想方设法用尽一切精力赚钱，还是一切随缘安稳度日？好像我的25岁突然来了，所以昨日看来的未来事都硬生生地堆在眼前，你没准备好，我也没有，所以我们疲于奔波像条狗，所以我他妈好累。 25岁好像是人生状态最多的时候，有仍在读书，有刚开始工作，有已工作多年的，有已婚，有未婚，有孩子成群，有好多好多的角色，不同于你的角色；身边总有人在催你做很多事，要赶紧谈恋爱，要赶紧结婚，要赶紧事业有成，要赶紧挣钱，很多很多的钱，可是很多人甚至包括你自己都忘记了自己想要做什么，被迫机械庸碌生存，然后消失茫茫人海不见回首，我想说的我们都知道自己该做什么，尽管很多时间我们被前路妖魔鬼怪打的遍体鳞伤昏天暗地奄奄一息，我们忘了自己是谁，想往后退，不停的后退，蜷缩在昏暗地角落，不想被别人任何人打搅，我们受够足够多的伤害，爱情生活或其他，我们认识的生活的种种不美好，我们躺在昨日伤痕中自哀自怜，开始向生活做出妥协，但是前路上所有的荆棘不会少，只会随着时间的推移更加茂盛，扎人更疼，这些我们都知道，但我有能怎样，懦弱又怎样，我他妈就是个废材。 可是少年啊，昔日你们可是屠龙的勇者啊，千军万马一只独木桥，每个人都是剑指群雄，屹立华山之巅，眼神清亮无暇，棱角分明，一身热血滚滚发烫的少年啊，每个人都是不爱荣华爱红颜，纵是红颜易老，伊人已逝，亦要战苍穹下幽冥，心中有火，头顶有光，杀尽天下，寻伊归来。 是啊，我们都喜欢齐天大圣，成为向他一样的英雄，想成为大话西游中那个身披金甲圣衣，脚踏五彩祥云的猴子，逆转时空五百年寻得我们的紫霞仙子，我们喜欢的热血沸腾，却又目光温柔如水，心里隐隐想起曾经的紫霞仙子，暗暗叹息，呢喃着我猜到了开始，却没猜到结局。大话西游再映时，去影院看到这段时，在暗影搓搓里多少少年儿女唏嘘不已泪眼婆娑，不为别的，只为我们的青春和早已寻不到的那个不可能的那个人。 所以，矫情个什么鬼啊，神经病啊，你他妈已经是一个大人了，别再为了一点感情问题就跟丢了魂而似的，你可以有一段糟糕的爱情和随之一段放纵自己自怜自哀的时期，但是你不能放纵自己过一个烂透的人生；如果，她不是对的人，我不是你想要的那个人，就赶紧麻利地让丫从你脑子里滚蛋，太累，感动不了自己，还想去感动谁。 数数年头，我已经工作5年时间了，工作都换了3个，5年前我没想过现在的自己会是怎么样，也预料不到自己会在哪里，如果重新选择，我应该还是会选择成为现在的自己；的确很多时候，我们都会迷茫，大多数人都是这样，你跟我说，不知道我是不是适合做现在的工作，如果转行，却又不知道想要做什么什么。其实人这一生啊，多数自己想要的和自己想做的不是一件事，就好像你很难碰到你爱ta2也爱你的人，说出来的确会很难受。王小波在《黄金时代》曾写到：“那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样”。少年们总是幻想有一天仗剑走天涯，看一看世界的繁华，可总有一天，他起床发现手里没有剑，哪里也去不了，生活就像一个泥坑，想拔出脚，却动弹不得。那时有的人索性坐下痛哭，有的人抬头看到了星辰。你我都在泥坑，只是有人看到了星辰。 无论怎样，血不能凉。 所以，努力和生活更好的相处，不需要纠结如何去规划，就努力地去生活，如果感受到生命中特别重要的东西，要拼尽所有力气去抓住，不要怀疑自己现在做的对不对，我也不知道如何告诉你该怎样处理这样的状态，我所能告诉你的就是爱自己，遵从内心的选择，然后努力去做，一直努力下去。在我们的人生肯定会遇到迷雾沼泽和望不到顶的大山，可是我们穷尽一生也无法穿越翻越，无法看到峰顶景色以及山的那边的一切，这的确是一件想想就很难过的事情，并且这一切无法逃避，听起来是那么地令人绝望，但是，亲爱的，我们总要去面对，或是大步向前，冲向那未知地泥泞沼泽或满是荆棘望不到顶的大山，要打败可以吃掉我们的大老虎或不知道是什么的怪物，一次又一次，我们会经常失败，摔倒，伤痕累累，可是我们总要爬起来啊，一次又一次，每次都像是用尽整个生命的力量，就算最后我们真的跌倒爬不起来了，也许我们最后真的无法凝聚一丝力量，那至少，我们明白我是真的做不到，而不是不去选择，而不是说从一开始就放弃，至少我们努力让自己变更好，这不是为了哪个人或谁而是为了你自己。 最后，希望你抬起头，看到星辰， 和我。 ","date":"2016-01-15","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E8%87%AA%E5%B7%B1/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"何余生说要感谢身边所有美好的人","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E8%87%AA%E5%B7%B1/#"},{"categories":null,"content":"在我的理解和认知能力范围内，极简不仅仅是从生活物品上，更重要的思想和情感上做，人才不会那么累，而我自以为，人生在世这一路上，莫不是在追寻心灵的满足，但是，不如意者常七八，可与言者无二三；所以人生绝大多数时间是孤独的，是时间不充足的，所以尽可能做让自己开心的事情，去喜欢让你怦然心动的姑娘；听一个朋友说：一定是特别的缘分，才可以一路走来变成一家人。香香公主变回了原来的名字，难过么？当然难过，但是这没必要去纠结谁，也没什么好纠结的了啊，放弃了么，当然不会啊！毕竟暗暗喜欢那么久的人，如果可以轻易放弃，当初的意义在哪里呢，其实还是喜欢啊，尽管姑娘不喜欢你，但是那又怎样呢？为热爱的人或是事物洒下热血和热泪，最坏的结果无非就是对方一句“你想怎样”。所以啊，又是新的一天，阳光明媚的，嗯，那就好好工作咯。嘿嘿，我这个心机boy！ 写作的理由有很多种，牛逼的人为了挣钱养家，有追求的人为了曾经的梦想理想，我也有自己的理由：写给自己看，因为我如果靠这个挣钱养家早就饿死了，并且至到如今也没有对写作有追求；为了自己的喜欢而写。初三以前，上海读书，班干部，整日间器宇轩昂，更是无暇去写这些东西；初三转学回老家，我总是在转学，初恋小姑娘仍然留在上海读书，那时没有手机，联系就这么断了；大概是小狗的爱情发作了，突然想写东西，写文章写诗，上课写，上什么课都写，下课写；也疯狂的读书，省下一顿中饭便可以在街心公园的书店买上一本书，所以身份证上的我最帅了，真的是饿瘦了啊；所以看了很多书，韩寒郭敬明沧月饶雪漫等等等整个80后作家青春文学群体基本全扫了一遍，当然还有杂七杂八的杂志传记，我喜欢翻犄角旮旯，甚至翻出老板深藏的“时尚杂志”，付钱时老板一脸行家啊的神色此生难忘，果不其然当晚就破了修炼多年的童子功；初中毕业，大多数同学收获了一本本几同学纪念册，我收获了别人眼中怪癖的性格和满满写着中饭的几摞书。中考结束，回校，压抑一年的同学们得到释放近乎癫狂，六层教学楼里撒满了支离破碎的真题教材之类；后来有人在教室烧试卷，我的同桌，也算是上海回来唯一的朋友说：把你的试卷拿来烧了，可是我试卷都扔完了，没东西烧，鬼使神差的就把写的几本诗和文章拿出来烧，完事儿就后悔了，但是烧了又能怎样呢，这大概是我为极简主义做出来的第一个贡献吧，也养成了我删文章的习惯。时间辗转，玩QQ的时候用空间写，玩微博的时候写微博，写了删删了写，以至于现在什么都不剩下，但是也算可以吧，回首往事时啥也没有就懒得回首了，人还是要向前看的好，所以在羡慕那些拥有很多回忆的人时，也享受自己潇洒的状态；曾经一个朋友带我参观她的储藏，如数家珍的列出每一件物品和专属的人和故事，羡慕的眼泪都要掉下来了，回想这么多年，我剩下的也只羊一摞摞书了，但是看过的书大多都忘了，所以我什么都不剩下来；有时候觉得自己特别像故事里的小猴子，捡起一个丢下一个，最后什么都没有，小猴子每一个都非常喜欢啊，但最后的舍弃了，我好像懂了什么道理，但又像什么都没懂，这个故事现在看不懂。最后，我想说的是：关于情感的极简我不赞同，我们要做的是内心情感奔涌如潮的人，好的坏的，这些都是你的，做个有故事的人，才会有人给你故事。 关于。我写过很多“关于”的故事，关于工作、关于理想、关于吃饭穿衣、关于我爱的姑娘不爱我啊，关于… ，但是，多数最后都是说先搁着，以后再慢慢写，其实我自己也不知道什么时候会拿出来写，或者根本就忘记了；兴之所至，自然就喷薄着写的欲望。人懒了，不去写也正常。 关于读书。读书，写书评，之前经常做这种事情，读书的时候可谓博览青春文学丛书，不知多少个日日夜夜沉溺其中而感伤感动不已，进而期待自己的爱情；工作几年至今，更多是偏爱纪实历史类的书籍还有不少作者的随笔散文，我是看书特投入的人，经常被感动流泪，如今亦是，早些年间看明晓溪《泡沫之夏》哭了，看饶雪漫《离开》哭了，看读者小文哭了，后来看余华《活着》哭了，看路遥《平凡的世界》和《人生》更是哭的稀里糊涂，当然也会笑；人只要能被伤害或感动就是好的。我看的很感动，但是书评就是写不好，分享给朋友的时候多数都看不上眼，所以后来自己写了也不敢给别人看。 关于听歌，我是一个挺臭屁的人，曾经说过：不要问我为什么这么会装B，因为我听歌只听宋冬野；后来当我喜欢上逼哥，好妹妹，赵雷，我再也不敢这么说话了。当然我听歌喜欢听民谣，朋友说你不懂民谣，民谣一定要到小地方听到得才算好的，我这只能算城市民谣，所以，我听歌喜欢听城市民谣，生活在水泥钢筋的城市里有着一颗不安定的心；另一个朋友说，他不喜欢民谣，因为民谣里的爱情做爱都买不起避孕套，容易出事儿，我觉得他说的很对，总结的很地道，但是我没有女朋友，随着时间的推移，人在变老变丑，有女朋友的几率会更小，用不到避孕套；所以，我听歌喜欢听做爱买不起避孕套的城市民谣。 关于鬼畜，这个是我的最爱毋庸置疑，三个时间段会一直爱下去，就像爱姑娘一样，我爱她们青葱的小手和大白的奶子，我也爱鬼畜的污污污，爱丞相和王朗，爱天朝第一歌姬，爱天朝第一英文歌姬，爱女孩为什么穿短裙。世间恐怕没多少比这个更好地事情了，因为真的很开心，没心没肺的开心，我喜欢听，哎呦，不错哦，好像周杰伦翻唱过这首龙卷基。Link 关于我，我是一个小人物，有着平凡的喜怒哀乐，出身平凡之家没什么好谈的，家人身体安康、和睦相处已是万分幸福了。我不喜欢有些人把自己的惰性归咎于出身，诚然，你没法让自己做到最好，但是最起码你要努力让自己变得更好；我永远相信，当面包掉在地上奶酪一定是朝上的。莱蒙托夫有首诗《一只船》这样写：一只船孤独地航行在海上，它既不寻求幸福，也不逃避幸福，它只是向前航行，底下是沉静碧蓝的大海，而头顶是金色的太阳。我努力工作，努力过好自己的人生，不盲目自大，不自暴自弃，我可能究其一生也不达到我想要的生活，甚至绝大情况会比我想象的要糟糕，但是我会努力去做好自己的，做自己想做的在每一天，挥洒青春，尽量犯错。关于爱情和姑娘话题，永远都说不完啊，我喜欢美好的姑娘，但是我不是见一个喜欢一个，我会在很长的一段时间里喜欢一个人，尽管多数是不会有结果。我喜欢的姑娘，我希望我可以像太阳一样，给你温暖，橡树一样成为你的依靠，你应该怀疑，你也可以拒绝，但是我也会像太阳一样周而复始，像树一样扎根于此，你要知道树一旦落地生根，再拔起来可是要命的事情了。 晚安，这个世界和我和你和他们。 ","date":"2015-11-17","objectID":"https://samzong.me/%E6%9E%81%E7%AE%80%E4%B8%BB%E4%B9%89/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"极简主义","uri":"https://samzong.me/%E6%9E%81%E7%AE%80%E4%B8%BB%E4%B9%89/#"},{"categories":null,"content":"自家酿造的葡萄酒味道真的不错，喝过一大杯的我这样说的，你们应该去试试。是的我试图这样可以让自己早点睡下，我是这样做的，效果还是有点，至少，伴着微醺的思维，情感在释放；酒是一个令人着迷的味道，就好喝醉之后，所有的胡言乱语都会被原谅，谁会跟一个喝醉的人较劲，谁会在意一个喝醉的人说的话，who care。 是夜，当你的周遭变得安静，内心的你便开始躁动不安，妄图支配你的灵魂，黑夜中另一个目光灼灼生辉，是的，沉默的夜色，让人的思维感性满负荷，到夜晚，每个人都是满腹豪情的大诗人，博古通今的大学者，柔肠寸断的伤心人，在天桥，在屋顶，在夜排档，在酒吧，在灯光闪耀你却尽量走在黑暗的马路上，不尽相同的人却都在夜里，这些情绪才会如月降临到每个人的心里，眼里，只被你看到。 我一直想办法克制自己的负面情绪，每个人心中都会有一道疤，生长在内心深处，在任何黑暗之处浮现，奶奶的离去，那是我人生之中最大的灾难，她是我的信仰啊，我始终无法忘却那慈祥的目光；我不信鬼神，但是那一刻我匍匐在地向上苍期待，止不住的泪水在流淌，世上若有鬼魂，能否再让我看她一眼；我一直坚信着心朝阳光，要无比勇敢，是啊，怎可以怯懦，让生命如此不被珍惜，我真的好想你，现在我想奶奶从未离去，她将永远活在我的心里，我将永远缅怀哪些美好时光。 生活是不易的，生命亦是无常，每当我想放弃的时候，就会想是不是再坚持一会，或许就能成功，于爱情，我一直在想是不是多走一步就能离你更近一些，这些年，我停不下来，我退步，我往前，可以我永远无法摆脱你，也无法靠近你，我热切的爱恋，我伤心的远走他乡，我努力，我放弃，可是，我始终无法琢磨你的心思；不敢放弃，我害怕多年之后听到你说，如果当时你能在坚持一点的话，我会受不了的，所以，我才一直不敢放弃，我一直在坚持是不是再往前走一步就能触摸到你，爱情都是自私的，我热切的爱恋着你，也希望可以被你爱恋，可是我无论怎样却永远无法靠近你，我是不是走错了方向，或许，我并不为你所爱，或是并不值得，这些我都明白，我不怕被拒绝，我只是无法琢磨你的想法。诚然，现在去谈论爱情为时尚早，爱情本来就是一种奢侈品，或终其一生都不能拥有，很早，我就知道，你是我的命数，永远绕不过你，我无法对内心的情感置若罔闻，到现在，已经无所谓结局，我都会是你一辈的的朋友，就像习惯喜欢你，就像每天打开电脑都会看下你的状态，就像当年的大男孩，喜欢傻笑，就这么看着你，不说话，一直傻笑，我不喜欢离你忽近忽远，我不愿辗转不知所措，我希望你可以明明白白的告诉我，我不愿逼迫你，也不允许你因为感动而接受我，任何不理性不成熟的对我的回答，都是莫大的伤害，我一直的信念都是希望你幸福，像一个魔咒束缚着我，或者我或是他，我不知道你何时能看到这篇文章，大多数情况你永远看不到，我只要你答应我，遵从内心的感觉，不爱一个人是不会因为时间而改变，在你准备好的时候，给我一个答案。 晚安，奶奶，晚安，我沉痛的思念； 晚安，初恋，晚安，我爱恋的姑娘； 晚安，于我人生道路上如此重要的两个人。 补档感言： 当年太年轻，热血又傻逼。 ","date":"2015-07-18","objectID":"https://samzong.me/%E6%97%A0%E9%A2%98/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"无题","uri":"https://samzong.me/%E6%97%A0%E9%A2%98/#"},{"categories":null,"content":"民谣是生，摇滚是死，而我在其中穿梭，生不如死。 我来到这个世界23年，吃过屎，也吃过佳肴，我吹的牛像我，我装的b也像我，但是都不成功遭了雷劈，恍惚觉得，我不应该来到这个世界，这个世界也不是我以为的世界。 我喜欢写诗，就像嗜酒者渴望所有醇香的美酒和女人的奶，我喝过，有酒味；我说：这个是社会会写诗的人不多了，会写诗的又写的比我好的又少了，写的比我好还比我会装逼的那就更少了；我又说：这世界上诗比我写的好比我会装逼，还让我敬佩的人，顾城算一个，海子也算一个，但是他们都死了，所以，我很寂寞。 我喜欢女人，喜欢她们的青葱小手和大白奶子，但是，我更喜欢她们的回眸一笑，沧海沉浮而芳亭傲立，我想我要左手提剑，右手抱着我的女人，对她说：等我前去披荆斩棘，杀得前路朗朗清清，脚踏七彩祥云，带着一身荣光，我就回来娶你，等我。 于是，我心中有火，头上有光，杀佛杀魔，傲立在华山绝巅。我从不把仇人放在眼里，因为，我说我的眼里只有你。但是，这次我的敌人耍懒，他们不用剑用刀，三个人来向我寻仇，我费尽力气杀胜了他们，却跌落山谷。被一个少年救起，我说：少年，给我口水喝吧，少年递过水囊，却把剑插进了我的胸膛，我说为什么？少年说：你是坏人，那为什么救我？我母亲让我来救你，说完，拔出剑，眼神冷漠，像极少年的我。 然后，我死了，我的女人等不了我，我死在无名的臭水沟，身体和灵魂一起腐烂。 ","date":"2015-06-04","objectID":"https://samzong.me/%E6%B0%91%E8%B0%A3%E6%98%AF%E7%94%9F/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"民谣是生","uri":"https://samzong.me/%E6%B0%91%E8%B0%A3%E6%98%AF%E7%94%9F/#"},{"categories":null,"content":"生活的节奏在慢慢恢复正常，像是经历了一道鬼门关，感谢将我带出来的人。 湄公河行动，最近很火的一部电影，前两天，我也去看了；关于炫技，关于剧情，关于赞扬，已经有很多人在说了，所以我想谈的是“你的归属感来自于哪里”以及“方新武杀人事件”。 湄公河行动，我更愿称之为“湄公河事件”，这是一个真实的事件，所以踏入影院的我是带着复杂情绪的，我不喜欢谈政治，熟悉我的朋友应该会有所了解，因为我不懂政治，我不研究这些，我不能仅凭自己的感觉来判断当权者执政者的好坏，这个社会的稳定需要有太多因素；我所要做的是自己想要做的事，但是，不谈政治，我想说说关于“你的归属感来自于哪里”，这是一个很简单的问题，你有一所房子，房子里有你的父母、爱人和子女，无论你在外多少艰苦劳累，到了家看着你爱的人，你所有的苦累都消失殆尽，燃烧熊熊热火，为了他们去奋斗，这就是你的归属感，对于一个人、一个家庭是这样，对于一个国家，要让自己的国民有归属感，像我这样的市井小民，当“湄公河事件”发生，所有人的焦点都在这件事，正如电影中说到：“要给死去的13位船员一个公道，要给全国人民一个公道”；电影就像一个情绪放大器，艺术的手段让每一个情绪都被放大，开心会更开心，伤心会更伤心，愤怒也能更愤怒，所以我喜欢看电影和看书听音乐，写书音乐也是艺术的形式，鲍勃迪伦都拿了诺贝尔文学奖；所以在电影情节上国家的态度如此坚决，果敢，令我几度热泪盈眶，燃起对这个国家的希望和热爱，就如某个姑娘说的“我爱中华”，这就是归属感，让我觉得作为一个中国人而无比自豪，无论我将来漂泊何方，那个地方始终如灯塔照亮我的生命，前进和归途的路，所以，我爱你，中国。 方新武杀人事件，相对于高刚，方新武更像是一个孤胆英雄是的人物，这个人物角色也应该是电影中才有的人物，女友因吸毒自杀，凶手潜逃，带着满身的伤远走他乡，伪装不同的角色，逃避着内心的伤痕和过去，将一生献给缉毒事业，他是一个抱着必死之志的人，这样的人最可怕也最可怜，所以当再次遇到占蓬的时候，方新武一直就决定杀他了，其实他在十年前就已经做了这个决定，所以最后在方新武追占蓬时，他把手枪换成了真枪，他一定是要杀了占蓬的了，这是一个复仇式的结尾，他已经无所畏惧了，所以啊，这样的人最可怕也最可怜，可怕是他不怕生死，可怜的是他的人生已经被毁了，除了复仇别无他事，可是我喜欢这样的人物，我不是伪君子，我是真小人，所有时间可以让人放心的话都是屁话，无论时间走过多久，伤害你的人和事永远存在，这就像一个鬼门关啊，现在的结局就是方新武最好的解决了，导演已经给了我们了；如果他没死，那么今后就是另外一个故事了。 我们都喜欢英雄式的人物，因为英雄是有仇必报，不论错与对，这符合我们的价值观。 ","date":"2015-04-12","objectID":"https://samzong.me/%E8%BF%99%E6%98%AF%E4%B8%80%E9%81%93%E9%AC%BC%E9%97%A8%E5%85%B3/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"这是一道鬼门关","uri":"https://samzong.me/%E8%BF%99%E6%98%AF%E4%B8%80%E9%81%93%E9%AC%BC%E9%97%A8%E5%85%B3/#"},{"categories":null,"content":" 旅途，我一直觉着是个挺感性的词儿，喜欢在路上的状态，长途喜欢火车，短途喜欢公交，每个人都挤在狭小的空间，亲密而陌生，这个时候无事可做，玩手机、听歌，看书，或者看着窗外的风景。人在快速移动的状态下，更容易内心平静下来，我喜欢这种状态，难得能有机会停下来思考，生活一直在不停地不停地催促着你，像个烦人的小精灵，于是，每个人都在紧促的节奏中长大，多数是忙碌，多数做的事无甚意义，多数悲伤的情绪还没来得及释放就又陷入尘土飞扬的生活中；于是，我们开始怀念从前，开始在旅途之中，开始在昼夜之初，多愁善感，深思熟虑；所以，我第二喜欢夜晚一人宁静，第三喜欢旅途路上，第一呢，与喜欢的人在一起。 我是一个话多的人，也是个喜欢听故事的人，路上时间久了，便忍不住与身边的人搭讪；有一次，路上遇到一对年轻男女，与我年龄相若，男生第一次到女方家里，一路谈及二人感情，神采奕奕，羡煞他人；有一次与一位外出寻友的大叔，大叔慷慨与我分享所携特产，又一斤白酒，二人畅饮畅谈，第一次出门去上海，如今年岁已过半百，子女皆成家立业，静极思动，念及多年未见的好友，人生便当如此，足矣；前几日，清明时节，回家扫墓，归途，对面而坐，一对夫妻，大叔年纪轻轻便以离家闯荡江湖，妻子一生相随，其中温情动人自不用言语，膝下两女一儿也已成家；如今，在家务农，平凡快乐，一路大叔慷慨激昂与我讲述走南闯北的故事，阿姨始终静静凝望不语，大叔一直问阿姨要不我站起来你躺会，阿姨一直说我不累，却在我和大叔攀谈时倚在座位上睡着了，而后，大叔起身说去抽根烟，但却久久未归；爱情便当如此，平凡夫妻，爱从不用口来说。 我们一生追寻为何，多数情况自身也不能辨别，或是一生荣光，杀退各路豪杰；或是平淡无奇，一生尽是柴米油盐；或是万花丛中而过，爱尽世间女子；或者从一而终，生死相依；但都是对的，都是好的，只要是我们想要的，但不应伤害他人，这是原则！生活多是苦难，磨砺众生；吃腻山珍海味的人渴望农家小菜，久经沧桑的羡慕新手的初生牛犊的拼劲，经历过爱情的人害怕什么呢？害怕再经历爱情；过往的回忆就像一个躲在黑暗里的蛇，总是在你伤口发热时再咬上一口，其实它没毒，但是肯定会疼，勇敢的你，终会杀了蛇，只要你足够勇敢；当你准备接受爱情的时候，就要接受爱情带来的苦涩，焦虑和怅然若失的情绪，就像你打算接受一个人，就要学会接受他的前面后面上面下面，但是你都要学会接受，要么你还没准备好开始一段爱情和爱上一个人。我一直在想我的姑娘，必定是美好的，因为是我喜欢的，是完人，是仙女，是温柔的月光，是清晨初露的霞光，是令人心动的春色，是呼啸着穿堂而过的清风，是踩着红色高跟鞋踢踏踢踏走进我的胸膛，而我则是历经岁月沧桑依然伴随她左右的踏实臂膀，只要我足够勇敢，我真的足够勇敢了。 20岁之前我看郭敬明的书很多，真的对我的人生有很大的影响，十分感谢；辍学工作之后，无心向学，不读书，生活更是糟糕，再拾起，亦无当年之感；如今，我开始看韩寒和王路的书，觉得他们的文字很酷，可以够我装逼来用，但是我的内心很正，热情好学，积极向上；其实，如今高度发展的商业模式，的确会让很多人的价值观有失颇比，有一些人投机取巧只为赚钱不顾影响，直观体现就是很多挂作家之名写出乌七八糟的东西反而畅销，快餐式的心灵鸡汤盛行，进而影响更多读者，所以需要筛选文章，但不是否定任何书，文学不应有贵贱之分，区分在读者，读适合自己的书即可；生活如此，对的是自己，其他则毋庸顾虑，凡事需顾虑的，便对自己无甚意义，弃之亦不可惜。 最后套用韩寒的话结尾： *为热爱的人或事物洒下热血和热泪，最坏的结果无非就是对方一句“你想怎样”。* ","date":"2015-04-03","objectID":"https://samzong.me/%E8%B7%AF%E9%80%94%E4%B8%8A/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"路途上","uri":"https://samzong.me/%E8%B7%AF%E9%80%94%E4%B8%8A/#"},{"categories":null,"content":"之前一直我以为自己是在纠结到底哪里适合写IT学习的博文，新浪、网易亦或腾讯，折腾了许久，其实自己明白，不是在哪里写的问题，根本在于自己能否坚持下来，我本身是一个不怎么能耐下来性子的人，学习Linux、C还要考学历，总是做做这个，做做那个，没能认真研究，所以这么久时间还是停留在一个“初学者”的位置。 2014年，这一年是一开始就让我悲痛到无以复加的一年，陷入迷茫让我不知道自己未来的路怎么走，能走多久，可是，我也清清楚楚地明白，我要努力改变，人生充满了太多的不可思议以及你无能为力的悲剧，今年已经过了近四个月份了，一直没能好好整理自己的心情，太沉溺过去的人是个弱者，人生会有很多我们无能为力的事，这让我们心生沮丧，可是不敢逃离还是面对，事情都已经发生在了过去，某一个时间点，是一个想起来都会让自己泪眼婆娑的时间点，我失去了一个生命中最最重要的人，往事只能回忆，也许到我将离去的时候，我才能够坦然面对人生旅途中走着走着就消失的人，我怀念，无时不刻。 谈恋爱，是我这个年纪最容易被提及的问题，我一直排斥去谈恋爱，很多人不明白为什么会是这样；其实，是因为害怕失去，所以不敢拥有，有过一段失败的经历，让我不敢再次尝试，因为我没有把握，也没有勇气，小心翼翼；我总是夸夸其谈着别人的经历，却对自己不敢触及，我所说的努力让自己变得更好，才配得上爱我的人，只是害怕因为自己不够好，致使爱我的人离我而去，不是不相信另一半，是不相信自己，这个现实到令人发指的社会，我不能自私的以为爱情可以战胜一切，这种人也许别人会感到可怜，但最终会被人鄙夷，好姑娘都应该有一个好的归宿，在我没有能力肩负起爱情的责任时，抱歉，我不能说“爱”。其实，我缺少的，钱只是一小部分，更多的是缺少的是一颗勇敢的心，不够成熟的自己，当我不能够做好自己时，如何能够不负责任地肆意冲进别人的生活，伤害了别人，也羞辱了自己。 生理年龄不代表心里年龄，明白自己想做什么，就应该努力去做，尽管我这么大了，这里也是一个开始，命运之轮是不可琢磨的，任何事在该发生的时候就会发生，早一点，晚一点，都是悲剧，如果我错过了一个深爱的姑娘，那么对不起，我想是我的修炼不够；生活在别处，我在这里，安静地学习，成长，成熟，对现实的忍耐，对未来的憧憬，不惊奇也不平淡，命运之轮不会偏移一丝一毫，我想做的只是让自己蜕变，尽量去做我想做的自己。 近期一直在看《德川家康》，还没看完，深刻感受到，在大势中人的渺小与乏力，如果想要成为你想要成为的人，那么首先，你要学会忍耐，坚持，是一个足以让人发疯的忍耐，一定要坚持，不然所有的努力都是笑话，在成为你想成为的人之前，需要舍弃很多东西，你必须足够理智，你必须谨小慎微，不然所有的努力还是成为笑话；但是，哪怕你所有的事儿都做了，你也只是有可能成功，毕竟，命运这事儿，谁有说的准呢？ ","date":"2014-03-27","objectID":"https://samzong.me/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%80%E4%B8%8D%E4%BC%9A%E5%86%99%E6%A0%87%E9%A2%98%E7%9A%84%E4%BA%BA/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"我是一个最不会写标题的人","uri":"https://samzong.me/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%80%E4%B8%8D%E4%BC%9A%E5%86%99%E6%A0%87%E9%A2%98%E7%9A%84%E4%BA%BA/#"},{"categories":null,"content":" 两年前的文字，生涩，那是一段很长时间不读书的日子，初中时期遇到它，或是少人陪的时候它出现在我的生命中，年少不知愁滋味，为赋新词强说愁，寂寞的时候翻起这本书，内心便能平静下来，无怨言地面对堆积如山的习题挑灯夜战，是那个时候最话少，是那个时候最沉默，是那个时候最自信，有点孤傲，眼神灼灼生辉，那是人生最安静如歌的时光，那是多年一直怀念的时候，我一直想再回到那种状态，我以为拥有同样的这本书便能回到那段时光，同一版，同样的封面，同一个位置，写下了同样的话，可那段时间却不再回来；那段时间，那样懵懂的思念一个人，没有手机，没有QQ，只是在无数思念的时候一遍又一遍写下她的名字，写下我的思念，都慢慢汇成一首首诗，那个时候的木泽，那个时候的流云复苏，还有一直留着的无宇枫，整整两年的时间，写满了三大本的诗和文章，字里行间流淌着你的名字，拿起来都会问到油墨的清香，我闻到那个人微笑的眼睛，我想要问为什么在哪之后人生还一直喜欢你，我想是我人生最安静的那段时光，如歌的青春，把所有的思念都给你了，把你的名字雕刻在我的生命里，怪只怪你那时微笑太美。 我想多年后，我也会翻起这段文字，我也会怀念那时生涩的文笔，怀念那个眼神灼灼生辉的少年，怀念那个微笑太美的你，或许我会为你写一首歌吧，把你写进去，把最好的我也写进去，写阳光璀璨如歌的你，写每个夜晚眼神明亮的我，对了，还有那个皎洁的月光，你说你最喜欢它了，谢谢那段时光它为我向你送去思念，歌名都想好了，就叫：青春是一道明媚的忧伤。Hey 姑娘，如果我不能爱你，那就让我把他铺成曲，在你的婚礼上，用永远走调的歌声唱给你听，或许我会流泪，但那时你一定要微笑，哪些眼泪一辈子只会有一次，都是给你的祝福，如果我爱你，我愿意用一生为你歌唱，待到头发花白牙齿掉光，我们一起再回头看看阳光中盛开的你的我的青春，执子之手，与子偕老。 补档感言：最终我没铺成曲，也没去参加你的婚礼，童话毕竟是童话，继续觉得自己傻逼。 ","date":"2012-07-30","objectID":"https://samzong.me/%E7%88%B1%E4%B8%8E%E7%97%9B%E7%9A%84%E8%BE%B9%E7%BC%98/:0:0","series":null,"tags":["我给你讲个故事吧"],"title":"爱与痛的边缘","uri":"https://samzong.me/%E7%88%B1%E4%B8%8E%E7%97%9B%E7%9A%84%E8%BE%B9%E7%BC%98/#"},{"categories":null,"content":" 1. title: 闭关备战 11月 toc: true author: samzong.lu author_id: defaultAuthorId language: zh abbrlink: 13757 tags: [] categories: [] date: 2022-07-18 00:35:00","date":"0001-01-01","objectID":"https://samzong.me/%E9%97%AD%E5%85%B3%E5%A4%87%E6%88%98-11%E6%9C%88/:1:0","series":null,"tags":null,"title":"","uri":"https://samzong.me/%E9%97%AD%E5%85%B3%E5%A4%87%E6%88%98-11%E6%9C%88/#date-2022-07-18-003500"},{"categories":null,"content":" 2. 目标获得软考中级证书，完成落户条件准备。 下一次考试时间是 11 月份， 开始闭关。 ","date":"0001-01-01","objectID":"https://samzong.me/%E9%97%AD%E5%85%B3%E5%A4%87%E6%88%98-11%E6%9C%88/:2:0","series":null,"tags":null,"title":"","uri":"https://samzong.me/%E9%97%AD%E5%85%B3%E5%A4%87%E6%88%98-11%E6%9C%88/#目标"},{"categories":["Linux","CentOS"],"content":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 0.0.1 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 0.0.2 安装推荐选择bind-chroot来安装，提高服务的安全性： ➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动： ➜ ~ systemctl enable named-chroot.service Created symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service. ➜ ~ systemctl start named-chroot.service ➜ ~ netstat -ntlp | grep 53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/named tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 0.0.3 配置首先备份DNS服务端的主配置文件，然后修改其中的内容： ➜ ~ cp /etc/named.conf /etc/named.conf.bak ➜ ~ vim /etc/named.conf options { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\"; }; logging { channel default_debug { file \"data/named.run\"; severity dynamic; }; }; zone \".\" IN { type hint; file \"named.ca\"; }; // 新增一个samzong.local域名. zone \"samzong.local\" IN { type master; file \"samzong.local.zone\"; }; include \"/etc/named.rfc1912.zones\"; include \"/etc/named.root.key\"; 0.0.4 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件： ➜ ~ cd /var/named ➜ named touch samzong.local.zone; 然后编辑文件内容新增： $TTL 86400 @ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL ) NS @ A 10.0.2.6 www A 192.168.16.100 a IN CNAME www.baidu.com. b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效： ➜ named systemctl restart named-chroot.service 0.0.5 客户端验证 ➜ named nslookup www.samzong.local Server: 192.168.16.6 Address: 192.168.16.6#53 Name: www.samzong.local Address: 192.168.16.100 0.0.6 使用rndc管理DNS解析记录rndc 常用指令： status 显示bind服务器的工作状态 reload 重新加载配置文件和区域文件 reload zone 重新加载指定的zone reconfig 重新读取配制间并加载新增的zone querylog 关闭或开启查询日志 dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置 freeze 暂停更新所有zone状态 ","date":"0001-01-01","objectID":"https://samzong.me/centos7_configure_bind_dns_server/:0:0","series":null,"tags":["CentOS"],"title":"CentOS 7 Configure DNS Server","uri":"https://samzong.me/centos7_configure_bind_dns_server/#"},{"categories":["Linux","CentOS"],"content":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 0.0.1 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 0.0.2 安装推荐选择bind-chroot来安装，提高服务的安全性： ➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动： ➜ ~ systemctl enable named-chroot.service Created symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service. ➜ ~ systemctl start named-chroot.service ➜ ~ netstat -ntlp | grep 53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/named tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 0.0.3 配置首先备份DNS服务端的主配置文件，然后修改其中的内容： ➜ ~ cp /etc/named.conf /etc/named.conf.bak ➜ ~ vim /etc/named.conf options { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\"; }; logging { channel default_debug { file \"data/named.run\"; severity dynamic; }; }; zone \".\" IN { type hint; file \"named.ca\"; }; // 新增一个samzong.local域名. zone \"samzong.local\" IN { type master; file \"samzong.local.zone\"; }; include \"/etc/named.rfc1912.zones\"; include \"/etc/named.root.key\"; 0.0.4 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件： ➜ ~ cd /var/named ➜ named touch samzong.local.zone; 然后编辑文件内容新增： $TTL 86400 @ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL ) NS @ A 10.0.2.6 www A 192.168.16.100 a IN CNAME www.baidu.com. b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效： ➜ named systemctl restart named-chroot.service 0.0.5 客户端验证 ➜ named nslookup www.samzong.local Server: 192.168.16.6 Address: 192.168.16.6#53 Name: www.samzong.local Address: 192.168.16.100 0.0.6 使用rndc管理DNS解析记录rndc 常用指令： status 显示bind服务器的工作状态 reload 重新加载配置文件和区域文件 reload zone 重新加载指定的zone reconfig 重新读取配制间并加载新增的zone querylog 关闭或开启查询日志 dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置 freeze 暂停更新所有zone状态 ","date":"0001-01-01","objectID":"https://samzong.me/centos7_configure_bind_dns_server/:0:0","series":null,"tags":["CentOS"],"title":"CentOS 7 Configure DNS Server","uri":"https://samzong.me/centos7_configure_bind_dns_server/#dns服务介绍"},{"categories":["Linux","CentOS"],"content":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 0.0.1 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 0.0.2 安装推荐选择bind-chroot来安装，提高服务的安全性： ➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动： ➜ ~ systemctl enable named-chroot.service Created symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service. ➜ ~ systemctl start named-chroot.service ➜ ~ netstat -ntlp | grep 53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/named tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 0.0.3 配置首先备份DNS服务端的主配置文件，然后修改其中的内容： ➜ ~ cp /etc/named.conf /etc/named.conf.bak ➜ ~ vim /etc/named.conf options { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\"; }; logging { channel default_debug { file \"data/named.run\"; severity dynamic; }; }; zone \".\" IN { type hint; file \"named.ca\"; }; // 新增一个samzong.local域名. zone \"samzong.local\" IN { type master; file \"samzong.local.zone\"; }; include \"/etc/named.rfc1912.zones\"; include \"/etc/named.root.key\"; 0.0.4 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件： ➜ ~ cd /var/named ➜ named touch samzong.local.zone; 然后编辑文件内容新增： $TTL 86400 @ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL ) NS @ A 10.0.2.6 www A 192.168.16.100 a IN CNAME www.baidu.com. b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效： ➜ named systemctl restart named-chroot.service 0.0.5 客户端验证 ➜ named nslookup www.samzong.local Server: 192.168.16.6 Address: 192.168.16.6#53 Name: www.samzong.local Address: 192.168.16.100 0.0.6 使用rndc管理DNS解析记录rndc 常用指令： status 显示bind服务器的工作状态 reload 重新加载配置文件和区域文件 reload zone 重新加载指定的zone reconfig 重新读取配制间并加载新增的zone querylog 关闭或开启查询日志 dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置 freeze 暂停更新所有zone状态 ","date":"0001-01-01","objectID":"https://samzong.me/centos7_configure_bind_dns_server/:0:0","series":null,"tags":["CentOS"],"title":"CentOS 7 Configure DNS Server","uri":"https://samzong.me/centos7_configure_bind_dns_server/#安装"},{"categories":["Linux","CentOS"],"content":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 0.0.1 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 0.0.2 安装推荐选择bind-chroot来安装，提高服务的安全性： ➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动： ➜ ~ systemctl enable named-chroot.service Created symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service. ➜ ~ systemctl start named-chroot.service ➜ ~ netstat -ntlp | grep 53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/named tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 0.0.3 配置首先备份DNS服务端的主配置文件，然后修改其中的内容： ➜ ~ cp /etc/named.conf /etc/named.conf.bak ➜ ~ vim /etc/named.conf options { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\"; }; logging { channel default_debug { file \"data/named.run\"; severity dynamic; }; }; zone \".\" IN { type hint; file \"named.ca\"; }; // 新增一个samzong.local域名. zone \"samzong.local\" IN { type master; file \"samzong.local.zone\"; }; include \"/etc/named.rfc1912.zones\"; include \"/etc/named.root.key\"; 0.0.4 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件： ➜ ~ cd /var/named ➜ named touch samzong.local.zone; 然后编辑文件内容新增： $TTL 86400 @ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL ) NS @ A 10.0.2.6 www A 192.168.16.100 a IN CNAME www.baidu.com. b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效： ➜ named systemctl restart named-chroot.service 0.0.5 客户端验证 ➜ named nslookup www.samzong.local Server: 192.168.16.6 Address: 192.168.16.6#53 Name: www.samzong.local Address: 192.168.16.100 0.0.6 使用rndc管理DNS解析记录rndc 常用指令： status 显示bind服务器的工作状态 reload 重新加载配置文件和区域文件 reload zone 重新加载指定的zone reconfig 重新读取配制间并加载新增的zone querylog 关闭或开启查询日志 dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置 freeze 暂停更新所有zone状态 ","date":"0001-01-01","objectID":"https://samzong.me/centos7_configure_bind_dns_server/:0:0","series":null,"tags":["CentOS"],"title":"CentOS 7 Configure DNS Server","uri":"https://samzong.me/centos7_configure_bind_dns_server/#配置"},{"categories":["Linux","CentOS"],"content":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 0.0.1 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 0.0.2 安装推荐选择bind-chroot来安装，提高服务的安全性： ➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动： ➜ ~ systemctl enable named-chroot.service Created symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service. ➜ ~ systemctl start named-chroot.service ➜ ~ netstat -ntlp | grep 53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/named tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 0.0.3 配置首先备份DNS服务端的主配置文件，然后修改其中的内容： ➜ ~ cp /etc/named.conf /etc/named.conf.bak ➜ ~ vim /etc/named.conf options { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\"; }; logging { channel default_debug { file \"data/named.run\"; severity dynamic; }; }; zone \".\" IN { type hint; file \"named.ca\"; }; // 新增一个samzong.local域名. zone \"samzong.local\" IN { type master; file \"samzong.local.zone\"; }; include \"/etc/named.rfc1912.zones\"; include \"/etc/named.root.key\"; 0.0.4 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件： ➜ ~ cd /var/named ➜ named touch samzong.local.zone; 然后编辑文件内容新增： $TTL 86400 @ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL ) NS @ A 10.0.2.6 www A 192.168.16.100 a IN CNAME www.baidu.com. b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效： ➜ named systemctl restart named-chroot.service 0.0.5 客户端验证 ➜ named nslookup www.samzong.local Server: 192.168.16.6 Address: 192.168.16.6#53 Name: www.samzong.local Address: 192.168.16.100 0.0.6 使用rndc管理DNS解析记录rndc 常用指令： status 显示bind服务器的工作状态 reload 重新加载配置文件和区域文件 reload zone 重新加载指定的zone reconfig 重新读取配制间并加载新增的zone querylog 关闭或开启查询日志 dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置 freeze 暂停更新所有zone状态 ","date":"0001-01-01","objectID":"https://samzong.me/centos7_configure_bind_dns_server/:0:0","series":null,"tags":["CentOS"],"title":"CentOS 7 Configure DNS Server","uri":"https://samzong.me/centos7_configure_bind_dns_server/#编辑samzonglocalzone配置文件"},{"categories":["Linux","CentOS"],"content":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 0.0.1 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 0.0.2 安装推荐选择bind-chroot来安装，提高服务的安全性： ➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动： ➜ ~ systemctl enable named-chroot.service Created symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service. ➜ ~ systemctl start named-chroot.service ➜ ~ netstat -ntlp | grep 53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/named tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 0.0.3 配置首先备份DNS服务端的主配置文件，然后修改其中的内容： ➜ ~ cp /etc/named.conf /etc/named.conf.bak ➜ ~ vim /etc/named.conf options { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\"; }; logging { channel default_debug { file \"data/named.run\"; severity dynamic; }; }; zone \".\" IN { type hint; file \"named.ca\"; }; // 新增一个samzong.local域名. zone \"samzong.local\" IN { type master; file \"samzong.local.zone\"; }; include \"/etc/named.rfc1912.zones\"; include \"/etc/named.root.key\"; 0.0.4 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件： ➜ ~ cd /var/named ➜ named touch samzong.local.zone; 然后编辑文件内容新增： $TTL 86400 @ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL ) NS @ A 10.0.2.6 www A 192.168.16.100 a IN CNAME www.baidu.com. b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效： ➜ named systemctl restart named-chroot.service 0.0.5 客户端验证 ➜ named nslookup www.samzong.local Server: 192.168.16.6 Address: 192.168.16.6#53 Name: www.samzong.local Address: 192.168.16.100 0.0.6 使用rndc管理DNS解析记录rndc 常用指令： status 显示bind服务器的工作状态 reload 重新加载配置文件和区域文件 reload zone 重新加载指定的zone reconfig 重新读取配制间并加载新增的zone querylog 关闭或开启查询日志 dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置 freeze 暂停更新所有zone状态 ","date":"0001-01-01","objectID":"https://samzong.me/centos7_configure_bind_dns_server/:0:0","series":null,"tags":["CentOS"],"title":"CentOS 7 Configure DNS Server","uri":"https://samzong.me/centos7_configure_bind_dns_server/#客户端验证"},{"categories":["Linux","CentOS"],"content":"今天介绍下如何在CentOS 7下部署DNS Server，测试环境中服务端搭建在了CentOS 7，客户端分别在Windows和Linux实现测试。 因为目的是让自建DNS服务器解析公司内部的自定义域名，所以当客户端需要访问外网域名时，DNS服务器会将解析请求转发给ISP的DNS服务器，并会将解析结果缓存，并且只对内网主机的解析请求进行转发，而不会对公网的主机解析请求进行转发。 0.0.1 DNS服务介绍DNS服务由BIND提供，启动后服务名为named，管理工具为rndc，debug工具为dig，主要配置文件在/etc/named.conf。 0.0.2 安装推荐选择bind-chroot来安装，提高服务的安全性： ➜ ~ yum install -y bind-chroot 安装完成之后，启动named-chroot服务，并设置为开机自启动： ➜ ~ systemctl enable named-chroot.service Created symlink from /etc/systemd/system/multi-user.target.wants/named-chroot.service to /usr/lib/systemd/system/named-chroot.service. ➜ ~ systemctl start named-chroot.service ➜ ~ netstat -ntlp | grep 53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 4515/named tcp 0 0 127.0.0.1:953 0.0.0.0:* LISTEN 4515/named 0.0.3 配置首先备份DNS服务端的主配置文件，然后修改其中的内容： ➜ ~ cp /etc/named.conf /etc/named.conf.bak ➜ ~ vim /etc/named.conf options { listen-on port 53 { any; }; listen-on-v6 port 53 { ::1; }; directory \"/var/named\"; dump-file \"/var/named/data/cache_dump.db\"; statistics-file \"/var/named/data/named_stats.txt\"; memstatistics-file \"/var/named/data/named_mem_stats.txt\"; allow-query { 192.168.16.0/24; 192.168.0.0/23; }; recursion yes; allow-recursion { 192.168.16.0/24; 192.168.0.0/23; }; forward first; forwarders { 202.96.209.133; 114.114.114.114; }; dnssec-enable no; dnssec-validation no; dnssec-lookaside no; bindkeys-file \"/etc/named.iscdlv.key\"; managed-keys-directory \"/var/named/dynamic\"; pid-file \"/run/named/named.pid\"; session-keyfile \"/run/named/session.key\"; }; logging { channel default_debug { file \"data/named.run\"; severity dynamic; }; }; zone \".\" IN { type hint; file \"named.ca\"; }; // 新增一个samzong.local域名. zone \"samzong.local\" IN { type master; file \"samzong.local.zone\"; }; include \"/etc/named.rfc1912.zones\"; include \"/etc/named.root.key\"; 0.0.4 编辑samzong.local.zone配置文件首先创建samzong.local.zone文件： ➜ ~ cd /var/named ➜ named touch samzong.local.zone; 然后编辑文件内容新增： $TTL 86400 @ IN SOA @ root.samzong.local. ( 2016042112 ;Serial 3600 ;Refresh 1800 ;Retry 604800 ;Expire 43200 ;Minimum TTL ) NS @ A 10.0.2.6 www A 192.168.16.100 a IN CNAME www.baidu.com. b A 192.168.16.101 编辑完成之后，重新启动named-chroot让服务生效： ➜ named systemctl restart named-chroot.service 0.0.5 客户端验证 ➜ named nslookup www.samzong.local Server: 192.168.16.6 Address: 192.168.16.6#53 Name: www.samzong.local Address: 192.168.16.100 0.0.6 使用rndc管理DNS解析记录rndc 常用指令： status 显示bind服务器的工作状态 reload 重新加载配置文件和区域文件 reload zone 重新加载指定的zone reconfig 重新读取配制间并加载新增的zone querylog 关闭或开启查询日志 dumpdb 将高速缓存转存到文件,named.conf 有指定文件位置 freeze 暂停更新所有zone状态 ","date":"0001-01-01","objectID":"https://samzong.me/centos7_configure_bind_dns_server/:0:0","series":null,"tags":["CentOS"],"title":"CentOS 7 Configure DNS Server","uri":"https://samzong.me/centos7_configure_bind_dns_server/#使用rndc管理dns解析记录"},{"categories":null,"content":"如果你本地也有代理服务比如：Clash、Surge 并已完成科学上网，这对访问 Github 起到一定的加速作用，但如果在终端使用，可以还需要一些额外配置，这里以 Clash 作为示例。 ","date":"0001-01-01","objectID":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/:0:0","series":null,"tags":["Git"],"title":"clone git@github.com 加速","uri":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/#"},{"categories":null,"content":" 1. 1. 加速你的浏览器默认情形下，你可能不需要做什么（在代理工作正常的情况下），浏览器的加速通过访问 Github 最为直接。 ","date":"0001-01-01","objectID":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/:1:0","series":null,"tags":["Git"],"title":"clone git@github.com 加速","uri":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/#1-加速你的浏览器"},{"categories":null,"content":" 2. 2. 加速你的终端 clone如果你需要在终端 clone 一个托管在 Github 的项目，默认情形下你可能会发现 终端内并未得到加速，还是一如既往的慢。 这是因为终端在默认情况下不会走代理，这里需要你进行一配置 这里使用 iTerm2 为例 ","date":"0001-01-01","objectID":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/:2:0","series":null,"tags":["Git"],"title":"clone git@github.com 加速","uri":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/#2-加速你的终端-clone"},{"categories":null,"content":" 2.1 2.1 获取你的代理终端配置 ","date":"0001-01-01","objectID":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/:2:1","series":null,"tags":["Git"],"title":"clone git@github.com 加速","uri":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/#21-获取你的代理终端配置"},{"categories":null,"content":" 2.2 2.2 使用 HTTPS 作为 clone 链接 这时将 2.1 剪切板获取的命名，放到终端中执行即可。 这样的方式适合拉取一个公开的仓库，或者对隐私仓库不使用 sshkey 进行代码的 pull\u0026push ","date":"0001-01-01","objectID":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/:2:2","series":null,"tags":["Git"],"title":"clone git@github.com 加速","uri":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/#22-使用-https-作为-clone-链接"},{"categories":null,"content":" 2.3 2.3 使用 git 作为 clone 的方式此时我们需要特殊处理下，给 git 配置上全局代理部分，这里配置下仅对 github.com 这个域名生效 # 注意将 https://127.0.0.1:7890 后缀端口替换为 git config --global http.https://github.com.proxy https://127.0.0.1:7890 git config --global https.https://github.com.proxy https://127.0.0.1:7890 clashx pro 默认情况下是 7890; 早期 ss 默认配置为 10086 ","date":"0001-01-01","objectID":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/:2:3","series":null,"tags":["Git"],"title":"clone git@github.com 加速","uri":"https://samzong.me/git%E7%BB%88%E7%AB%AFclone%E5%8A%A0%E9%80%9F/#23-使用-git-作为-clone-的方式"},{"categories":["Git"],"content":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。下图是比较常规的Git使用规范流程，这能适合绝大多数团队开发的需求，推荐你们也这样使用。 0.0.1 1. 分支管理 主分支Master：首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 开发分支Develop：主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 临时性分支 功能分支 : 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop，功能分支的名字，可以采用feature-*的形式命名。 预发布分支 : 指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试,预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 修补bug分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式 ​ 0.0.1.1 2. 新建分支Master分支不允许进行开发，所有的开发相关操作都必须基于develop分支. # 获取主分支最新代码 git chekcout master # 新建develop分支进行开发 git checkout -b develop 0.0.1.2 3. 提交分支分支修改后，使用commit提交修改。 # add 所有新增的文件 git add --all # 提交更新， 每次提交必须写增加的东西和修改内容，保证协同开发是其他看到代码就能知道你做了什么 gti commit -m \"first commit\" 0.0.1.3 4. 推送到远程仓库commit 之后，其实代码还在本地仓库，这时我们需要将本地版本与git远端仓库进行同步 # 推送到远程develop分支 git push origin develop 0.0.1.4 5. 合并分支当代码提交到远端develop分支后，应该让别人进行代码review和测试，确认无误后，合并到Master分支，完成开发。 ","date":"0001-01-01","objectID":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/:0:0","series":null,"tags":["Git"],"title":"Git 使用规范流程","uri":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/#"},{"categories":["Git"],"content":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。下图是比较常规的Git使用规范流程，这能适合绝大多数团队开发的需求，推荐你们也这样使用。 0.0.1 1. 分支管理 主分支Master：首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 开发分支Develop：主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 临时性分支 功能分支 : 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop，功能分支的名字，可以采用feature-*的形式命名。 预发布分支 : 指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试,预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 修补bug分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式 ​ 0.0.1.1 2. 新建分支Master分支不允许进行开发，所有的开发相关操作都必须基于develop分支. # 获取主分支最新代码 git chekcout master # 新建develop分支进行开发 git checkout -b develop 0.0.1.2 3. 提交分支分支修改后，使用commit提交修改。 # add 所有新增的文件 git add --all # 提交更新， 每次提交必须写增加的东西和修改内容，保证协同开发是其他看到代码就能知道你做了什么 gti commit -m \"first commit\" 0.0.1.3 4. 推送到远程仓库commit 之后，其实代码还在本地仓库，这时我们需要将本地版本与git远端仓库进行同步 # 推送到远程develop分支 git push origin develop 0.0.1.4 5. 合并分支当代码提交到远端develop分支后，应该让别人进行代码review和测试，确认无误后，合并到Master分支，完成开发。 ","date":"0001-01-01","objectID":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/:0:0","series":null,"tags":["Git"],"title":"Git 使用规范流程","uri":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/#1--分支管理"},{"categories":["Git"],"content":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。下图是比较常规的Git使用规范流程，这能适合绝大多数团队开发的需求，推荐你们也这样使用。 0.0.1 1. 分支管理 主分支Master：首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 开发分支Develop：主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 临时性分支 功能分支 : 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop，功能分支的名字，可以采用feature-*的形式命名。 预发布分支 : 指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试,预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 修补bug分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式 ​ 0.0.1.1 2. 新建分支Master分支不允许进行开发，所有的开发相关操作都必须基于develop分支. # 获取主分支最新代码 git chekcout master # 新建develop分支进行开发 git checkout -b develop 0.0.1.2 3. 提交分支分支修改后，使用commit提交修改。 # add 所有新增的文件 git add --all # 提交更新， 每次提交必须写增加的东西和修改内容，保证协同开发是其他看到代码就能知道你做了什么 gti commit -m \"first commit\" 0.0.1.3 4. 推送到远程仓库commit 之后，其实代码还在本地仓库，这时我们需要将本地版本与git远端仓库进行同步 # 推送到远程develop分支 git push origin develop 0.0.1.4 5. 合并分支当代码提交到远端develop分支后，应该让别人进行代码review和测试，确认无误后，合并到Master分支，完成开发。 ","date":"0001-01-01","objectID":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/:0:0","series":null,"tags":["Git"],"title":"Git 使用规范流程","uri":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/#2-新建分支"},{"categories":["Git"],"content":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。下图是比较常规的Git使用规范流程，这能适合绝大多数团队开发的需求，推荐你们也这样使用。 0.0.1 1. 分支管理 主分支Master：首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 开发分支Develop：主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 临时性分支 功能分支 : 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop，功能分支的名字，可以采用feature-*的形式命名。 预发布分支 : 指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试,预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 修补bug分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式 ​ 0.0.1.1 2. 新建分支Master分支不允许进行开发，所有的开发相关操作都必须基于develop分支. # 获取主分支最新代码 git chekcout master # 新建develop分支进行开发 git checkout -b develop 0.0.1.2 3. 提交分支分支修改后，使用commit提交修改。 # add 所有新增的文件 git add --all # 提交更新， 每次提交必须写增加的东西和修改内容，保证协同开发是其他看到代码就能知道你做了什么 gti commit -m \"first commit\" 0.0.1.3 4. 推送到远程仓库commit 之后，其实代码还在本地仓库，这时我们需要将本地版本与git远端仓库进行同步 # 推送到远程develop分支 git push origin develop 0.0.1.4 5. 合并分支当代码提交到远端develop分支后，应该让别人进行代码review和测试，确认无误后，合并到Master分支，完成开发。 ","date":"0001-01-01","objectID":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/:0:0","series":null,"tags":["Git"],"title":"Git 使用规范流程","uri":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/#3-提交分支"},{"categories":["Git"],"content":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。下图是比较常规的Git使用规范流程，这能适合绝大多数团队开发的需求，推荐你们也这样使用。 0.0.1 1. 分支管理 主分支Master：首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 开发分支Develop：主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 临时性分支 功能分支 : 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop，功能分支的名字，可以采用feature-*的形式命名。 预发布分支 : 指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试,预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 修补bug分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式 ​ 0.0.1.1 2. 新建分支Master分支不允许进行开发，所有的开发相关操作都必须基于develop分支. # 获取主分支最新代码 git chekcout master # 新建develop分支进行开发 git checkout -b develop 0.0.1.2 3. 提交分支分支修改后，使用commit提交修改。 # add 所有新增的文件 git add --all # 提交更新， 每次提交必须写增加的东西和修改内容，保证协同开发是其他看到代码就能知道你做了什么 gti commit -m \"first commit\" 0.0.1.3 4. 推送到远程仓库commit 之后，其实代码还在本地仓库，这时我们需要将本地版本与git远端仓库进行同步 # 推送到远程develop分支 git push origin develop 0.0.1.4 5. 合并分支当代码提交到远端develop分支后，应该让别人进行代码review和测试，确认无误后，合并到Master分支，完成开发。 ","date":"0001-01-01","objectID":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/:0:0","series":null,"tags":["Git"],"title":"Git 使用规范流程","uri":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/#4-推送到远程仓库"},{"categories":["Git"],"content":"团队开发中，遵循一个合理、清晰的Git使用流程，是非常重要的。否则，每个人都提交一堆杂乱无章的commit，项目很快就会变得难以协调和维护。下图是比较常规的Git使用规范流程，这能适合绝大多数团队开发的需求，推荐你们也这样使用。 0.0.1 1. 分支管理 主分支Master：首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 开发分支Develop：主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 临时性分支 功能分支 : 为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop，功能分支的名字，可以采用feature-*的形式命名。 预发布分支 : 指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试,预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 修补bug分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式 ​ 0.0.1.1 2. 新建分支Master分支不允许进行开发，所有的开发相关操作都必须基于develop分支. # 获取主分支最新代码 git chekcout master # 新建develop分支进行开发 git checkout -b develop 0.0.1.2 3. 提交分支分支修改后，使用commit提交修改。 # add 所有新增的文件 git add --all # 提交更新， 每次提交必须写增加的东西和修改内容，保证协同开发是其他看到代码就能知道你做了什么 gti commit -m \"first commit\" 0.0.1.3 4. 推送到远程仓库commit 之后，其实代码还在本地仓库，这时我们需要将本地版本与git远端仓库进行同步 # 推送到远程develop分支 git push origin develop 0.0.1.4 5. 合并分支当代码提交到远端develop分支后，应该让别人进行代码review和测试，确认无误后，合并到Master分支，完成开发。 ","date":"0001-01-01","objectID":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/:0:0","series":null,"tags":["Git"],"title":"Git 使用规范流程","uri":"https://samzong.me/git-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/#5-合并分支"},{"categories":["数据库","MySQL"],"content":"CentOS 7.x 默认的MariaDB版本是5.5，但是在有些情况我们需要用到10版本，注意MariaDB与MySQL版本是不一样的，下面简单降下如何快速安装MariaDB10.1 到CentOS 7.x. 0.0.1 创建MariaDB 10.1的Yum源 cat \u003c\u003cEOF | sudo tee -a /etc/yum.repos.d/MariaDB.repo # MariaDB 10.1 CentOS repository list # http://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.1/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 EOF 注意MariaDB会随着时间的推移版本不断更新，你可以到repo仓库获取对应版本链接 0.0.2 使用Yum安装MariaDB 10.1 即可 sudo yum install MariaDB-server MariaDB-client -y 0.0.3 启动MariaDB并设置为开机自启动 sudo systemctl start mariadb.service sudo systemctl enable mariadb.service 0.0.4 初始化MariaDB设置 sudo /usr/bin/mysql_secure_installation # 回答以下问题，请记住你的数据库root用户密码: Enter current password for root (enter for none): 回车 Set root password? [Y/n]: Y New password: 你要设置的数据库root密码 Re-enter new password: 你要设置的数据库root密码 Remove anonymous users? [Y/n]: Y Disallow root login remotely? [Y/n]: Y Remove test database and access to it? [Y/n]: Y Reload privilege tables now? [Y/n]: Y ","date":"0001-01-01","objectID":"https://samzong.me/install_mariadb10_centos7/:0:0","series":null,"tags":["MySQL","CentOS"],"title":"How to install MariaDB 10.1 on CentOS 7.x","uri":"https://samzong.me/install_mariadb10_centos7/#"},{"categories":["数据库","MySQL"],"content":"CentOS 7.x 默认的MariaDB版本是5.5，但是在有些情况我们需要用到10版本，注意MariaDB与MySQL版本是不一样的，下面简单降下如何快速安装MariaDB10.1 到CentOS 7.x. 0.0.1 创建MariaDB 10.1的Yum源 cat \u003c","date":"0001-01-01","objectID":"https://samzong.me/install_mariadb10_centos7/:0:0","series":null,"tags":["MySQL","CentOS"],"title":"How to install MariaDB 10.1 on CentOS 7.x","uri":"https://samzong.me/install_mariadb10_centos7/#创建mariadb-101的yum源"},{"categories":["数据库","MySQL"],"content":"CentOS 7.x 默认的MariaDB版本是5.5，但是在有些情况我们需要用到10版本，注意MariaDB与MySQL版本是不一样的，下面简单降下如何快速安装MariaDB10.1 到CentOS 7.x. 0.0.1 创建MariaDB 10.1的Yum源 cat \u003c","date":"0001-01-01","objectID":"https://samzong.me/install_mariadb10_centos7/:0:0","series":null,"tags":["MySQL","CentOS"],"title":"How to install MariaDB 10.1 on CentOS 7.x","uri":"https://samzong.me/install_mariadb10_centos7/#使用yum安装mariadb-101-即可"},{"categories":["数据库","MySQL"],"content":"CentOS 7.x 默认的MariaDB版本是5.5，但是在有些情况我们需要用到10版本，注意MariaDB与MySQL版本是不一样的，下面简单降下如何快速安装MariaDB10.1 到CentOS 7.x. 0.0.1 创建MariaDB 10.1的Yum源 cat \u003c","date":"0001-01-01","objectID":"https://samzong.me/install_mariadb10_centos7/:0:0","series":null,"tags":["MySQL","CentOS"],"title":"How to install MariaDB 10.1 on CentOS 7.x","uri":"https://samzong.me/install_mariadb10_centos7/#启动mariadb并设置为开机自启动"},{"categories":["数据库","MySQL"],"content":"CentOS 7.x 默认的MariaDB版本是5.5，但是在有些情况我们需要用到10版本，注意MariaDB与MySQL版本是不一样的，下面简单降下如何快速安装MariaDB10.1 到CentOS 7.x. 0.0.1 创建MariaDB 10.1的Yum源 cat \u003c","date":"0001-01-01","objectID":"https://samzong.me/install_mariadb10_centos7/:0:0","series":null,"tags":["MySQL","CentOS"],"title":"How to install MariaDB 10.1 on CentOS 7.x","uri":"https://samzong.me/install_mariadb10_centos7/#初始化mariadb设置"},{"categories":["数据库","MySQL"],"content":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 0.0.1 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 0.0.2 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 mysql\u003e grant select on ghost.* to 'ghost_backuser'@'localhost' identified by 'backupPass'; Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 # 创建仅授权本地访问的用户 mysql\u003e create user dbackuser@'localhost'; # 创建授权所有来源地址的用户 mysql\u003e create user dbackuser@'%'; # 创建仅授权从特定IP的用户 mysql\u003e create user dbackuser@'192.168.0.230'; # 创建仅授权从特定IP段访问的用户 mysql\u003e create user dbackuser@'192.168.0.0/23'; # 创建仅授权从特定域名来访问的用户 mysql\u003e create user dbackuser@'samzong.me'; 好了，接下来我们测试对应用户是否有权限。 ➜ ~ mysql -u ghost_backuser -pbackupPass Warning: Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.6.35 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | ghost | +--------------------+ 2 rows in set (0.00 sec) mysql\u003e use ghost; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e select name from users; +------+ | name | +------+ | ALEX | +------+ 1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 ➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES ➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. ➜ ~ ls -lh total 780K -rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql ➜ ~ 0.0.3 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: ➜ ~ yum install -y mailx 测试发送邮件： ➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 0.0.4 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 ➜ ~ yum install vixie-cron ➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： ➜ ~ service crond start Starting crond: [ OK ] ➜ ~ chkconfig crond on crontab 基础命令： 语　法：crontab [-u \u003c用户名称\u003e][配置文件] 或 crontab [-u \u003c用户名称\u003e][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。 配置文件格式：Minute Hour Day Month DayOFWeek Command 参　数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u\u003c用户名称\u003e 指定要设定计时器的用户名称。 crontab 配置的基本格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： #每晚的21:30 重启apache 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * 23-7/1 * * * /usr","date":"0001-01-01","objectID":"https://samzong.me/howto-automatic-easybackup-mysqldb/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Automatic EasyBackup MysqlDB","uri":"https://samzong.me/howto-automatic-easybackup-mysqldb/#"},{"categories":["数据库","MySQL"],"content":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 0.0.1 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 0.0.2 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 mysql\u003e grant select on ghost.* to 'ghost_backuser'@'localhost' identified by 'backupPass'; Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 # 创建仅授权本地访问的用户 mysql\u003e create user dbackuser@'localhost'; # 创建授权所有来源地址的用户 mysql\u003e create user dbackuser@'%'; # 创建仅授权从特定IP的用户 mysql\u003e create user dbackuser@'192.168.0.230'; # 创建仅授权从特定IP段访问的用户 mysql\u003e create user dbackuser@'192.168.0.0/23'; # 创建仅授权从特定域名来访问的用户 mysql\u003e create user dbackuser@'samzong.me'; 好了，接下来我们测试对应用户是否有权限。 ➜ ~ mysql -u ghost_backuser -pbackupPass Warning: Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.6.35 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | ghost | +--------------------+ 2 rows in set (0.00 sec) mysql\u003e use ghost; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e select name from users; +------+ | name | +------+ | ALEX | +------+ 1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 ➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES ➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. ➜ ~ ls -lh total 780K -rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql ➜ ~ 0.0.3 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: ➜ ~ yum install -y mailx 测试发送邮件： ➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 0.0.4 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 ➜ ~ yum install vixie-cron ➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： ➜ ~ service crond start Starting crond: [ OK ] ➜ ~ chkconfig crond on crontab 基础命令： 语　法：crontab [-u \u003c用户名称\u003e][配置文件] 或 crontab [-u \u003c用户名称\u003e][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。 配置文件格式：Minute Hour Day Month DayOFWeek Command 参　数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u\u003c用户名称\u003e 指定要设定计时器的用户名称。 crontab 配置的基本格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： #每晚的21:30 重启apache 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * 23-7/1 * * * /usr","date":"0001-01-01","objectID":"https://samzong.me/howto-automatic-easybackup-mysqldb/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Automatic EasyBackup MysqlDB","uri":"https://samzong.me/howto-automatic-easybackup-mysqldb/#测试环境"},{"categories":["数据库","MySQL"],"content":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 0.0.1 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 0.0.2 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 mysql\u003e grant select on ghost.* to 'ghost_backuser'@'localhost' identified by 'backupPass'; Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 # 创建仅授权本地访问的用户 mysql\u003e create user dbackuser@'localhost'; # 创建授权所有来源地址的用户 mysql\u003e create user dbackuser@'%'; # 创建仅授权从特定IP的用户 mysql\u003e create user dbackuser@'192.168.0.230'; # 创建仅授权从特定IP段访问的用户 mysql\u003e create user dbackuser@'192.168.0.0/23'; # 创建仅授权从特定域名来访问的用户 mysql\u003e create user dbackuser@'samzong.me'; 好了，接下来我们测试对应用户是否有权限。 ➜ ~ mysql -u ghost_backuser -pbackupPass Warning: Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.6.35 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | ghost | +--------------------+ 2 rows in set (0.00 sec) mysql\u003e use ghost; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e select name from users; +------+ | name | +------+ | ALEX | +------+ 1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 ➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES ➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. ➜ ~ ls -lh total 780K -rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql ➜ ~ 0.0.3 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: ➜ ~ yum install -y mailx 测试发送邮件： ➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 0.0.4 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 ➜ ~ yum install vixie-cron ➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： ➜ ~ service crond start Starting crond: [ OK ] ➜ ~ chkconfig crond on crontab 基础命令： 语　法：crontab [-u \u003c用户名称\u003e][配置文件] 或 crontab [-u \u003c用户名称\u003e][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。 配置文件格式：Minute Hour Day Month DayOFWeek Command 参　数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u\u003c用户名称\u003e 指定要设定计时器的用户名称。 crontab 配置的基本格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： #每晚的21:30 重启apache 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * 23-7/1 * * * /usr","date":"0001-01-01","objectID":"https://samzong.me/howto-automatic-easybackup-mysqldb/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Automatic EasyBackup MysqlDB","uri":"https://samzong.me/howto-automatic-easybackup-mysqldb/#测试备份命令"},{"categories":["数据库","MySQL"],"content":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 0.0.1 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 0.0.2 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 mysql\u003e grant select on ghost.* to 'ghost_backuser'@'localhost' identified by 'backupPass'; Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 # 创建仅授权本地访问的用户 mysql\u003e create user dbackuser@'localhost'; # 创建授权所有来源地址的用户 mysql\u003e create user dbackuser@'%'; # 创建仅授权从特定IP的用户 mysql\u003e create user dbackuser@'192.168.0.230'; # 创建仅授权从特定IP段访问的用户 mysql\u003e create user dbackuser@'192.168.0.0/23'; # 创建仅授权从特定域名来访问的用户 mysql\u003e create user dbackuser@'samzong.me'; 好了，接下来我们测试对应用户是否有权限。 ➜ ~ mysql -u ghost_backuser -pbackupPass Warning: Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.6.35 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | ghost | +--------------------+ 2 rows in set (0.00 sec) mysql\u003e use ghost; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e select name from users; +------+ | name | +------+ | ALEX | +------+ 1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 ➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES ➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. ➜ ~ ls -lh total 780K -rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql ➜ ~ 0.0.3 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: ➜ ~ yum install -y mailx 测试发送邮件： ➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 0.0.4 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 ➜ ~ yum install vixie-cron ➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： ➜ ~ service crond start Starting crond: [ OK ] ➜ ~ chkconfig crond on crontab 基础命令： 语　法：crontab [-u \u003c用户名称\u003e][配置文件] 或 crontab [-u \u003c用户名称\u003e][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。 配置文件格式：Minute Hour Day Month DayOFWeek Command 参　数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u\u003c用户名称\u003e 指定要设定计时器的用户名称。 crontab 配置的基本格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： #每晚的21:30 重启apache 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * 23-7/1 * * * /usr","date":"0001-01-01","objectID":"https://samzong.me/howto-automatic-easybackup-mysqldb/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Automatic EasyBackup MysqlDB","uri":"https://samzong.me/howto-automatic-easybackup-mysqldb/#安装命令行邮件工具mailx"},{"categories":["数据库","MySQL"],"content":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 0.0.1 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 0.0.2 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 mysql\u003e grant select on ghost.* to 'ghost_backuser'@'localhost' identified by 'backupPass'; Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 # 创建仅授权本地访问的用户 mysql\u003e create user dbackuser@'localhost'; # 创建授权所有来源地址的用户 mysql\u003e create user dbackuser@'%'; # 创建仅授权从特定IP的用户 mysql\u003e create user dbackuser@'192.168.0.230'; # 创建仅授权从特定IP段访问的用户 mysql\u003e create user dbackuser@'192.168.0.0/23'; # 创建仅授权从特定域名来访问的用户 mysql\u003e create user dbackuser@'samzong.me'; 好了，接下来我们测试对应用户是否有权限。 ➜ ~ mysql -u ghost_backuser -pbackupPass Warning: Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.6.35 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | ghost | +--------------------+ 2 rows in set (0.00 sec) mysql\u003e use ghost; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e select name from users; +------+ | name | +------+ | ALEX | +------+ 1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 ➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES ➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. ➜ ~ ls -lh total 780K -rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql ➜ ~ 0.0.3 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: ➜ ~ yum install -y mailx 测试发送邮件： ➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 0.0.4 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 ➜ ~ yum install vixie-cron ➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： ➜ ~ service crond start Starting crond: [ OK ] ➜ ~ chkconfig crond on crontab 基础命令： 语　法：crontab [-u \u003c用户名称\u003e][配置文件] 或 crontab [-u \u003c用户名称\u003e][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。 配置文件格式：Minute Hour Day Month DayOFWeek Command 参　数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u\u003c用户名称\u003e 指定要设定计时器的用户名称。 crontab 配置的基本格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： #每晚的21:30 重启apache 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * 23-7/1 * * * /usr","date":"0001-01-01","objectID":"https://samzong.me/howto-automatic-easybackup-mysqldb/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Automatic EasyBackup MysqlDB","uri":"https://samzong.me/howto-automatic-easybackup-mysqldb/#安装计划任务工具crontab"},{"categories":["数据库","MySQL"],"content":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 0.0.1 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 0.0.2 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 mysql\u003e grant select on ghost.* to 'ghost_backuser'@'localhost' identified by 'backupPass'; Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 # 创建仅授权本地访问的用户 mysql\u003e create user dbackuser@'localhost'; # 创建授权所有来源地址的用户 mysql\u003e create user dbackuser@'%'; # 创建仅授权从特定IP的用户 mysql\u003e create user dbackuser@'192.168.0.230'; # 创建仅授权从特定IP段访问的用户 mysql\u003e create user dbackuser@'192.168.0.0/23'; # 创建仅授权从特定域名来访问的用户 mysql\u003e create user dbackuser@'samzong.me'; 好了，接下来我们测试对应用户是否有权限。 ➜ ~ mysql -u ghost_backuser -pbackupPass Warning: Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.6.35 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | ghost | +--------------------+ 2 rows in set (0.00 sec) mysql\u003e use ghost; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e select name from users; +------+ | name | +------+ | ALEX | +------+ 1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 ➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES ➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. ➜ ~ ls -lh total 780K -rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql ➜ ~ 0.0.3 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: ➜ ~ yum install -y mailx 测试发送邮件： ➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 0.0.4 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 ➜ ~ yum install vixie-cron ➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： ➜ ~ service crond start Starting crond: [ OK ] ➜ ~ chkconfig crond on crontab 基础命令： 语　法：crontab [-u \u003c用户名称\u003e][配置文件] 或 crontab [-u \u003c用户名称\u003e][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。 配置文件格式：Minute Hour Day Month DayOFWeek Command 参　数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u\u003c用户名称\u003e 指定要设定计时器的用户名称。 crontab 配置的基本格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： #每晚的21:30 重启apache 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * 23-7/1 * * * /usr","date":"0001-01-01","objectID":"https://samzong.me/howto-automatic-easybackup-mysqldb/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Automatic EasyBackup MysqlDB","uri":"https://samzong.me/howto-automatic-easybackup-mysqldb/#编写备份脚本"},{"categories":["数据库","MySQL"],"content":"mysql是一个免费、开源中一款非常优秀关系型数据库，在现在的互联网中使用的非常广泛，无论是大型IT项目还是个人开发者的小项目，mysql都能很好的协助人们处理数据库相关的工作，同时数据库对于我们来说是非常重要，所以经常备份数据库是一个基本的操作，这会为你或者你的团队，减少非常多不必要的麻烦。 mysqldump是一个简单而且非常流行的mysql全量备份方式，配合crontab添加自动备份任务，很好的完成了我们针对数据库备份的需求，下面我会通过一个例子来说明如何完成这项操作。 mysqldump是mysql自带的备份工具，所以只要你安装mysql应用包，就无需单独安装mysqldump 0.0.1 测试环境我搭建了一个Ghost博客环境，数据库采用是的Mysql，接下来我想在每天00:00执行数据库备份操作，并在备份完成之后，告诉我是否备份成功。 所以我们的步骤应该： 测试备份命令是否可以正常执行 安装测试命令行邮件工具mailx 安装计划任务工具Crontab 编写备份脚本 添加计划任务 0.0.2 测试备份命令首先你要获得你要备份的数据库对应的select权限，仅需要select权限即可，mysql在管理方面，应该坚持只赋予必须权限的原则。 mysql\u003e grant select on ghost.* to 'ghost_backuser'@'localhost' identified by 'backupPass'; Query OK, 0 rows affected (0.00 sec) 因为我只在本地执行备份操作，所以我只赋予了localhost的权限，你的权限应该要是执行备份工作的服务器主机信息。 # 创建仅授权本地访问的用户 mysql\u003e create user dbackuser@'localhost'; # 创建授权所有来源地址的用户 mysql\u003e create user dbackuser@'%'; # 创建仅授权从特定IP的用户 mysql\u003e create user dbackuser@'192.168.0.230'; # 创建仅授权从特定IP段访问的用户 mysql\u003e create user dbackuser@'192.168.0.0/23'; # 创建仅授权从特定域名来访问的用户 mysql\u003e create user dbackuser@'samzong.me'; 好了，接下来我们测试对应用户是否有权限。 ➜ ~ mysql -u ghost_backuser -pbackupPass Warning: Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.6.35 MySQL Community Server (GPL) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u003e show databases; +--------------------+ | Database | +--------------------+ | information_schema | | ghost | +--------------------+ 2 rows in set (0.00 sec) mysql\u003e use ghost; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u003e select name from users; +------+ | name | +------+ | ALEX | +------+ 1 row in set (0.00 sec) 测试mysqldump备份命令，注意mysqldump备份会锁表，但对于正在工作的数据库，锁表会影响到正常业务，所以我们可以使用–single-transaction参数，不锁表备份。 ➜ ~ mysqldump -u ghost_backuser -pbackupPass ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. mysqldump: Got error: 1044: Access denied for user 'ghost_backuser'@'localhost' to database 'ghost' when using LOCK TABLES ➜ ~ mysqldump -u ghost_backuser -pbackupPass --single-transaction ghost \u003e ghost.bak.sql Warning: Using a password on the command line interface can be insecure. ➜ ~ ls -lh total 780K -rw-r--r-- 1 root root 780K May 17 16:24 ghost.bak.sql ➜ ~ 0.0.3 安装命令行邮件工具mailx安装mailx 在CentOS/RehHat: ➜ ~ yum install -y mailx 测试发送邮件： ➜ ~ echo \"test\" | mail -s \"this a test email\" samzong.lu@gmail.com 0.0.4 安装计划任务工具Crontabcrontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中。通常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。 ➜ ~ yum install vixie-cron ➜ ~ yum install crontabs vixie-cron软件包是cron的主程序； crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。 启动crond并设置为开机自启动： ➜ ~ service crond start Starting crond: [ OK ] ➜ ~ chkconfig crond on crontab 基础命令： 语　法：crontab [-u \u003c用户名称\u003e][配置文件] 或 crontab [-u \u003c用户名称\u003e][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。 配置文件格式：Minute Hour Day Month DayOFWeek Command 参　数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u\u003c用户名称\u003e 指定要设定计时器的用户名称。 crontab 配置的基本格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab 的一些例子： #每晚的21:30 重启apache 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * 23-7/1 * * * /usr","date":"0001-01-01","objectID":"https://samzong.me/howto-automatic-easybackup-mysqldb/:0:0","series":null,"tags":["MySQL"],"title":"HowTo Automatic EasyBackup MysqlDB","uri":"https://samzong.me/howto-automatic-easybackup-mysqldb/#添加计划任务"},{"categories":["OpenSource","Redmine"],"content":" # base apt install mysql-server libmysqlclient-dev git-core subversion imagemagick libmagickwand-dev libcurl4-openssl-dev apt install build-essential mysql-server ruby ruby-dev libmysqlclient-dev imagemagick libmagickwand-dev # install mysql systemctl enable mysql.service systemctl start mysql.service create database redmine character set utf8; grant all privileges on redmine.* to redmine@'localhost' identified by 'redmine'; flush privileges; # Install ruby gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 curl -sSL https://get.rvm.io | bash -s stable source /etc/profile.d/rvm.sh rvm requirements rvm install 2.4.1 rvm use 2.4.1 --default # install passenger and nginx gem install passenger --no-ri --no-rdoc passenger-install-nginx-module # 1. auto install nginx. curl https://raw.githubusercontent.com/makevoid/nginx-passenger-ubuntu/master/nginx/nginx.service \u003e /lib/systemd/system/nginx.service systemctl daemon-reload systemctl enable nginx vim /opt/nginx/conf/nginx.conf # 注销 location / {} 的配置 server { listen 80; server_name [your_server_domain_name] # redmine.com; root /var/data/redmine/public; passenger_enabled on; client_max_body_size 10m; # Max attachemnt size } systemctl start nginx # install redmine mkdir /var/data cd /var/data svn co http://svn.redmine.org/redmine/branches/3.4-stable redmine cd /var/data/redmine cp -pR /var/data/redmine/config/database.yml.example /var/data/redmine/config/database.yml vim config/database.yml # set redmine db user and password # Install Plugins cd /var/data/redmine gem install bundler --no-ri --no-rdoc bundle install # configure redmine cd /var/data/redmine mkdir public/plugin_assets chown -R www-data:www-data files log tmp public/plugin_assets config.ru chmod -R 755 files log tmp public/plugin_assets # input database and base file. RAILS_ENV=production bundle exec rake db:migrate RAILS_ENV=production bundle exec rake redmine:load_default_data bundle exec rake generate_secret_token # restart nginx, install ok. systemctl restart nginx # restart redmine touch /var/data/redmine/tmp/restart.txt # configure email service vim /var/data/redmine/config/configuration.yml ","date":"0001-01-01","objectID":"https://samzong.me/install_redmine3.4_rbuy2.4.1_passenger_nginx_mysql_ubuntu16.04/:0:0","series":null,"tags":["Redmine"],"title":"Howto Install Redmine on Ubuntu 16.04","uri":"https://samzong.me/install_redmine3.4_rbuy2.4.1_passenger_nginx_mysql_ubuntu16.04/#"},{"categories":["Git","SourceTree"],"content":" 0.0.1 问题 因为国内的网络的原因，导致我们在首次打开SourceTree时需要验证Atlassian账号，但是Atlassian的注册页面使用requirejs是用了Google的CDN服务，所以无法正常通过验证，如果你有翻墙工具，那么这就没有问题，下面我要讲的方法是在不翻墙的情况下跳过初始化验证。 目前我解决的是在Windows平台上的问题，关于Mac平台，我稍后会更新到文档中。 0.0.2 解决思路我的想法是通过增加account信息，让SourceTree跳过验证；经过测试2.0.19及以下版本都支持，但是SourceTree在最新版本2.0.20时可能修订验证方式，所以导致我的这个方式不适用，大家可以在我的百度云盘共享中下载2.0.19，功能上并没发生多少变化。 链接: https://pan.baidu.com/s/1qYsHKWs 密码: wnc3 0.0.3 解决步骤 0.0.3.1 .NET 4.5.2SourceTree 依赖的.NET环境最低是4.5.2，当然在你安装的过程中，会提示你下载安装，你只需要确认即可，不过这样下载会比较慢，所以建议你使用Offline的形式安装，下面是微软官方下载地址： https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642 0.0.3.2 SourceTree安装过程中，默认一路“Next”即可，在安装完成之后，我们需要找到SourceTree在LocalAppData中的路径，请打开资源管理窗口，然后输入以下地址： %LocalAppData%\\Atlassian\\SourceTree\\ 如果路径不存在，创建目录即可 然后将之前百度云盘的文件accounts.json复制到这个位置，它的路径应该是： %LocalAppData%\\Atlassian\\SourceTree\\accounts.json 文件内容： [ { \"$id\": \"1\", \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\", \"Authenticate\": true, \"HostInstance\": { \"$id\": \"2\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\", \"Host\": { \"$id\": \"3\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\", \"Id\": \"atlassian account\" }, \"BaseUrl\": \"https://id.atlassian.com/\" }, \"Credentials\": { \"$id\": \"4\", \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\", \"Username\": \"\", \"Email\": null }, \"IsDefault\": false } ] 添加完成之后，启动SourceTree即可发现已经跳过了验证界面。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/:0:0","series":null,"tags":["SourceTree","Git"],"title":"HowTo Skip Atlassian Auth for SourceTree","uri":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/#"},{"categories":["Git","SourceTree"],"content":" 0.0.1 问题 因为国内的网络的原因，导致我们在首次打开SourceTree时需要验证Atlassian账号，但是Atlassian的注册页面使用requirejs是用了Google的CDN服务，所以无法正常通过验证，如果你有翻墙工具，那么这就没有问题，下面我要讲的方法是在不翻墙的情况下跳过初始化验证。 目前我解决的是在Windows平台上的问题，关于Mac平台，我稍后会更新到文档中。 0.0.2 解决思路我的想法是通过增加account信息，让SourceTree跳过验证；经过测试2.0.19及以下版本都支持，但是SourceTree在最新版本2.0.20时可能修订验证方式，所以导致我的这个方式不适用，大家可以在我的百度云盘共享中下载2.0.19，功能上并没发生多少变化。 链接: https://pan.baidu.com/s/1qYsHKWs 密码: wnc3 0.0.3 解决步骤 0.0.3.1 .NET 4.5.2SourceTree 依赖的.NET环境最低是4.5.2，当然在你安装的过程中，会提示你下载安装，你只需要确认即可，不过这样下载会比较慢，所以建议你使用Offline的形式安装，下面是微软官方下载地址： https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642 0.0.3.2 SourceTree安装过程中，默认一路“Next”即可，在安装完成之后，我们需要找到SourceTree在LocalAppData中的路径，请打开资源管理窗口，然后输入以下地址： %LocalAppData%\\Atlassian\\SourceTree\\ 如果路径不存在，创建目录即可 然后将之前百度云盘的文件accounts.json复制到这个位置，它的路径应该是： %LocalAppData%\\Atlassian\\SourceTree\\accounts.json 文件内容： [ { \"$id\": \"1\", \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\", \"Authenticate\": true, \"HostInstance\": { \"$id\": \"2\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\", \"Host\": { \"$id\": \"3\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\", \"Id\": \"atlassian account\" }, \"BaseUrl\": \"https://id.atlassian.com/\" }, \"Credentials\": { \"$id\": \"4\", \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\", \"Username\": \"\", \"Email\": null }, \"IsDefault\": false } ] 添加完成之后，启动SourceTree即可发现已经跳过了验证界面。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/:0:0","series":null,"tags":["SourceTree","Git"],"title":"HowTo Skip Atlassian Auth for SourceTree","uri":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/#问题"},{"categories":["Git","SourceTree"],"content":" 0.0.1 问题 因为国内的网络的原因，导致我们在首次打开SourceTree时需要验证Atlassian账号，但是Atlassian的注册页面使用requirejs是用了Google的CDN服务，所以无法正常通过验证，如果你有翻墙工具，那么这就没有问题，下面我要讲的方法是在不翻墙的情况下跳过初始化验证。 目前我解决的是在Windows平台上的问题，关于Mac平台，我稍后会更新到文档中。 0.0.2 解决思路我的想法是通过增加account信息，让SourceTree跳过验证；经过测试2.0.19及以下版本都支持，但是SourceTree在最新版本2.0.20时可能修订验证方式，所以导致我的这个方式不适用，大家可以在我的百度云盘共享中下载2.0.19，功能上并没发生多少变化。 链接: https://pan.baidu.com/s/1qYsHKWs 密码: wnc3 0.0.3 解决步骤 0.0.3.1 .NET 4.5.2SourceTree 依赖的.NET环境最低是4.5.2，当然在你安装的过程中，会提示你下载安装，你只需要确认即可，不过这样下载会比较慢，所以建议你使用Offline的形式安装，下面是微软官方下载地址： https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642 0.0.3.2 SourceTree安装过程中，默认一路“Next”即可，在安装完成之后，我们需要找到SourceTree在LocalAppData中的路径，请打开资源管理窗口，然后输入以下地址： %LocalAppData%\\Atlassian\\SourceTree\\ 如果路径不存在，创建目录即可 然后将之前百度云盘的文件accounts.json复制到这个位置，它的路径应该是： %LocalAppData%\\Atlassian\\SourceTree\\accounts.json 文件内容： [ { \"$id\": \"1\", \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\", \"Authenticate\": true, \"HostInstance\": { \"$id\": \"2\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\", \"Host\": { \"$id\": \"3\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\", \"Id\": \"atlassian account\" }, \"BaseUrl\": \"https://id.atlassian.com/\" }, \"Credentials\": { \"$id\": \"4\", \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\", \"Username\": \"\", \"Email\": null }, \"IsDefault\": false } ] 添加完成之后，启动SourceTree即可发现已经跳过了验证界面。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/:0:0","series":null,"tags":["SourceTree","Git"],"title":"HowTo Skip Atlassian Auth for SourceTree","uri":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/#解决思路"},{"categories":["Git","SourceTree"],"content":" 0.0.1 问题 因为国内的网络的原因，导致我们在首次打开SourceTree时需要验证Atlassian账号，但是Atlassian的注册页面使用requirejs是用了Google的CDN服务，所以无法正常通过验证，如果你有翻墙工具，那么这就没有问题，下面我要讲的方法是在不翻墙的情况下跳过初始化验证。 目前我解决的是在Windows平台上的问题，关于Mac平台，我稍后会更新到文档中。 0.0.2 解决思路我的想法是通过增加account信息，让SourceTree跳过验证；经过测试2.0.19及以下版本都支持，但是SourceTree在最新版本2.0.20时可能修订验证方式，所以导致我的这个方式不适用，大家可以在我的百度云盘共享中下载2.0.19，功能上并没发生多少变化。 链接: https://pan.baidu.com/s/1qYsHKWs 密码: wnc3 0.0.3 解决步骤 0.0.3.1 .NET 4.5.2SourceTree 依赖的.NET环境最低是4.5.2，当然在你安装的过程中，会提示你下载安装，你只需要确认即可，不过这样下载会比较慢，所以建议你使用Offline的形式安装，下面是微软官方下载地址： https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642 0.0.3.2 SourceTree安装过程中，默认一路“Next”即可，在安装完成之后，我们需要找到SourceTree在LocalAppData中的路径，请打开资源管理窗口，然后输入以下地址： %LocalAppData%\\Atlassian\\SourceTree\\ 如果路径不存在，创建目录即可 然后将之前百度云盘的文件accounts.json复制到这个位置，它的路径应该是： %LocalAppData%\\Atlassian\\SourceTree\\accounts.json 文件内容： [ { \"$id\": \"1\", \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\", \"Authenticate\": true, \"HostInstance\": { \"$id\": \"2\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\", \"Host\": { \"$id\": \"3\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\", \"Id\": \"atlassian account\" }, \"BaseUrl\": \"https://id.atlassian.com/\" }, \"Credentials\": { \"$id\": \"4\", \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\", \"Username\": \"\", \"Email\": null }, \"IsDefault\": false } ] 添加完成之后，启动SourceTree即可发现已经跳过了验证界面。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/:0:0","series":null,"tags":["SourceTree","Git"],"title":"HowTo Skip Atlassian Auth for SourceTree","uri":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/#解决步骤"},{"categories":["Git","SourceTree"],"content":" 0.0.1 问题 因为国内的网络的原因，导致我们在首次打开SourceTree时需要验证Atlassian账号，但是Atlassian的注册页面使用requirejs是用了Google的CDN服务，所以无法正常通过验证，如果你有翻墙工具，那么这就没有问题，下面我要讲的方法是在不翻墙的情况下跳过初始化验证。 目前我解决的是在Windows平台上的问题，关于Mac平台，我稍后会更新到文档中。 0.0.2 解决思路我的想法是通过增加account信息，让SourceTree跳过验证；经过测试2.0.19及以下版本都支持，但是SourceTree在最新版本2.0.20时可能修订验证方式，所以导致我的这个方式不适用，大家可以在我的百度云盘共享中下载2.0.19，功能上并没发生多少变化。 链接: https://pan.baidu.com/s/1qYsHKWs 密码: wnc3 0.0.3 解决步骤 0.0.3.1 .NET 4.5.2SourceTree 依赖的.NET环境最低是4.5.2，当然在你安装的过程中，会提示你下载安装，你只需要确认即可，不过这样下载会比较慢，所以建议你使用Offline的形式安装，下面是微软官方下载地址： https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642 0.0.3.2 SourceTree安装过程中，默认一路“Next”即可，在安装完成之后，我们需要找到SourceTree在LocalAppData中的路径，请打开资源管理窗口，然后输入以下地址： %LocalAppData%\\Atlassian\\SourceTree\\ 如果路径不存在，创建目录即可 然后将之前百度云盘的文件accounts.json复制到这个位置，它的路径应该是： %LocalAppData%\\Atlassian\\SourceTree\\accounts.json 文件内容： [ { \"$id\": \"1\", \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\", \"Authenticate\": true, \"HostInstance\": { \"$id\": \"2\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\", \"Host\": { \"$id\": \"3\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\", \"Id\": \"atlassian account\" }, \"BaseUrl\": \"https://id.atlassian.com/\" }, \"Credentials\": { \"$id\": \"4\", \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\", \"Username\": \"\", \"Email\": null }, \"IsDefault\": false } ] 添加完成之后，启动SourceTree即可发现已经跳过了验证界面。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/:0:0","series":null,"tags":["SourceTree","Git"],"title":"HowTo Skip Atlassian Auth for SourceTree","uri":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/#net-452"},{"categories":["Git","SourceTree"],"content":" 0.0.1 问题 因为国内的网络的原因，导致我们在首次打开SourceTree时需要验证Atlassian账号，但是Atlassian的注册页面使用requirejs是用了Google的CDN服务，所以无法正常通过验证，如果你有翻墙工具，那么这就没有问题，下面我要讲的方法是在不翻墙的情况下跳过初始化验证。 目前我解决的是在Windows平台上的问题，关于Mac平台，我稍后会更新到文档中。 0.0.2 解决思路我的想法是通过增加account信息，让SourceTree跳过验证；经过测试2.0.19及以下版本都支持，但是SourceTree在最新版本2.0.20时可能修订验证方式，所以导致我的这个方式不适用，大家可以在我的百度云盘共享中下载2.0.19，功能上并没发生多少变化。 链接: https://pan.baidu.com/s/1qYsHKWs 密码: wnc3 0.0.3 解决步骤 0.0.3.1 .NET 4.5.2SourceTree 依赖的.NET环境最低是4.5.2，当然在你安装的过程中，会提示你下载安装，你只需要确认即可，不过这样下载会比较慢，所以建议你使用Offline的形式安装，下面是微软官方下载地址： https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642 0.0.3.2 SourceTree安装过程中，默认一路“Next”即可，在安装完成之后，我们需要找到SourceTree在LocalAppData中的路径，请打开资源管理窗口，然后输入以下地址： %LocalAppData%\\Atlassian\\SourceTree\\ 如果路径不存在，创建目录即可 然后将之前百度云盘的文件accounts.json复制到这个位置，它的路径应该是： %LocalAppData%\\Atlassian\\SourceTree\\accounts.json 文件内容： [ { \"$id\": \"1\", \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\", \"Authenticate\": true, \"HostInstance\": { \"$id\": \"2\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\", \"Host\": { \"$id\": \"3\", \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\", \"Id\": \"atlassian account\" }, \"BaseUrl\": \"https://id.atlassian.com/\" }, \"Credentials\": { \"$id\": \"4\", \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\", \"Username\": \"\", \"Email\": null }, \"IsDefault\": false } ] 添加完成之后，启动SourceTree即可发现已经跳过了验证界面。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/:0:0","series":null,"tags":["SourceTree","Git"],"title":"HowTo Skip Atlassian Auth for SourceTree","uri":"https://samzong.me/howto-skip-atlassian-auth-for-sourcetree/#sourcetree"},{"categories":["Tools","VPN"],"content":"应邀制作一份关于Mac SSR的连接使用。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:0:0","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#"},{"categories":["Tools","VPN"],"content":" 1. 准备 SSR 服务提供商，SSGlobal ，你可以到Telegram加入我们。SSGlobal Group MacOS 版本 10.12.6，经过实测OS版本对实际使用影响并不大。 SSR Client， 下载 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:1:0","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#准备"},{"categories":["Tools","VPN"],"content":" 2. SSR服务如果你需要科学上网的话，非常愿意给你推荐我正在使用的SSR服务商，但是由于其官方网站和客户沟通工具TG需要科学上网才能使用，所以你可以联系到我来介绍你们。 最新定价计划： Plan-A：¥15.00元，1个月，无限流量，不限速，可自助切换节点。 Plan-B：¥15.00元，3个月，6G流量包，不限速，可自助切换节点。 增加线路：¥8.00元，1个月，1条。 注：增加线路仅支持Plan-A用户配套购买，不超过主线路最长期限，不足1个月剩余时限用户不支持购买 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:2:0","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#ssr服务"},{"categories":["Tools","VPN"],"content":" 2.1 注册账号立即注册 这里alexman@mac.local 仅仅是演示邮箱，请填写对应属于你的邮箱. 当你点击提交完成后，在你的邮箱会收到一封激活邮件，点击其中链接或将链接复制到浏览器中即可激活。 这里同样是激活链接，同样仅作为演示。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:2:1","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#注册账号"},{"categories":["Tools","VPN"],"content":" 2.2 登录系统立即登录 输入注册时的用户名密码，即可登录到系统内，然后在首页找到进入后台按钮，即可看到试用信息。 这里填写用户名或邮箱都可以。 进入系统后，找到订阅链接信息，默认情况下，你应该只有一条线路信息，付费用户享有应急通道。 上图中”切换“，用来切换不同服务器节点，注意，切换后要到客户端内刷新订阅信息，下面会讲到。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:2:2","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#登录系统"},{"categories":["Tools","VPN"],"content":" 3. SSR Client 安装在本文最上面已经有了，如何下载SSR 客户端的地方，细心的朋友，应该已经在SSGlobal官网上找到了对应下载页面，其中包含全平台的客户端工具。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:3:0","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#ssr-client-安装"},{"categories":["Tools","VPN"],"content":" 3.1 下载立即下载 下载完成后，找到你的下载文件，双击打开，将程序拖到Mac程序目录即完成安装，和Mac其他软件安装并无不同。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:3:1","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#下载"},{"categories":["Tools","VPN"],"content":" 4. 启动程序在Launchpad中找到最近安装的 Shadowsocks NG R8，点击启动后，Mac右上角导航栏中会有一个小飞机的图标，点击可以看到以下信息： 上图中已经有我的订阅信息，请忽略 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:4:0","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#启动程序"},{"categories":["Tools","VPN"],"content":" 5. 编辑订阅信息选择编辑订阅信息，然后将你在SSGlobal 网站后台拿到的订阅信息添加到其中 注意只要添加URL信息即可，不需要修改其他。 然后选择手动更新订阅，这里在你的服务列表内，就有了你的服务器节点信息，选择对应节点即可开启科学上网 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:5:0","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#编辑订阅信息"},{"categories":["Tools","VPN"],"content":" 5.1 PAC 规则首次使用PAC需要更新一次PAC规则，操作如下图。 这里的PAC规则是从GFWLists更新的，由于其更新速度较慢，所以如果日常使用发现某些网站无法使用，可以手动添加到PAC规则内 || domain , 这里表示匹配所有代理 更多关于用户规则，可以查看这里，使用手册 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:5:1","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#pac-规则"},{"categories":["Tools","VPN"],"content":" 6. 结语到这里，基本常用的安装和使用已经完成了，如果测试后仍旧无法正常使用，请仔细检查是否遗漏步骤，也可以与我取得沟通。 ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-ssr-on-mac/:6:0","series":null,"tags":["VPN","mac"],"title":"HowTo Use SSR Service on Mac","uri":"https://samzong.me/howto-use-ssr-on-mac/#结语"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#下载"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#安装"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#git-for-windows"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#tortoisegit"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#修改程序语言为中文"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#使用tortoisegit克隆你的项目"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#测试项目"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#ssh验证方式"},{"categories":["Git","TortoiseGit"],"content":"Git是目前最先进的版本控制系统，越来越多的业务场景都在使用Git，风靡全球的Github更是让Git版本控制系统名声大震，但是GitHub旨在建立一个开源的生态环境，所以不适合企业内部的管理系统，在之前的文章中，我也讲到了如何搭建GitLab，可以在企业内部自建一套功能完善的Git版本控制系统。 GitLab是一个非常成熟的服务端应用，但是作为一名开发人员，我们在使用GitLab与其他人员协同版本时，需要有一个工作对我们的每次修改更新以及推送，这也是版本控制工具的真正精髓；在不同的平台有着很多丰富的应用软件，所以挑选一款适合自己的Git GUI工具很重要。 目前在众多Git Client之中做的比较好的是SourceTree，并且同时支持Mac和Windows双平台，但是有一个问题，当我们在初次安装时需要验证Atlassian账号，但是Atlassian的注册页面用了requirejs，而且是用了Google的CDN服务，所以必须翻墙，这对很多中国用户的使用造成了不变；所以，今天我在这里推荐一个在Windows平台下同样可以作为Git图形化客户端工具的：TortoiseGit TortoiseGit 是 TortoiseSVN 的 Git 版本，TortoiseGit用于迁移 TortoiseSVN 到 TortoiseGit，解决了在Windows平台之上没有合适Git图形化客户端的问题，TortoiseGit不仅免费，而且同样支持丰富的语言包，但是需要独立下载语言包安装，默认只有英文，注意语言包与程序版本一定要匹配。 0.0.1 下载TortoiseGit的官方下载地址是这里：https://tortoisegit.org/download/ ，下载时请注意与你系统的兼容性。 注意TortoiseGit 1.8.16之后的版本不在支持Windows XP 和 Server 2003 因为TortoiseGit官网不在国内，所以在访问下载时速度非常的慢，我将目前的稳定版本2.4上传到我的百度云盘，但是以后我可能不能及时更新，所以如果你对版本要求不是很高，可以点击下面链接下载。 链接: https://pan.baidu.com/s/1eScNjA6 密码: 31hu 如链接失效，您可以通过本页面右下角展开通过邮箱，与我取得联系。 0.0.2 安装 0.0.2.1 Git for Windows首先，我们需要安装Git在你的电脑上，这保证你的TortoiseGit运行时所需要的依赖环境。 下载地址：https://git-for-windows.github.io/ 同样，因为某些网络的原因，导致我们在下载时也会很慢，所以我也将目前最新2.13版本上传到了我的百度云盘： 链接: https://pan.baidu.com/s/1c12ZvRq 密码: 43yt 安装过程，这里不在展示，通常情况下，你只需要一路点击Next即可，但是如果你想要修改一些设置，例如默认的安装位置，那么你需要注意下，在TortoiseGit初次启动时，你需要手动设置Git.exe的位置。 0.0.2.2 TortoiseGit我的测试系统是Windows 7 旗舰版 64位，并且支持TortoiseGit最新的版本。 请依次安装上图中两个软件，注意LanguagePack应该在主程序之后安装，同样，你也只需要一路点击Next即可。 在你安装完成之后，在该目录的空白区域，单击鼠标右键，你应该会看到新增了TortoiseGit的选项，我们选择\"TortoiseGit\"\u003e“Settings\"来初始化我们设置。 0.0.2.3 修改程序语言为中文如果英文你的使用不会有影响，你可以略过这一步骤，同样你也不需要下载上面的LanguagePack包。 好了，按照如上图中操作，你应该已经修改了程序语言为中文，再次到空白区域单击测试就可以看到了。 0.0.3 使用TortoiseGit克隆你的项目在我们安装了好TortoiseGit和Git的基本基础环境之后，我们需要使用TortoiseGit克隆项目，这里我们是在GitHub创建了一个测试项目，你可以直接使用你的项目地址即可。 0.0.3.1 测试项目 GitHub和GitLab都提供了通过使用HTTPS和SSH的方式，这两种方式有些不同，我会在下面分开讲述如何使用。 0.0.3.2 SSH验证方式如果采用SSH验证方式，那么你需要生成一对公钥和私钥，并且将公钥上传到你的GitLab或GitHub上，然后在克隆你的项目时，使用匹配的私钥即可。 那在Windows如何上生成私钥呢？其实我们在安装TortoiseGit时已经默认安装PuTTYgen工具，我们可以利用它来创建秘钥。 打开PuTTYgen，点击generate即可创建密钥，PuTTYgen其实是按照鼠标运行的轨迹来计算的，所以在点击后，我们不停的使用鼠标移动，等待进度条完成就可以了。 当创建完成之后，你可以看到以下以下内容，注意不要关闭，我们要点击Save public key和Save private key，并将上public key传到你的GitHub或GitLab账户之中。 注意，我在图中隐去了其他SSH keys信息，我建议你在做类似分享时也注意隐去你的重要信息 好了，接下来，我们就要开克隆我们的项目了，在你想要存放项目的目录内，鼠标右键选择”Git克隆“，然后输入你的项目URL，并且加载我们刚刚生产私钥文件。 注意，在你确认都没问题的情况下，点击确认，然后你就会看到如下页面，如果这个过程中出现问题，请注意检查项目URL和私钥文件是否正确。 到这里，我们SSH验证仓库的方式就全好，接下来我们就可以使用开始进行我们的工作，但在首次提交我们的项目时，需要设置用户名和密码，这是为了方便验证我们的身份。 点击”是“，在弹出的窗口中设定用户名和邮箱，保存即可。 0.0.3.3 HTTPS or HTTP在使用GitLab为公司内部仓库时，可以不开通HTTPS验证，HTTP也不会影响我们的验证方式，但是从安全的角度上来说，强烈建议启用HTTPS，HTTPS加密传输可以给我们的代码和用户信息的安全提供更好的保护。 如果使用HTTPS or HTTP的方式，我们不需要增加任何密钥文件或怎样，只需要使用我们现有的GitHub或GitLab账号即可；在你想要存放项目的目录内，鼠标右键选择”Git克隆“，在弹出的窗口中，注意项目URL要是用HTTPS，并且去掉勾选加载密钥选项。 如果你的项目在GitLab上，并且这个项目是一个私有项目，那么这里就会要求你输入你的GitLab用户名和密码，输入正确的用户和密码就可以成功克隆了。 但是，由于我的测试项目在GitHub上，GitHub上的项目默认都是公开项目，所以在这一步骤不会询问我的用户名和密码，只有在我需要将本地更新推送到GitHub时才会验证；所以接下来我在项目目录下新增文件newfile2.txt， 注意，Git不同SVN，Git的提交不会将更新推送到远端服务器，所以我们在提交成功之后，再去手动推送 右键选择Git提交，会弹出提交页面，我们需要这里，输入提交说明信息，和需要提交的文件。 点击”提交之后“，我们会看成功提交的窗口，然后在窗口选择点击推送； 当我们点击推送之后，会要求输入对应的GitHub用户名和密码： ","date":"0001-01-01","objectID":"https://samzong.me/howto-use-tortoisegit-for-windows/:0:0","series":null,"tags":["Git"],"title":"HowTo use TortoiseGit for Windows","uri":"https://samzong.me/howto-use-tortoisegit-for-windows/#https-or-http"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#前言"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#准备"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#charles-安装"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#charles-ssl证书导入系统"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#虾米音乐-的三次下载"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#第一次下载"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#第二次下载"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#第三次下载"},{"categories":null,"content":" 0.0.1 前言软件版本迭代是会带来新的功能和 BUG 修复，为给用户带来更好的使用体验，我也是乐于尝鲜的性格，所以在软件推出发布新版本时都会及时更新，但用户体验其实是一个玄学的话题，有时并不能给你带来更好的体验，在 iOS 上，由于苹果商店严格的管理机制导致我们在升级后，想要回退到之前版本变得十分困难。 虾米音乐升级到 6.0 版本之后，改变很大，作为一位老虾米非常不适应，所以就瞄准了 6.0 之前的最后一个版本：5.9.4。 解决办法是在 iTunes 下载程序时，使用抓包工具对与苹果应用商店服务器之间的请求进行分析，通过修改下载请求中程序版本识别序列号来下载旧版本。 0.0.2 准备网上较多的解决办法是使用 Fiddler+iTunes 是在 Windows 平台，因为我只有 Mac ，所以用Charles 代替 Fiddler，这里需要注意的是iTunes的版本，在笔者写这篇教程的前一天 iTunes 更新到12.7，在 12.7 中有一个很大的变化移除了 App store ，所以请使用低于 12.7 版本的 iTunes 。 0.0.2.1 Charles 安装对于 Charles 版本并没有特殊要求，我这边是通过brew安装，你也可以到 Charles 官网下载安装， Charles 是需要付费的软件，但是有30天免费使用期限，如果你有长期使用打算，建议购买正版授权。 0.0.2.2 Charles SSL证书导入系统从 Charles 中导出证书文件 在 KeyChain Access 中导入证书 选中导入的证书，然后右键选择 ‘Get Info’ ，设置证书信任状态 0.0.3 “虾米音乐” 的三次下载 0.0.3.1 第一次下载打开 Charles ，开启监听，然后使用搜索虾米音乐，点击 Downloads 按钮。 点击下载后，在 Charles 会出现监听到信息，找到一条 ‘p[xx]-buy.itunes.apple.com’ ，其中 xx 是一个随机的数字，选中它，然后右键菜单栏中勾选 ‘Enable SSL Proxying’ 和 ‘Breakpoints’ 。设置完成后，在 iTunes 下载中，清理下载记录。 0.0.3.2 第二次下载重新搜索虾米音乐，并点击下载按钮，这时 Charles 会弹出窗口，然后在弹出窗口的右下三个按钮中选择 ‘Execute’ ，这一步是我们请求服务器，紧接着出现的就是服务器给我们的响应，然后选择 ‘Edit Response’ - ‘XML Text’ ，然后向下滚动找到下图中的部分，这里是所有虾米音乐的版本的序列数字，但是这里没有办法直接看到版本号，越大的数字版本号越新。这里可以通过在手机 App store 中查看软件的版本记录，找到大概要回退多少个版本，然后数字从大到小找个半个序列数字记录下来，然后在下面三个按钮中选择 ‘Abort’ ，这时 iTunes 会弹出一个报错窗口，关掉即可。 0.0.3.3 第三次下载再次重新搜索虾米音乐，并点击下载，在这次Charles弹出窗口中我们需要直接修改 ‘Edit Requset’ - ‘XML Text’ ，将如下图中的 ‘appExtVrsid’ 对应的值修改为，我们上一步中记录的序列数字，然后就一直在每次弹出选择时，选择 ‘Execute’ ，直到下载完成记录。 0.0.4 验证下载完成后，你的 iTunes App Library 中已经有了一个虾米音乐，连接上你的手机，将其安装到手机上即可，下图是我安装后的版本截图。 ","date":"0001-01-01","objectID":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/:0:0","series":null,"tags":["iPhone"],"title":"iPhone/iPad 不越狱安装旧版程序","uri":"https://samzong.me/iphoneipad%E4%B8%8D%E8%B6%8A%E7%8B%B1%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E7%A8%8B%E5%BA%8F/#验证"},{"categories":["OpenSource","Jmeter"],"content":"之前一直使用阿里云的PTS服务作为测试，但是今天发现阿里云的PTS服务正在升级无法使用，所以打算用Jmeter来做压力测试，并使用Chrome插件BlazeMeter来录制.jmx脚本。 0.0.1 安装BlazeMeter插件插件安装 , 需要能登录到Chrome应用商店，如果不能登录的话，可以在网上搜索下载crx包，手动加载到Chrome中即可。 安装成功之后，在Chrome插件栏可以看到程序入口， BlazeMeter限制需要登录才能导出jmx脚本，所以首先需要注册账号。成功登陆后，完整界面如图所示： 0.0.2 录制过程填写测试脚本名称后，点击开始录制，执行一系列操作后，点停止录制，然后到处jmx文件到本地。 0.0.3 导入脚本到Jmeter在Jmeter中\"File-Open\"导入你jmx脚本，为了方便观察结果，我们需要增加一些察看报告。 0.0.3.1 聚合报告(Aggregate Report)我们可以在聚合报告中一些非常有用的信息，这有助于对性能测试的分析。 Samples ： 一共完成了多少事务 Averge ： 平均响应时间 Median ： 统计意义上的响应时间的中值 90% Line ：90%的事务响应时间都小于xx ms Min ：最小响应时间 ms Max : 最大响应时间 ms Eror % : 出错率 Throughput ： 吞吐量，事务/秒 KB/sec ： 用流量来衡量的吞吐量 吞吐量=完成的事务数/完成这些事务数所需要的时间； 平均响应时间=所有响应时间的总和/完成的事务数； 失败率=失败的个数/事务数。 0.0.3.2 查看结果树(View Results Tree)通过查看结果树，可以看到每个事务的返回结果，其中红色是出错，绿色则为正常。建议在测试开始前将log/Display Only中Errors打上勾即可，不然会输出很多东西，不方便查看。 ","date":"0001-01-01","objectID":"https://samzong.me/blazemeter_recoding_jmx/:0:0","series":null,"tags":["Jmeter"],"title":"Jmeter 使用BlazeMeter为Jmeter录制脚本","uri":"https://samzong.me/blazemeter_recoding_jmx/#"},{"categories":["OpenSource","Jmeter"],"content":"之前一直使用阿里云的PTS服务作为测试，但是今天发现阿里云的PTS服务正在升级无法使用，所以打算用Jmeter来做压力测试，并使用Chrome插件BlazeMeter来录制.jmx脚本。 0.0.1 安装BlazeMeter插件插件安装 , 需要能登录到Chrome应用商店，如果不能登录的话，可以在网上搜索下载crx包，手动加载到Chrome中即可。 安装成功之后，在Chrome插件栏可以看到程序入口， BlazeMeter限制需要登录才能导出jmx脚本，所以首先需要注册账号。成功登陆后，完整界面如图所示： 0.0.2 录制过程填写测试脚本名称后，点击开始录制，执行一系列操作后，点停止录制，然后到处jmx文件到本地。 0.0.3 导入脚本到Jmeter在Jmeter中\"File-Open\"导入你jmx脚本，为了方便观察结果，我们需要增加一些察看报告。 0.0.3.1 聚合报告(Aggregate Report)我们可以在聚合报告中一些非常有用的信息，这有助于对性能测试的分析。 Samples ： 一共完成了多少事务 Averge ： 平均响应时间 Median ： 统计意义上的响应时间的中值 90% Line ：90%的事务响应时间都小于xx ms Min ：最小响应时间 ms Max : 最大响应时间 ms Eror % : 出错率 Throughput ： 吞吐量，事务/秒 KB/sec ： 用流量来衡量的吞吐量 吞吐量=完成的事务数/完成这些事务数所需要的时间； 平均响应时间=所有响应时间的总和/完成的事务数； 失败率=失败的个数/事务数。 0.0.3.2 查看结果树(View Results Tree)通过查看结果树，可以看到每个事务的返回结果，其中红色是出错，绿色则为正常。建议在测试开始前将log/Display Only中Errors打上勾即可，不然会输出很多东西，不方便查看。 ","date":"0001-01-01","objectID":"https://samzong.me/blazemeter_recoding_jmx/:0:0","series":null,"tags":["Jmeter"],"title":"Jmeter 使用BlazeMeter为Jmeter录制脚本","uri":"https://samzong.me/blazemeter_recoding_jmx/#安装blazemeter插件"},{"categories":["OpenSource","Jmeter"],"content":"之前一直使用阿里云的PTS服务作为测试，但是今天发现阿里云的PTS服务正在升级无法使用，所以打算用Jmeter来做压力测试，并使用Chrome插件BlazeMeter来录制.jmx脚本。 0.0.1 安装BlazeMeter插件插件安装 , 需要能登录到Chrome应用商店，如果不能登录的话，可以在网上搜索下载crx包，手动加载到Chrome中即可。 安装成功之后，在Chrome插件栏可以看到程序入口， BlazeMeter限制需要登录才能导出jmx脚本，所以首先需要注册账号。成功登陆后，完整界面如图所示： 0.0.2 录制过程填写测试脚本名称后，点击开始录制，执行一系列操作后，点停止录制，然后到处jmx文件到本地。 0.0.3 导入脚本到Jmeter在Jmeter中\"File-Open\"导入你jmx脚本，为了方便观察结果，我们需要增加一些察看报告。 0.0.3.1 聚合报告(Aggregate Report)我们可以在聚合报告中一些非常有用的信息，这有助于对性能测试的分析。 Samples ： 一共完成了多少事务 Averge ： 平均响应时间 Median ： 统计意义上的响应时间的中值 90% Line ：90%的事务响应时间都小于xx ms Min ：最小响应时间 ms Max : 最大响应时间 ms Eror % : 出错率 Throughput ： 吞吐量，事务/秒 KB/sec ： 用流量来衡量的吞吐量 吞吐量=完成的事务数/完成这些事务数所需要的时间； 平均响应时间=所有响应时间的总和/完成的事务数； 失败率=失败的个数/事务数。 0.0.3.2 查看结果树(View Results Tree)通过查看结果树，可以看到每个事务的返回结果，其中红色是出错，绿色则为正常。建议在测试开始前将log/Display Only中Errors打上勾即可，不然会输出很多东西，不方便查看。 ","date":"0001-01-01","objectID":"https://samzong.me/blazemeter_recoding_jmx/:0:0","series":null,"tags":["Jmeter"],"title":"Jmeter 使用BlazeMeter为Jmeter录制脚本","uri":"https://samzong.me/blazemeter_recoding_jmx/#录制过程"},{"categories":["OpenSource","Jmeter"],"content":"之前一直使用阿里云的PTS服务作为测试，但是今天发现阿里云的PTS服务正在升级无法使用，所以打算用Jmeter来做压力测试，并使用Chrome插件BlazeMeter来录制.jmx脚本。 0.0.1 安装BlazeMeter插件插件安装 , 需要能登录到Chrome应用商店，如果不能登录的话，可以在网上搜索下载crx包，手动加载到Chrome中即可。 安装成功之后，在Chrome插件栏可以看到程序入口， BlazeMeter限制需要登录才能导出jmx脚本，所以首先需要注册账号。成功登陆后，完整界面如图所示： 0.0.2 录制过程填写测试脚本名称后，点击开始录制，执行一系列操作后，点停止录制，然后到处jmx文件到本地。 0.0.3 导入脚本到Jmeter在Jmeter中\"File-Open\"导入你jmx脚本，为了方便观察结果，我们需要增加一些察看报告。 0.0.3.1 聚合报告(Aggregate Report)我们可以在聚合报告中一些非常有用的信息，这有助于对性能测试的分析。 Samples ： 一共完成了多少事务 Averge ： 平均响应时间 Median ： 统计意义上的响应时间的中值 90% Line ：90%的事务响应时间都小于xx ms Min ：最小响应时间 ms Max : 最大响应时间 ms Eror % : 出错率 Throughput ： 吞吐量，事务/秒 KB/sec ： 用流量来衡量的吞吐量 吞吐量=完成的事务数/完成这些事务数所需要的时间； 平均响应时间=所有响应时间的总和/完成的事务数； 失败率=失败的个数/事务数。 0.0.3.2 查看结果树(View Results Tree)通过查看结果树，可以看到每个事务的返回结果，其中红色是出错，绿色则为正常。建议在测试开始前将log/Display Only中Errors打上勾即可，不然会输出很多东西，不方便查看。 ","date":"0001-01-01","objectID":"https://samzong.me/blazemeter_recoding_jmx/:0:0","series":null,"tags":["Jmeter"],"title":"Jmeter 使用BlazeMeter为Jmeter录制脚本","uri":"https://samzong.me/blazemeter_recoding_jmx/#导入脚本到jmeter"},{"categories":["OpenSource","Jmeter"],"content":"之前一直使用阿里云的PTS服务作为测试，但是今天发现阿里云的PTS服务正在升级无法使用，所以打算用Jmeter来做压力测试，并使用Chrome插件BlazeMeter来录制.jmx脚本。 0.0.1 安装BlazeMeter插件插件安装 , 需要能登录到Chrome应用商店，如果不能登录的话，可以在网上搜索下载crx包，手动加载到Chrome中即可。 安装成功之后，在Chrome插件栏可以看到程序入口， BlazeMeter限制需要登录才能导出jmx脚本，所以首先需要注册账号。成功登陆后，完整界面如图所示： 0.0.2 录制过程填写测试脚本名称后，点击开始录制，执行一系列操作后，点停止录制，然后到处jmx文件到本地。 0.0.3 导入脚本到Jmeter在Jmeter中\"File-Open\"导入你jmx脚本，为了方便观察结果，我们需要增加一些察看报告。 0.0.3.1 聚合报告(Aggregate Report)我们可以在聚合报告中一些非常有用的信息，这有助于对性能测试的分析。 Samples ： 一共完成了多少事务 Averge ： 平均响应时间 Median ： 统计意义上的响应时间的中值 90% Line ：90%的事务响应时间都小于xx ms Min ：最小响应时间 ms Max : 最大响应时间 ms Eror % : 出错率 Throughput ： 吞吐量，事务/秒 KB/sec ： 用流量来衡量的吞吐量 吞吐量=完成的事务数/完成这些事务数所需要的时间； 平均响应时间=所有响应时间的总和/完成的事务数； 失败率=失败的个数/事务数。 0.0.3.2 查看结果树(View Results Tree)通过查看结果树，可以看到每个事务的返回结果，其中红色是出错，绿色则为正常。建议在测试开始前将log/Display Only中Errors打上勾即可，不然会输出很多东西，不方便查看。 ","date":"0001-01-01","objectID":"https://samzong.me/blazemeter_recoding_jmx/:0:0","series":null,"tags":["Jmeter"],"title":"Jmeter 使用BlazeMeter为Jmeter录制脚本","uri":"https://samzong.me/blazemeter_recoding_jmx/#聚合报告aggregate-report"},{"categories":["OpenSource","Jmeter"],"content":"之前一直使用阿里云的PTS服务作为测试，但是今天发现阿里云的PTS服务正在升级无法使用，所以打算用Jmeter来做压力测试，并使用Chrome插件BlazeMeter来录制.jmx脚本。 0.0.1 安装BlazeMeter插件插件安装 , 需要能登录到Chrome应用商店，如果不能登录的话，可以在网上搜索下载crx包，手动加载到Chrome中即可。 安装成功之后，在Chrome插件栏可以看到程序入口， BlazeMeter限制需要登录才能导出jmx脚本，所以首先需要注册账号。成功登陆后，完整界面如图所示： 0.0.2 录制过程填写测试脚本名称后，点击开始录制，执行一系列操作后，点停止录制，然后到处jmx文件到本地。 0.0.3 导入脚本到Jmeter在Jmeter中\"File-Open\"导入你jmx脚本，为了方便观察结果，我们需要增加一些察看报告。 0.0.3.1 聚合报告(Aggregate Report)我们可以在聚合报告中一些非常有用的信息，这有助于对性能测试的分析。 Samples ： 一共完成了多少事务 Averge ： 平均响应时间 Median ： 统计意义上的响应时间的中值 90% Line ：90%的事务响应时间都小于xx ms Min ：最小响应时间 ms Max : 最大响应时间 ms Eror % : 出错率 Throughput ： 吞吐量，事务/秒 KB/sec ： 用流量来衡量的吞吐量 吞吐量=完成的事务数/完成这些事务数所需要的时间； 平均响应时间=所有响应时间的总和/完成的事务数； 失败率=失败的个数/事务数。 0.0.3.2 查看结果树(View Results Tree)通过查看结果树，可以看到每个事务的返回结果，其中红色是出错，绿色则为正常。建议在测试开始前将log/Display Only中Errors打上勾即可，不然会输出很多东西，不方便查看。 ","date":"0001-01-01","objectID":"https://samzong.me/blazemeter_recoding_jmx/:0:0","series":null,"tags":["Jmeter"],"title":"Jmeter 使用BlazeMeter为Jmeter录制脚本","uri":"https://samzong.me/blazemeter_recoding_jmx/#查看结果树view-results-tree"},{"categories":null,"content":" https://mozillazg.com/2018/01/jq-use-examples-cookbook.htm- jq 命令日常练习 https://jqplay.org/s/KhRuUFCP2h 一个灵活的轻量级命令行JSON处理器 ","date":"0001-01-01","objectID":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/:0:0","series":null,"tags":["unix command"],"title":"jq 命令行 Json 处理神器","uri":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/#"},{"categories":null,"content":" 1. 说明jq 是 stedolan 开发的一个轻量级的和灵活的命令行JSON处理器，源码请参考 jq 项目主页 。jq 用于处理JSON输入，将给定过滤器应用于其JSON文本输入并在标准输出上将过滤器的结果生成为JSON；最简单的过滤器是.，它将jq的输入未经修改地复制到其输出中（格式设置除外）； 请注意，jq 当前仅支持64位双精度浮点数（IEEE754）。 ","date":"0001-01-01","objectID":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/:1:0","series":null,"tags":["unix command"],"title":"jq 命令行 Json 处理神器","uri":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/#说明"},{"categories":null,"content":" 2. 安装 # Debian系，如 Ubuntu sudo apt-get install jq # RedHat系, 如 CentOS yum install jq # MacOS brew install jq ","date":"0001-01-01","objectID":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/:2:0","series":null,"tags":["unix command"],"title":"jq 命令行 Json 处理神器","uri":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/#安装"},{"categories":null,"content":" 3. 语法 jq [options] \u003cjq filter\u003e [file...] jq [options] --args \u003cjq filter\u003e [strings...] jq [options] --jsonargs \u003cjq filter\u003e [JSON_TEXTS...] ","date":"0001-01-01","objectID":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/:3:0","series":null,"tags":["unix command"],"title":"jq 命令行 Json 处理神器","uri":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/#语法"},{"categories":null,"content":" 4. 选项 -c 紧凑而不是漂亮的输出; -n 使用`null`作为单个输入值; -e 根据输出设置退出状态代码; -s 将所有输入读取（吸取）到数组中；应用过滤器; -r 输出原始字符串，而不是JSON文本; -R 读取原始字符串，而不是JSON文本; -C 为JSON着色; -M 单色（不要为JSON着色）; -S 在输出上排序对象的键; --tab 使用制表符进行缩进; --arg a v 将变量$a设置为value\u003cv\u003e; --argjson a v 将变量$a设置为JSON value\u003cv\u003e; --slurpfile a f 将变量$a设置为从\u003cf\u003e读取的JSON文本数组; --rawfile a f 将变量$a设置为包含\u003cf\u003e内容的字符串; --args 其余参数是字符串参数，而不是文件; --jsonargs 其余的参数是JSON参数，而不是文件; -- 终止参数处理; ","date":"0001-01-01","objectID":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/:4:0","series":null,"tags":["unix command"],"title":"jq 命令行 Json 处理神器","uri":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/#选项"},{"categories":null,"content":" 5. 例子 .: 以漂亮的方式输出 $ echo '{ \"foo\": { \"bar\": { \"baz\": 123 } } }' | jq '.' { \"foo\": { \"bar\": { \"baz\": 123 } } } .foo, .foo.bar, .foo?: 获取一个键的值 $ echo '{\"foo\": 42, \"bar\": \"less interesting data\"}' | jq '.foo' 42 .[], .[]?, .[2], .[10:15]: 数组运算 $ echo '[{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}]' | jq '.[1]' { \"name\": \"XML\", \"good\": false } [], {}: 构造一个数组/对象 $ echo '{\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}' | jq '{user, title: .titles[]}' { \"user\": \"stedolan\", \"title\": \"JQ Primer\" } { \"user\": \"stedolan\", \"title\": \"More JQ\" } length: 计算一个值的长度 $ echo '[[1,2], \"string\", {\"a\":2}, null]' | jq '.[] | length' 2 6 1 0 keys: 取出数组中的键 $ echo '{\"abc\": 1, \"abcd\": 2, \"Foo\": 3}' | jq 'keys' [ \"Foo\", \"abc\", \"abcd\" ] ,: 使用多个过滤器 $ echo '{ \"foo\": 42, \"bar\": \"something else\", \"baz\": true}' | jq '.foo, .bar' 42 \"something else\" |: 通过管道将一个过滤器的输出当做下一个过滤器的输入 $ echo '[{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}]' | jq '.[] | .name' \"JSON\" \"XML\" select(foo): 如果foo返回true，则输入保持不变 $ echo '[1,5,3,0,7]' | jq 'map(select(. \u003e= 2))' [ 5, 3, 7 ] map(foo): 每个输入调用过滤器 $ echo '[1,2,3]' | jq 'map(.+1)' [ 2, 3, 4 ] if-then-else-end: 条件判断 $ echo '2' | jq 'if . == 0 then \"zero\" elif . == 1 then \"one\" else \"many\" end' \"many\" \\(foo): 在字符串中插入值并进行运算 $ echo '42' | jq '\"The input was \\(.), which is one less than \\(.+1)\"' \"The input was 42, which is one less than 43\" ","date":"0001-01-01","objectID":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/:5:0","series":null,"tags":["unix command"],"title":"jq 命令行 Json 处理神器","uri":"https://samzong.me/jq-%E5%91%BD%E4%BB%A4%E8%A1%8C-json-%E5%A4%84%E7%90%86%E7%A5%9E%E5%99%A8/#例子"},{"categories":null,"content":" 1. 南北流量和东西流量 是什么意思？在Service Mesh微服务架构中，我们常常会听到东西流量和南北流量两个术语。 南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。下面我们通过一个例子来理解这两个术语。 假设我们尝试通过浏览器访问某些Web应用。Web应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。 当我们访问web应用时，会发生以下类型的网络流量： 数据中心树型拓扑图是一个典型的包含接入层、汇聚层、核心层三层的网络结构。这种结构诞生之初就是为了将外部流量引流到内部应用。 流量从外部穿过防火墙或者数据中心其它外围网络设备进来，对应到上⾯这张图里，流动方向为从上到下，称为南向流量（和地图一样，上北下南），而与之对应的，数据中心内部产生的，离开数据中心的流量，从下到上故称为北向流量。合起来称为南北流量。 在微服务化流行之前，以巨石系统（monolithic）这种单体应用为单位部署的方式，产生的是典型的南北流量。一个单体应用配有一个专门的服务器（或虚拟机），一个外部请求通常在单体应用内独立完成，除了访问数据库等必须依赖服务之外，很少会发生横向的流量。 但云计算机、大数据、微服务、云原生等技术的发展催生了大量的从左到右以及从右到左的流量，也被称为东西流量。 数据中心内部南北流量的削弱，而东西流量的井喷在硬件上要求数据中心要横向扩展以提供更宽的大二层以及容纳更多的服务器，而在软件上则要求一种新的服务编排方式以便能充分挖掘、利用现有的计算能力，从这个角度看 K8s 的出现是一种必然。 举两个例子： 客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量 负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。 在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是server-client流量。 第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 service-service 流量。 当下，东西流量远超南北流量，尤其是在当今的大数据生态系统中，比如Hadoop生态系统（大量server驻留在数据中心中，用map reduce处理），server-server流量远大于server-client流量。 大家可能会好奇，东西南北，为什么这么命名 ？ 该命名来自于绘制典型network diagrams的习惯。在图表中，通常核心网络组件绘制在顶部（NORTH），客户端绘制在底部（SOUTH），而数据中心内的不同服务器水平（EAST-WEST） ","date":"0001-01-01","objectID":"https://samzong.me/k8s%E7%B3%BB%E5%88%97-%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/:1:0","series":null,"tags":["K8s"],"title":"K8s系列 南北流量和东西流量","uri":"https://samzong.me/k8s%E7%B3%BB%E5%88%97-%E5%8D%97%E5%8C%97%E6%B5%81%E9%87%8F%E5%92%8C%E4%B8%9C%E8%A5%BF%E6%B5%81%E9%87%8F/#南北流量和东西流量-是什么意思"},{"categories":null,"content":"mac系统也是基于unix的系统，所以也继承类很多unix的特性，包括软件的编译，安装等。ubuntu下有快捷命令apt install来快速安装软件。centos下有yum install来快速安装。所以，mac下也有一种方式，就是使用brew。 并且，在 Homebrew 和 Cask 的支持下，基本可以全面接待 MacOS 的所有软件安装和更新功能。 brew是Mac下的一个包管理工具，它从下载源码解压然后 ./configure \u0026\u0026 make install ，同时会包含相关依存库。并自动配置好各种环境变量，而且非常易于卸载。 这个对程序员来说简直是福音，简单的指令，就能快速安装和升级本地的各种开发环境。 home brew 官网是 http://brew.sh/index_zh-cn.html ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#"},{"categories":null,"content":" 1. 安装 brew打开 itrem 。输入一条命令即可安装好 brew。 ➜ ~ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 这样一个简单的命令，我们就安装好来brew 。来验证一下，输入brew命令： ➜ ~ brew Example usage: brew search TEXT|/REGEX/ brew info [FORMULA|CASK...] brew install FORMULA|CASK... brew update brew upgrade [FORMULA|CASK...] brew uninstall FORMULA|CASK... brew list [FORMULA|CASK...] Troubleshooting: brew config brew doctor brew install --verbose --debug FORMULA|CASK Contributing: brew create URL [--no-fetch] brew edit [FORMULA|CASK...] Further help: brew commands brew help [COMMAND] man brew https://docs.brew.sh 出现了很多帮助命令，说明我们已经安装成功了。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:1:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#安装-brew"},{"categories":null,"content":" 2. 用 brew 安装程序安装好了brew之后，我们就可以用这个命令安装各种源码了。比如安装一下wget工具。这个工具能在命令行中帮我们下载各种数据。 brew install git 这样一个简单的命令就可以了。它会帮我们下载好 git ，并且编译执行安装，还会下载各种依赖包，设置好各种配置和参数。 安装好的 git 会被安装到/usr/local/Cellar/git/下。并且将wget命令软链接至 /usr/local/bin 目录下。这样全局就都可以使用git命令了。 Homebrew 在 MacOS 10.11 之后 修改了 安装的路径为 /opt/Homebrew，通过 brew config 可以看到 ➜ ~ brew config HOMEBREW_VERSION: 3.4.10-7-ga4545e5 ORIGIN: https://github.com/Homebrew/brew HEAD: a4545e52315ceedf2deb97ac17d7234708d16e5b HOMEBREW_PREFIX: /opt/homebrew HOMEBREW_CASK_OPTS: [] CPU: 10-core 64-bit arm_firestorm_icestorm Clang: 13.1.6 build 1316 Git: 2.36.0 =\u003e /opt/homebrew/bin/git Curl: 7.79.1 =\u003e /usr/bin/curl macOS: 12.3.1-arm64 CLT: 13.3.1.0.1.1648687083 Xcode: 13.3.1 Rosetta 2: false ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:2:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#用-brew-安装程序"},{"categories":null,"content":" 3. brew 的常用命令常用的命令没几个： ➜ ~ brew install git # 安装 ➜ ~ brew info git # 显示软件的各种信息 ➜ ~ brew uninstall git # 卸载 ➜ ~ brew search git # 模糊搜索 brew 支持的软件 ➜ ~ brew list # 列出本机通过 brew 安装的所有软件 ➜ ~ brew update # 更新 brew repo 信息，每次 Install 前也会自动更新 ➜ ~ brew upgrade git # 更新软件 [如果不加软件名，就更新所有可以更新的软件] ➜ ~ brew cleanup # 清除下载的各种缓存 ➜ ~ brew doctor # 诊断当前 brew 的配置是否有问题，并给出建议 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:3:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#brew-的常用命令"},{"categories":null,"content":" 4. brew cask brew cask 是在 brew 的基础上一个增强的工具，用来安装Mac上的Gui程序应用包（.dmg/.pkg）, 比如 Chrome 、WeChat 等。它先下载解压到统一的目录中（/opt/homebrew-cask/Caskroom），省掉了自己去下载、解压、拖拽（安装）等蛋疼步骤，同样，卸载相当容易与干净。然后再软链到~/Applications/目录下, 一气呵成。非常方便，而且还包含很多在 AppStore 里没有的常用软件。 brew cask的官网是：http://caskroom.io github地址是：https://github.com/caskroom/homebrew-cask :::information_desk_person: Cask 目前已经内置到 brew 官方安装包内了，无需单独安装；并且官方集成的非常好，大部分情况下，不需要特殊标记就可以看到到对应的软件了 ➜ ~ brew search git --cask # 在 brew 后 --cask 可指定查询 GUI 类型 ==\u003e Casks adobe-digital-editions gitscout caldigit-docking-utility gitter ✔ caldigit-thunderbolt-charging gitup deepgit gitx digital logitech-camera-settings font-digital-numbers logitech-control-center git-it logitech-firmwareupdatetool gitahead logitech-g-hub gitblade logitech-gaming-software gitdock logitech-myharmony gitee logitech-options ✔ giteye logitech-presentation gitfiend logitech-unifying gitfinder plotdigitizer gitfox rowanj-gitx github smartgit github-beta snagit githubpulse snagit4 gitify subgit gitkraken webplotdigitizer gitnote xit gitpigeon 举个简单的例子，iTerm 是我们经常使用的软件： ➜ ~ brew install iTerm --cask # 大部分情况下 --cask 是可以省略的，除非在出现同名的情况下 使用小技巧 如果不清楚这个软件是否符合我们的要求，可以在安装前通过 brew seach 模糊查询下 具体的软件名称： ➜ ~ brew search iterm --cask ==\u003e Casks font-ia-writer-mono iterm2-legacy zterm iterm2 ✔ iterm2-nightly iterm2-beta therm 在确认了具体的软件名称后，可以通过 brew info 查看更为详细的软件信息，在这里会告诉软件的具体名称和介绍 ➜ ~ brew info iterm2 iterm2: 3.4.15 (auto_updates) https://www.iterm2.com/ /opt/homebrew/Caskroom/iterm2/3.4.15 (119B) From: https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/iterm2.rb ==\u003e Name iTerm2 ==\u003e Description Terminal emulator as alternative to Apple's Terminal app ==\u003e Artifacts iTerm.app (App) ==\u003e Analytics install: 25,001 (30 days), 91,481 (90 days), 335,711 (365 days) OK，以上确认后，就可以正常安装了 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:4:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#brew-cask"},{"categories":null,"content":" 5. brew cucu 是 Cask 软件下的另一个优质的辅助工具，全称 brew-cask-upgrade 可以帮您检测全部 brew install --cask 的软件的版本更新情况 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:5:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#brew-cu"},{"categories":null,"content":" 5.1 cu 的安装 Github https://github.com/buo/homebrew-cask-upgrade ➜ ~ brew tap buo/cask-upgrade ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:5:1","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#cu-的安装"},{"categories":null,"content":" 5.2 使用说明 ➜ ~ brew cu # 简单即可检测所有软件的更新情况 ==\u003e Options Include auto-update (-a): false Include latest (-f): false ==\u003e Updating Homebrew Already up-to-date. ==\u003e Finding outdated apps Cask Current Latest A/U Result 1/62 another-redis-desktop-manager 1.5.2 1.5.5 [OUTDATED] 2/62 anydesk 6.3.3 6.5.0 [OUTDATED] 3/62 authy 1.9.0 2.1.0 Y [ PASS ] 4/62 betterdummy 1.0.13 1.1.12 Y [ PASS ] 5/62 bob 0.7.0 0.8.1 Y [ PASS ] 6/62 cakebrew 1.3 1.3 Y [ PASS ] 7/62 clipy 1.2.1 1.2.1 [ OK ] 8/62 dash 6.2.0 6.2.3 Y [ PASS ] 9/62 devtoys 0.0.10 0.0.10 [ OK ] 10/62 feishu 5.1.5 5.11.5 Y [ PASS ] 11/62 figma 112.2.0 114.3.0 Y [ PASS ] 12/62 firefox 94.0.2 99.0.1 Y [ PASS ] 13/62 folx 5.25 5.26 Y [ PASS ] 14/62 font-fira-code 6.2 6.2 [ OK ] 15/62 forticlient-vpn 7.0 7.0 [ OK ] 16/62 gitter 1.177 1.177 [ OK ] 17/62 iina 1.2.0 1.2.0 Y [ PASS ] 18/62 iina-plus 0.6.5 0.6.6 [OUTDATED] 19/62 imazing 2.14.6 2.14.8 Y [ PASS ] 20/62 iterm2 3.4.15 3.4.15 Y [ PASS ] 21/62 jellybeansoup-netflix 1.0.5 1.0.5 [ OK ] 22/62 jetbrains-toolbox 1.22 1.23 Y [ PASS ] 23/62 kap 3.4.2 3.5.4 Y [ PASS ] 24/62 keyboardholder 1.5.5 1.6.1 [OUTDATED] 25/62 kite 0.20210610.0 0.20210610.0 Y [ PASS ] 26/62 logitech-options 9.40.75 9.50.122 Y [ PASS ] 27/62 maccy 0.22.0 0.22.2 Y [ PASS ] 28/62 microsoft-remote-desktop 10.7.0 10.7.6 Y [ PASS ] 29/62 netnewswire 6.1 6.1 Y [ PASS ] 30/62 notable 1.8.4 1.8.4 Y [ PASS ] 31/62 notion 2.0.18 2.0.20 Y [ PASS ] 32/62 obsidian 0.14.6 0.14.6 Y [ PASS ] 33/62 one-switch 1.23 1.25 [OUTDATED] 34/62 openconnect-gui 1.5.3 1.5.3 [ OK ] 35/62 openvpn-connect 3.3.2 3.3.5 [OUTDATED] 36/62 oss-browser 1.16.0 1.16.0 [ OK ] 37/62 picgo 2.3.0 2.3.0 [ OK ] 38/62 playcover 0.9.2 1.0.0 [OUTDATED] 39/62 postman 9.1.3 9.16.0 Y [ PASS ] 40/62 proxyman 3.3.0 3.4.0 Y [ PASS ] 41/62 resilio-sync 2.7.3 2.7.3 Y [ PASS ] 42/62 sensei 1.5.1 1.5.2 Y [ PASS ] 43/62 shimo 5.0.4 5.0.4 Y [ PASS ] 44/62 shuttle 1.2.9 1.2.9 [ OK ] 45/62 skype 8.79.0.92 8.83.0.408 Y [ PASS ] 46/62 slack-beta 4.23.0 4.26.0 Y [ PASS ] 47/62 sourcetree 4.1.7 4.1.8 Y [ PASS ] 48/62 spotify 1.1.73.517 1.1.84.716 Y [ PASS ] 49/62 steam 4.0 4.0 Y [ PASS ] 50/62 sunloginclient 11.0.1.39931 12.5.0.45236 [OUTDATED] 51/62 switchkey 1.1.3 1.1.3 [ OK ] 52/62 telegram 8.3 8.7 Y [ PASS ] 53/62 tencent-lemon 5.0.7 5.0.7 Y [ PASS ] 54/62 tencent-meeting 2.20.2.413 3.7.7.457 Y [ PASS ] 55/62 typora 1.0.2 1.2.4 Y [ PASS ] 56/62 upic 0.21.1 0.21.1 [ OK ] 57/62 utm-beta 3.1.5 3.2.0 [OUTDATED] 58/62 visual-studio-code-insiders 1.63.0 latest [ OK ] 59/62 whatsapp 2.2204.13 2.2214.12 Y [ PASS ] 60/62 wireshark 3.4.9 3.6.3 Y [ PASS ] 61/62 yesplaymusic 0.4.3 0.4.3 [ OK ] 62/62 zoom 5.8.4.2421 5.10.4.6592 Y [ PASS ] ==\u003e Found outdated apps Cask Current Latest A/U Result 1/9 another-redis-desktop-manager 1.5.2 1.5.5 [OUTDATED] 2/9 anydesk 6.3.3 6.5.0 [OUTDATED] 3/9 iina-plus 0.6.5 0.6.6 [OUTDATED] 4/9 keyboardholder 1.5.5 1.6.1 [OUTDATED] 5/9 one-switch 1.23 1.25 [OUTDATED] 6/9 openvpn-connect 3.3.2 3.3.5 [OUTDATED] 7/9 playcover 0.9.2 1.0.0 [OUTDATED] 8/9 sunloginclient 11.0.1.39931 12.5.0.45236 [OUTDATED] 9/9 utm-beta 3.1.5 3.2.0 [OUTDATED] Do you want to upgrade 9 apps or enter [i]nteractive mode [y/i/N]? 可以根据提示输入然后选择是否更新： y 全部更新，后续不再确认 i 依次咨询是否要更新 N 全部不更新，退出 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:5:2","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#使用说明"},{"categories":null,"content":" 6. brew masmas 是一个帮助在命令行下完成 Mac App Store 软件安装和查询的工具，使用起来也是非常的简单，但相对于 cask 低了很多，可以作为了解， 安装方式如下： ➜ ~ brew install mas 支持的命令也基本覆盖了常用需求 ➜ ~ mas list ➜ ~ mas search xcode ➜ ~ mas install 407963104 ➜ ~ mas outdated ➜ ~ mas upgrade 当然，mas 也支持了 appstore 的账号登录；不过目前看到 mas 的社区更新不怎么积极，目前仍旧未适配 最新的系统，谨慎选择。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:6:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#brew-mas"},{"categories":null,"content":" 7. brew 软件的备份和恢复随着对系统使用的不断加深，我们已经在一台电脑上建立一套对自己来说的软件生态，所以在更换电脑时，需要安装那些软件是非常头疼的一个事情； 如果都是 GUI 软件还好，但研发同学的电脑其实会有大量的 forumal 软件，重装起来还是非常麻烦的。 所以，这里给大家推荐 homebrew-bundle 来帮助迁移电脑时，快速备份和恢复你的软件环境；整个使用的过程也是非常的便捷。 # 执行 bundle dump 备份软件清单到 Brewfile brew bundle dump --describe --force --file=\"~/Desktop/Brewfile\" # --describe：为列表中的命令行工具加上说明性文字，可以参照 brew info package 根据你电脑的软件多少，这大概会花费几十秒的时间，然后你会得到一份你的电脑软件清单，这里也分享下我的清单 ➜ ~ cat Desktop/Brewfile tap \"bigwig-club/brew\" tap \"buo/cask-upgrade\" tap \"heroku/brew\" ... # Mozilla CA certificate store brew \"ca-certificates\" # GNU database manager brew \"gdbm\" # Automate deployment, configuration, and upgrading brew \"ansible\" # Library and utilities for processing GIFs brew \"giflib\" ... # Redis desktop manager cask \"another-redis-desktop-manager\" # Allows connection to a computer remotely cask \"anydesk\" # Two-factor authentication software cask \"authy\" # Dummy Display for Apple Silicon Macs to achieve custom resolutions cask \"betterdummy\" ... mas \"AngryBirdsReloaded\", id: 1539172625 mas \"Asphalt 8+\", id: 1563005359 mas \"BombSquad\", id: 416482767 mas \"Bridge Constructor+\", id: 1587908263 ... 整个备份的内容包含 4 个部分，也正好包含了，我上面讲到的所有 brew 命令 brew tap 中的软件库 brew 安装的命令行工具 brew cask 安装的 App mac App Store 安装的 App 这里也就是用上面的 mas ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:7:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#brew-软件的备份和恢复"},{"categories":null,"content":" 7.1 快速恢复软件以下是你的新 Mac 上要做的事情，你需要把自己的 Brewfile 转移到新的 Mac 上，软件需要安装基础的工具: # 安装 Homebrew ➜ ~ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" # 安装 mas ➜ ~ brew install mas 基础环境安装好了，之后，就可以进行软件恢复啦 # 批量安装软件 ➜ ~ brew bundle --file=\"~/Desktop/Brewfile\" 软件实际恢复的速度取决于你的网络状态，不过 brew bundle 可以重复执行，你是可以中断恢复的。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:7:1","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#快速恢复软件"},{"categories":null,"content":" 8. 结语好了，以上就是我关于 Mac 下软件安装神器 brew 的使用分享啦，这里大概涵盖了你 95% 的使用需求，如果你发现仍有疑问，欢迎与我取得联系，或者使用 Google 解决剩下的问题。 文档内容，可能会随着时间推移有不适用的情况，若遇到冲突以官方说明为准。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/:8:0","series":null,"tags":["Mac"],"title":"Mac 下 Homebrew 的使用","uri":"https://samzong.me/mac%E4%B8%8Bhomebrew%E7%9A%84%E4%BD%BF%E7%94%A8/#结语"},{"categories":null,"content":"以前手抖买了台 HKC 32 寸 2K 显示器, 接上 MacBook 发现原生的分辨率设置在 2K 显示器上字体很小, 换成 1080P 分辨率显示效果又特别模糊. 上网查了一下发现可以为 MacBook 强行开启 HiDPI. 下文的教程结合了 Github 上用户 ZeRo° Xu 在 一键开启 HiDPI 脚本 里的 Github Issue 和一篇博文 《为 Mac 连接的 2k 显示器开启 HiDPI》. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:0:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#"},{"categories":null,"content":" 1. 什么是 HiDPI 引用自 Github 用户 ZeRo° Xu : 它使用横纵 2 个物理像素也就是 4 个物理像素来显示 1 个像素区域, 结果就是图像的–细节得到翻倍, 更清晰, 边缘更平滑–. 拿 13 寸的 MacBook Pro 举例, 它的屏幕物理分辨率是 2560 x 1600, 所以原生的 HiDPI 分辨率就是 1280x800. 更高的一档 1440x900 HiDPI 缩放分辨率, 则是虚拟出一个 2880x1800 的分辨率, 再进行软缩放输入. 所以你能发现苹果的电脑总是有很高的分辨率. 好了, 既然你的屏幕是 1080p, 本身就没有那么多像素去合成 HiDPI, 如果以原生的显示计算, 你这屏幕的 1080p 分辨率应该是 960x540, 这么低的分辨率你是没法用的. 这个脚本的功能就是虚拟出比你的屏幕物理分辨率更高的假分辨率……如果你要开启 1080p 的 HiDPI 分辨率, 就虚拟一个 3840 x 2160 的假分辨率, 然后 macOS 会使用 4 个像素来显示 1 个像素区域, 也就是和你物理分辨率一样的 1080p 分辨率. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:1:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#什么是-hidpi"},{"categories":null,"content":" 2. 自动配置 HiDPI 上文 链接 里提到一键配置脚本, 你不妨先按照脚本的步骤开启 HiDPI 试试. 但是脚本并没有适配所有显示器的情况 (至少我的 Dell P2416D 使用后无效) , 所以就有了下面的步骤. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:2:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#自动配置-hidpi"},{"categories":null,"content":" 3. 手动配置 HiDPI 本教程测试环境: 笔记本：MacBook Pro (Retina, 15-inch, Mid 2018) 显示器：HKC 32寸2K 操作系统：MacOS Catalina (Version 10.15.3) ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:3:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#手动配置-hidpi"},{"categories":null,"content":" 4. 0. 安装 RDM相信很多人已经装过这个工具了, 它是用来修改显示分辨率的, 如果没装, 请在 RDM 下载页面 安装它. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:4:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#0-安装-rdm"},{"categories":null,"content":" 5. 1. 关闭 macOS 的 SIPSIP 全称为「System Integrity Protection」即「系统完整性保护」, 是苹果公司为防止你胡乱篡改系统文件用的保护机制, 请先按照下面步骤把它关闭, 以便后续操作: 关机（最好先手机拍个照把这 4 步记录下来） 按command（⌘）+ R+电源键开机，自动进入恢复模式 选择上边菜单栏的实用工具中的终端 输入命令csrutil disable 最后终端显示 「Successfully……」 等一大堆文字就说明你成功了. 你可以输入 reboot 重启. 等下文的全部设置都完成后, 你如果想恢复 SIP, 就重复步骤 1 到 3, 在第 4 步输入 csrutil enable 就好了. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:5:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#1-关闭-macos-的-sip"},{"categories":null,"content":" 6. 2. 开启 macOS 的 HiDPI 选项再次重启后进入系统, 打开终端输入 sudo defaults write /Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled -bool true ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:6:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#2-开启-macos-的-hidpi-选项"},{"categories":null,"content":" 7. 3. 查询你的外接显示器的编号 这一步相当重要, 先介绍两个命令 ioreg -l | grep \"DisplayVendorID\" ioreg -l | grep \"DisplayProductID\" 这两条命令用来查询你的显示器供应商 ID DisplayVendorID 和产品 ID DisplayProductID. 接下来你要找到你的显示器对应的 DisplayVendorID 和 DisplayProductID: 拔掉显示器的 HDMI 或者 DP 线 分别输入上面两个命令之后return(↩)，每个命令会返回一个带有数字的结果。那个数字就是 MacBook 默认的DisplayVendorID和DisplayProductID了 接入显示器 再分别输入那两个命令，每个命令会分别返回两条带有数字的结果。对比刚才 MacBook 默认的结果，另一个数字就是你显示器的DisplayVendorID和DisplayProductID了 把这两个数字分别转成对应的 16 进制数，用这个 进制转换工具。 现在, 回到桌面, 新建一个文件夹命名为 DisplayVendorID-[你刚才查到的 DisplayVendorID 的 16 进制数], 例如 DisplayVendorID-10ac. 之后在这个刚建好的文件夹下增加一个文件, 命名为 DisplayProductID-[你刚才查到的 DisplayProductID 的 16 进制数], 例如 DisplayProductID-a0c3. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:7:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#3-查询你的外接显示器的编号"},{"categories":null,"content":" 7.1 4. 为你的显示器生成 plist 文件到 这个网站 , 在左侧的空里分别输入显示器型号, DisplayProductID 和 DisplayVendorID, 注意填 16 进制的数字, 并且检查下后边 10 进制的数字是不是和你刚才命令查到的一致. 如果需要添加自己额外的分辨率, 直接在下边新建一条分辨率配置就行. 最后, 复制右边生成 XML 格式文本, 粘贴到刚才新建的文件里. (也可以直接从网站下载文件, 去掉文件名后缀 .plist ) XML 文本类似下边这样: \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e \u003cplist version=\"1.0\"\u003e \u003cdict\u003e \u003ckey\u003eDisplayProductID\u003c/key\u003e \u003cinteger\u003e41155\u003c/integer\u003e \u003ckey\u003eDisplayVendorID\u003c/key\u003e \u003cinteger\u003e4268\u003c/integer\u003e \u003ckey\u003escale-resolutions\u003c/key\u003e \u003carray\u003e \u003cdata\u003eAAAKAAAABaAAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAFAAAAAtAAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAPAAAACHAAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAHgAAABDgAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAMgAAABwgAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAGQAAAA4QAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAKAgAABaAAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAKrAAABgAAAAABACAAAA==\u003c/data\u003e \u003cdata\u003eAAAFVgAAAwAAAAABACAAAA==\u003c/data\u003e \u003c/array\u003e \u003c/dict\u003e \u003c/plist\u003e ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:7:1","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#4-为你的显示器生成-plist-文件"},{"categories":null,"content":" 7.2 4. 复制 plist 配置文件到系统配置目录这一步就是把刚才新建的配置文件复制到你系统目录里, 你直接复制通常会提示你系统目录是「只读」的, 不允许你胡作非为. 所以你先要在终端执行下面的命令: sudo mount -uw / 这样, 你就可以复制到系统的文件夹了. (这个命令重启后失效) 接下来打开系统文件夹/System/Library/Displays/Contents/Resources/Overrides/, 你会发现一大堆跟你刚才文件夹命名相似的目录. 把你新建的文件夹丢进去, 和它们混在一起, 假装它原来就是其中一员. 重启. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:7:2","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#4-复制-plist-配置文件到系统配置目录"},{"categories":null,"content":" 7.3 5. 修改分辨率重启之后又进入系统, 首先打开 RDM, 你会在菜单栏看见它: Main Display 和 Display 2 就分别是你的外接显示器和 MacBook 的显示器分辨率设置 (位置有可能对调, 自己尝试一下) . 带有 ⚡️ 符号的分辨率设置项就是开启 HiDPI 后新增出来的. 如果你像我一样是 24 寸 2K 显示器, 可以给显示器选择 1920x1080⚡️那个配置. 是不是比原生分辨率的 UI 和字体更大更清晰了? ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:7:3","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#5-修改分辨率"},{"categories":null,"content":" 8. 小结本文教你强行开启 MacBook 的 HiDPI 设置, 并针对 2K 显示器新增了配置文件到系统配置目录里, 最后用 RDM 自由设置适合你显示器的分辨率. 附带问题 用本文的方式开启 HiDPI, 合上 Mac 屏幕, 外接显示器黑屏. 将外接显示器分辨率切换到屏幕原始分辨率后可以正常地仅使用外接显示器, 原因未知. 因对我的工作方式没有影响, 没有继续研究下去. ","date":"0001-01-01","objectID":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/:8:0","series":null,"tags":["mac"],"title":"MacOS 10.15 开启 HiDPI","uri":"https://samzong.me/macos-10.15-%E5%BC%80%E5%90%AF-hidpi/#小结"},{"categories":["mac"],"content":"Mac 上系统语言设置成英文查看起来是最舒适的，所以我很早就将系统语言改成英文，但是在自身英语水平有限，应对基本的单词没有问题，但是在查看例如Word、PowerPoint这类应用时，有大量的选项大脑转化速度较慢，影响工作效率，所以有时在做PPT时，不得已要将系统切换到中文，这对我来说是一件很麻烦的事情，但是今天在网上找到一个帖子原文，其实一个命令就可以搞定我的问题，修改某一软件的默认语言。 0.0.0.1 Command defaults write '{AppName}' AppleLanguages '(\"Your choose language\")' 这不会影响到我们其他软件的使用。 0.0.0.2 Tips:我在一次切换Outlook语言时使用上面的命令不能生效，经过研究稍微改造了一下命令： defaults write com.microsoft.Outlook AppleLanguages -array zh 0.0.0.3 例子 修改Microsoft Office Applocation. defaults write com.microsoft.Word AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Excel AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Powerpoint AppleLanguages '(\"zh-CN\")' Mac 自带地图应 Mac 自带地图非常的好用，但是中文会更适合我们的查看和标记 defaults write com.apple.Maps AppleLanguages '(\"zh-CN\")' Tip：如果不知道程序名称时，可以在com.使用三次Tab键来查找程序名称. 0.0.0.4 结语如上操作，仅适合本身支持中英文的应用程序，如果程序本身不带有中文或者英文是无法使用的，当然有些应用也内置了语言切换按钮，可以优先使用程序自带的设置选项。 0.0.0.5 去除设置ok，在我们增加了特定程序语言环境之后，如果手动切换系统语言之后，已设置的程序语言环境仍保留我们的手动设置情境，如若不需要，可以采用以下命令去除。 defaults delete '{AppName}' AppleLanguages 参考链接：http://www.viblue.com/wiki/469264501.html ","date":"0001-01-01","objectID":"https://samzong.me/mactips-choose-apps-defaults-language/:0:0","series":null,"tags":["mac"],"title":"MacTips 单独设置程序语言","uri":"https://samzong.me/mactips-choose-apps-defaults-language/#"},{"categories":["mac"],"content":"Mac 上系统语言设置成英文查看起来是最舒适的，所以我很早就将系统语言改成英文，但是在自身英语水平有限，应对基本的单词没有问题，但是在查看例如Word、PowerPoint这类应用时，有大量的选项大脑转化速度较慢，影响工作效率，所以有时在做PPT时，不得已要将系统切换到中文，这对我来说是一件很麻烦的事情，但是今天在网上找到一个帖子原文，其实一个命令就可以搞定我的问题，修改某一软件的默认语言。 0.0.0.1 Command defaults write '{AppName}' AppleLanguages '(\"Your choose language\")' 这不会影响到我们其他软件的使用。 0.0.0.2 Tips:我在一次切换Outlook语言时使用上面的命令不能生效，经过研究稍微改造了一下命令： defaults write com.microsoft.Outlook AppleLanguages -array zh 0.0.0.3 例子 修改Microsoft Office Applocation. defaults write com.microsoft.Word AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Excel AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Powerpoint AppleLanguages '(\"zh-CN\")' Mac 自带地图应 Mac 自带地图非常的好用，但是中文会更适合我们的查看和标记 defaults write com.apple.Maps AppleLanguages '(\"zh-CN\")' Tip：如果不知道程序名称时，可以在com.使用三次Tab键来查找程序名称. 0.0.0.4 结语如上操作，仅适合本身支持中英文的应用程序，如果程序本身不带有中文或者英文是无法使用的，当然有些应用也内置了语言切换按钮，可以优先使用程序自带的设置选项。 0.0.0.5 去除设置ok，在我们增加了特定程序语言环境之后，如果手动切换系统语言之后，已设置的程序语言环境仍保留我们的手动设置情境，如若不需要，可以采用以下命令去除。 defaults delete '{AppName}' AppleLanguages 参考链接：http://www.viblue.com/wiki/469264501.html ","date":"0001-01-01","objectID":"https://samzong.me/mactips-choose-apps-defaults-language/:0:0","series":null,"tags":["mac"],"title":"MacTips 单独设置程序语言","uri":"https://samzong.me/mactips-choose-apps-defaults-language/#command"},{"categories":["mac"],"content":"Mac 上系统语言设置成英文查看起来是最舒适的，所以我很早就将系统语言改成英文，但是在自身英语水平有限，应对基本的单词没有问题，但是在查看例如Word、PowerPoint这类应用时，有大量的选项大脑转化速度较慢，影响工作效率，所以有时在做PPT时，不得已要将系统切换到中文，这对我来说是一件很麻烦的事情，但是今天在网上找到一个帖子原文，其实一个命令就可以搞定我的问题，修改某一软件的默认语言。 0.0.0.1 Command defaults write '{AppName}' AppleLanguages '(\"Your choose language\")' 这不会影响到我们其他软件的使用。 0.0.0.2 Tips:我在一次切换Outlook语言时使用上面的命令不能生效，经过研究稍微改造了一下命令： defaults write com.microsoft.Outlook AppleLanguages -array zh 0.0.0.3 例子 修改Microsoft Office Applocation. defaults write com.microsoft.Word AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Excel AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Powerpoint AppleLanguages '(\"zh-CN\")' Mac 自带地图应 Mac 自带地图非常的好用，但是中文会更适合我们的查看和标记 defaults write com.apple.Maps AppleLanguages '(\"zh-CN\")' Tip：如果不知道程序名称时，可以在com.使用三次Tab键来查找程序名称. 0.0.0.4 结语如上操作，仅适合本身支持中英文的应用程序，如果程序本身不带有中文或者英文是无法使用的，当然有些应用也内置了语言切换按钮，可以优先使用程序自带的设置选项。 0.0.0.5 去除设置ok，在我们增加了特定程序语言环境之后，如果手动切换系统语言之后，已设置的程序语言环境仍保留我们的手动设置情境，如若不需要，可以采用以下命令去除。 defaults delete '{AppName}' AppleLanguages 参考链接：http://www.viblue.com/wiki/469264501.html ","date":"0001-01-01","objectID":"https://samzong.me/mactips-choose-apps-defaults-language/:0:0","series":null,"tags":["mac"],"title":"MacTips 单独设置程序语言","uri":"https://samzong.me/mactips-choose-apps-defaults-language/#tips"},{"categories":["mac"],"content":"Mac 上系统语言设置成英文查看起来是最舒适的，所以我很早就将系统语言改成英文，但是在自身英语水平有限，应对基本的单词没有问题，但是在查看例如Word、PowerPoint这类应用时，有大量的选项大脑转化速度较慢，影响工作效率，所以有时在做PPT时，不得已要将系统切换到中文，这对我来说是一件很麻烦的事情，但是今天在网上找到一个帖子原文，其实一个命令就可以搞定我的问题，修改某一软件的默认语言。 0.0.0.1 Command defaults write '{AppName}' AppleLanguages '(\"Your choose language\")' 这不会影响到我们其他软件的使用。 0.0.0.2 Tips:我在一次切换Outlook语言时使用上面的命令不能生效，经过研究稍微改造了一下命令： defaults write com.microsoft.Outlook AppleLanguages -array zh 0.0.0.3 例子 修改Microsoft Office Applocation. defaults write com.microsoft.Word AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Excel AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Powerpoint AppleLanguages '(\"zh-CN\")' Mac 自带地图应 Mac 自带地图非常的好用，但是中文会更适合我们的查看和标记 defaults write com.apple.Maps AppleLanguages '(\"zh-CN\")' Tip：如果不知道程序名称时，可以在com.使用三次Tab键来查找程序名称. 0.0.0.4 结语如上操作，仅适合本身支持中英文的应用程序，如果程序本身不带有中文或者英文是无法使用的，当然有些应用也内置了语言切换按钮，可以优先使用程序自带的设置选项。 0.0.0.5 去除设置ok，在我们增加了特定程序语言环境之后，如果手动切换系统语言之后，已设置的程序语言环境仍保留我们的手动设置情境，如若不需要，可以采用以下命令去除。 defaults delete '{AppName}' AppleLanguages 参考链接：http://www.viblue.com/wiki/469264501.html ","date":"0001-01-01","objectID":"https://samzong.me/mactips-choose-apps-defaults-language/:0:0","series":null,"tags":["mac"],"title":"MacTips 单独设置程序语言","uri":"https://samzong.me/mactips-choose-apps-defaults-language/#例子"},{"categories":["mac"],"content":"Mac 上系统语言设置成英文查看起来是最舒适的，所以我很早就将系统语言改成英文，但是在自身英语水平有限，应对基本的单词没有问题，但是在查看例如Word、PowerPoint这类应用时，有大量的选项大脑转化速度较慢，影响工作效率，所以有时在做PPT时，不得已要将系统切换到中文，这对我来说是一件很麻烦的事情，但是今天在网上找到一个帖子原文，其实一个命令就可以搞定我的问题，修改某一软件的默认语言。 0.0.0.1 Command defaults write '{AppName}' AppleLanguages '(\"Your choose language\")' 这不会影响到我们其他软件的使用。 0.0.0.2 Tips:我在一次切换Outlook语言时使用上面的命令不能生效，经过研究稍微改造了一下命令： defaults write com.microsoft.Outlook AppleLanguages -array zh 0.0.0.3 例子 修改Microsoft Office Applocation. defaults write com.microsoft.Word AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Excel AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Powerpoint AppleLanguages '(\"zh-CN\")' Mac 自带地图应 Mac 自带地图非常的好用，但是中文会更适合我们的查看和标记 defaults write com.apple.Maps AppleLanguages '(\"zh-CN\")' Tip：如果不知道程序名称时，可以在com.使用三次Tab键来查找程序名称. 0.0.0.4 结语如上操作，仅适合本身支持中英文的应用程序，如果程序本身不带有中文或者英文是无法使用的，当然有些应用也内置了语言切换按钮，可以优先使用程序自带的设置选项。 0.0.0.5 去除设置ok，在我们增加了特定程序语言环境之后，如果手动切换系统语言之后，已设置的程序语言环境仍保留我们的手动设置情境，如若不需要，可以采用以下命令去除。 defaults delete '{AppName}' AppleLanguages 参考链接：http://www.viblue.com/wiki/469264501.html ","date":"0001-01-01","objectID":"https://samzong.me/mactips-choose-apps-defaults-language/:0:0","series":null,"tags":["mac"],"title":"MacTips 单独设置程序语言","uri":"https://samzong.me/mactips-choose-apps-defaults-language/#结语"},{"categories":["mac"],"content":"Mac 上系统语言设置成英文查看起来是最舒适的，所以我很早就将系统语言改成英文，但是在自身英语水平有限，应对基本的单词没有问题，但是在查看例如Word、PowerPoint这类应用时，有大量的选项大脑转化速度较慢，影响工作效率，所以有时在做PPT时，不得已要将系统切换到中文，这对我来说是一件很麻烦的事情，但是今天在网上找到一个帖子原文，其实一个命令就可以搞定我的问题，修改某一软件的默认语言。 0.0.0.1 Command defaults write '{AppName}' AppleLanguages '(\"Your choose language\")' 这不会影响到我们其他软件的使用。 0.0.0.2 Tips:我在一次切换Outlook语言时使用上面的命令不能生效，经过研究稍微改造了一下命令： defaults write com.microsoft.Outlook AppleLanguages -array zh 0.0.0.3 例子 修改Microsoft Office Applocation. defaults write com.microsoft.Word AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Excel AppleLanguages '(\"zh-CN\")' defaults write com.microsoft.Powerpoint AppleLanguages '(\"zh-CN\")' Mac 自带地图应 Mac 自带地图非常的好用，但是中文会更适合我们的查看和标记 defaults write com.apple.Maps AppleLanguages '(\"zh-CN\")' Tip：如果不知道程序名称时，可以在com.使用三次Tab键来查找程序名称. 0.0.0.4 结语如上操作，仅适合本身支持中英文的应用程序，如果程序本身不带有中文或者英文是无法使用的，当然有些应用也内置了语言切换按钮，可以优先使用程序自带的设置选项。 0.0.0.5 去除设置ok，在我们增加了特定程序语言环境之后，如果手动切换系统语言之后，已设置的程序语言环境仍保留我们的手动设置情境，如若不需要，可以采用以下命令去除。 defaults delete '{AppName}' AppleLanguages 参考链接：http://www.viblue.com/wiki/469264501.html ","date":"0001-01-01","objectID":"https://samzong.me/mactips-choose-apps-defaults-language/:0:0","series":null,"tags":["mac"],"title":"MacTips 单独设置程序语言","uri":"https://samzong.me/mactips-choose-apps-defaults-language/#去除设置"},{"categories":["mac"],"content":"在平时的沟通中经常有需要用到分享一个连续的操作等，在很多时候截图不能满足我的需求，录制视频文件的话呢，文件过大，不同平台限制过多是一个很麻烦的视频，所以录制GIF是一个非常好的解决办法，今天给大家推荐两款软件，关于录制GIF和GIF编辑。 0.0.1 录制工具(1) KapKap是一款轻量级开源的GIF录制工具，这意味它是免费简单易用；你可以从官网下载。官网 安装完成，启动Kap，它是以一个圆环的形式显示在状态栏上，所有的界面都在这里，你可以点击红框直接开始录制，点击后你的屏幕上会出现一个虚线框，你可以通过拖动四角调整大小。 确定好录制范围之后，这时你发现Kap上红色录制按钮一个变成一个红色实心圆，再次单击即可开始录制。 在你操作完成之后，再次单击，即可结束录制。 0.0.2 录制工具(2) MacApp：QuickTime Player以上管理Kap的使用GIF录制我是用过Mac自带的QuickTime Player录制，教程可以直接看 @JasonZone 的教程 链接 0.0.3 GIF编辑在@JasonZone 最后使用的是一个网站进行了从mov转换为gif格式的操作，这里推荐一个Mac应用 Video to Gif Maker，可以批量进行多个GIF文件转换，也支持在GIF增加文字或图片，这很实用。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/:0:0","series":null,"tags":["mac"],"title":"MacTips 如何快速录制GiF小视频","uri":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/#"},{"categories":["mac"],"content":"在平时的沟通中经常有需要用到分享一个连续的操作等，在很多时候截图不能满足我的需求，录制视频文件的话呢，文件过大，不同平台限制过多是一个很麻烦的视频，所以录制GIF是一个非常好的解决办法，今天给大家推荐两款软件，关于录制GIF和GIF编辑。 0.0.1 录制工具(1) KapKap是一款轻量级开源的GIF录制工具，这意味它是免费简单易用；你可以从官网下载。官网 安装完成，启动Kap，它是以一个圆环的形式显示在状态栏上，所有的界面都在这里，你可以点击红框直接开始录制，点击后你的屏幕上会出现一个虚线框，你可以通过拖动四角调整大小。 确定好录制范围之后，这时你发现Kap上红色录制按钮一个变成一个红色实心圆，再次单击即可开始录制。 在你操作完成之后，再次单击，即可结束录制。 0.0.2 录制工具(2) MacApp：QuickTime Player以上管理Kap的使用GIF录制我是用过Mac自带的QuickTime Player录制，教程可以直接看 @JasonZone 的教程 链接 0.0.3 GIF编辑在@JasonZone 最后使用的是一个网站进行了从mov转换为gif格式的操作，这里推荐一个Mac应用 Video to Gif Maker，可以批量进行多个GIF文件转换，也支持在GIF增加文字或图片，这很实用。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/:0:0","series":null,"tags":["mac"],"title":"MacTips 如何快速录制GiF小视频","uri":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/#录制工具1-kap"},{"categories":["mac"],"content":"在平时的沟通中经常有需要用到分享一个连续的操作等，在很多时候截图不能满足我的需求，录制视频文件的话呢，文件过大，不同平台限制过多是一个很麻烦的视频，所以录制GIF是一个非常好的解决办法，今天给大家推荐两款软件，关于录制GIF和GIF编辑。 0.0.1 录制工具(1) KapKap是一款轻量级开源的GIF录制工具，这意味它是免费简单易用；你可以从官网下载。官网 安装完成，启动Kap，它是以一个圆环的形式显示在状态栏上，所有的界面都在这里，你可以点击红框直接开始录制，点击后你的屏幕上会出现一个虚线框，你可以通过拖动四角调整大小。 确定好录制范围之后，这时你发现Kap上红色录制按钮一个变成一个红色实心圆，再次单击即可开始录制。 在你操作完成之后，再次单击，即可结束录制。 0.0.2 录制工具(2) MacApp：QuickTime Player以上管理Kap的使用GIF录制我是用过Mac自带的QuickTime Player录制，教程可以直接看 @JasonZone 的教程 链接 0.0.3 GIF编辑在@JasonZone 最后使用的是一个网站进行了从mov转换为gif格式的操作，这里推荐一个Mac应用 Video to Gif Maker，可以批量进行多个GIF文件转换，也支持在GIF增加文字或图片，这很实用。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/:0:0","series":null,"tags":["mac"],"title":"MacTips 如何快速录制GiF小视频","uri":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/#录制工具2-macappquicktime-player"},{"categories":["mac"],"content":"在平时的沟通中经常有需要用到分享一个连续的操作等，在很多时候截图不能满足我的需求，录制视频文件的话呢，文件过大，不同平台限制过多是一个很麻烦的视频，所以录制GIF是一个非常好的解决办法，今天给大家推荐两款软件，关于录制GIF和GIF编辑。 0.0.1 录制工具(1) KapKap是一款轻量级开源的GIF录制工具，这意味它是免费简单易用；你可以从官网下载。官网 安装完成，启动Kap，它是以一个圆环的形式显示在状态栏上，所有的界面都在这里，你可以点击红框直接开始录制，点击后你的屏幕上会出现一个虚线框，你可以通过拖动四角调整大小。 确定好录制范围之后，这时你发现Kap上红色录制按钮一个变成一个红色实心圆，再次单击即可开始录制。 在你操作完成之后，再次单击，即可结束录制。 0.0.2 录制工具(2) MacApp：QuickTime Player以上管理Kap的使用GIF录制我是用过Mac自带的QuickTime Player录制，教程可以直接看 @JasonZone 的教程 链接 0.0.3 GIF编辑在@JasonZone 最后使用的是一个网站进行了从mov转换为gif格式的操作，这里推荐一个Mac应用 Video to Gif Maker，可以批量进行多个GIF文件转换，也支持在GIF增加文字或图片，这很实用。 ","date":"0001-01-01","objectID":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/:0:0","series":null,"tags":["mac"],"title":"MacTips 如何快速录制GiF小视频","uri":"https://samzong.me/mac%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%BD%95%E5%88%B6gif%E5%B0%8F%E8%A7%86%E9%A2%91/#gif编辑"},{"categories":["Windows"],"content":" 0.1 事件背景5月12日晚， WannaCry 蠕虫病毒在全球大肆爆发。据BBC、CNN等媒体报道，恶意攻击者利用 NSA（美国国家安全局）泄露的 Windows 0day 利用工具对99个国家实施了超过75000次攻击，主要影响SMB和RDP服务，主要影响了137、138、139、445端口。 目前已知已知的Windows版本包括但不限于一下都受影响： Windows NT Windows 2000 Windows XP Windows 2003 Windows Vista Windows 7 Windows 8 Windows 10 Windows 2008 Windows 2008 R2 Windows Server 2012 SP0 勒索者源头来自暗网，攻击具备兼容性、多语言支持，多个行业受到影响，国内高校网络系统沦为感染重灾区。据有关机构统计，目前国内每天有数万台机器遭到该蠕虫病毒袭击，国内的ATM机、火车站、自助终端、邮政、医院、政府办事终端、视频监控都可能遭受攻击。据报道，今日全国多地的中石油加油站无法进行网络支付，只能进行现金支付。中石油有关负责人表示，怀疑受到病毒攻击，具体情况还在核查。而截至目前，一些公安系统已经遭到入侵。 如果你也遇到了这样的问题，请不要担心，我在下面给出了如何修复这个漏洞的建议。 ","date":"0001-01-01","objectID":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/:0:1","series":null,"tags":["Windows"],"title":"Wannacry蠕虫病毒事件及修复方案","uri":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/#事件背景"},{"categories":["Windows"],"content":" 0.2 什么是比特币蠕虫病毒？这次攻击的始作俑者是一款名为“WannaCry”（中文名：想哭）的勒索病毒，带有加密功能，它利用 Windows 在 445 端口的安全漏洞潜入电脑并对多种文件类型加密并添加后缀(.onion)使用户无法打开，用户电脑存在文档被加密的情况，攻击者称需支付比特币解锁。(比特币是一种全球通用的互联网加密货币) ","date":"0001-01-01","objectID":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/:0:2","series":null,"tags":["Windows"],"title":"Wannacry蠕虫病毒事件及修复方案","uri":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/#什么是比特币蠕虫病毒"},{"categories":["Windows"],"content":" 0.3 漏洞验证 使用Win+R按键打开运行窗口，输入cmd，进入命令行工具，然后输入netstat -an 查看是否开放了对应的端口。 上图中的服务器就是开放了445端口，这有很大的风险可能会WannaCry 蠕虫病毒被攻击到，所以我们应该关掉对应端口，并修复漏洞。 ","date":"0001-01-01","objectID":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/:0:3","series":null,"tags":["Windows"],"title":"Wannacry蠕虫病毒事件及修复方案","uri":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/#漏洞验证"},{"categories":["Windows"],"content":" 0.4 漏洞修复 目前微软已发布补丁MS17-010修复了“永恒之蓝”攻击的系统漏洞，请尽快为电脑安装此补丁，网址为https://technet.microsoft.com/zh-cn/library/security/MS17-010 对于XP、2003等微软已不再提供安全更新的机器，推荐使用360“NSA武器库免疫工具”检测系统是否存在漏洞，并关闭受到漏洞影响的端口，可以避免遭到勒索软件等病毒的侵害，可以在360电脑安全管家中找到。 开启系统防火墙，利用系统防火墙的“高级设置”阻止外部对 445 端口进的访问（存在一定影响，该操作会影响使用 445 端口的服务）。 ","date":"0001-01-01","objectID":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/:0:4","series":null,"tags":["Windows"],"title":"Wannacry蠕虫病毒事件及修复方案","uri":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/#漏洞修复"},{"categories":["Windows"],"content":" 0.5 修复脚本如果以上方式都不能修复漏洞，大家可以使用我以下的批处理脚本文件来尝试关闭端口及服务，批处理禁用该漏洞可能利用到的端口，全版本通用，右键管理员启动即可，注意这需要打开Windows的防火墙。 net stop SCardSvr net stop SCPolicySvc sc config SCardSvr start=disabled sc config SCPolicySvc start=disabled net start MpsSvc sc config MpsSvc start=auto netsh advfirewall set allprofiles state on netsh advfirewall firewall add rule name=\"deny udp 137\" dir=in protocol=udp localport=137 action=block netsh advfirewall firewall add rule name=\"deny tcp 137\" dir=in protocol=tcp localport=137 action=block netsh advfirewall firewall add rule name=\"deny udp 138\" dir=in protocol=udp localport=138 action=block netsh advfirewall firewall add rule name=\"deny tcp 138\" dir=in protocol=tcp localport=138 action=block netsh advfirewall firewall add rule name=\"deny udp 139\" dir=in protocol=udp localport=139 action=block netsh advfirewall firewall add rule name=\"deny tcp 139\" dir=in protocol=tcp localport=139 action=block netsh advfirewall firewall add rule name=\"deny udp 445\" dir=in protocol=udp localport=445 action=block netsh advfirewall firewall add rule name=\"deny tcp 445\" dir=in protocol=tcp localport=445 action=block pause 我已经将脚本上传到百度云盘中，大家可以自行下载运行，注意解压缩Zip包之后的fix_WannaCry.bat 下载链接：https://pan.baidu.com/s/1gfceNRH ","date":"0001-01-01","objectID":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/:0:5","series":null,"tags":["Windows"],"title":"Wannacry蠕虫病毒事件及修复方案","uri":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/#修复脚本"},{"categories":["Windows"],"content":" 0.6 添加防火规则 打开控制面板中的Windows防火墙，并保证防火墙处于启用状态； 打开防火墙的高级设置； 在“入站规则”中新建一条规则，本地端口号选择445，操作选择阻止连接。 ","date":"0001-01-01","objectID":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/:0:6","series":null,"tags":["Windows"],"title":"Wannacry蠕虫病毒事件及修复方案","uri":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/#添加防火规则"},{"categories":["Windows"],"content":" 0.7 手动导入安全策略下载策略文件 https://share.weiyun.com/15b7bbd3f86c493a66721dd948a81c54 打开控制面板–管理工具-本地安全策略–IP安全策略 –\u003e所有任务–\u003e导入策略： 或者，通过Win+R，输入gpedit.msc ![539E3FA1-2A85-4B41-95BC-C32B82A5DA0D](/Users/Alex/Library/Containers/com.tencent.qq/Data/Library/Application Support/QQ/Users/573578678/QQ/Temp.db/539E3FA1-2A85-4B41-95BC-C32B82A5DA0D.png) ","date":"0001-01-01","objectID":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/:0:7","series":null,"tags":["Windows"],"title":"Wannacry蠕虫病毒事件及修复方案","uri":"https://samzong.me/wannacry%E8%A0%95%E8%99%AB%E7%97%85%E6%AF%92%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88/#手动导入安全策略"},{"categories":["Blog","Hexo"],"content":"同时演示下，如何嵌入 Youtube \u0026 Bilibili 的视频内容 Youtube Bilibili ","date":"0001-01-01","objectID":"https://samzong.me/%E9%9D%9E%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E7%9A%84%E4%BA%BA%E5%A6%82%E4%BD%95%E8%BD%AC%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%91%98/:0:0","series":null,"tags":["随笔"],"title":"非计算机专业的人如何转行程序员","uri":"https://samzong.me/%E9%9D%9E%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E7%9A%84%E4%BA%BA%E5%A6%82%E4%BD%95%E8%BD%AC%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%91%98/#"},{"categories":null,"content":" MacBookPro 雷电口不可用了不着送修，尝试下一下方法；可以为您省下大几千块钱哟 ~ ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:0:0","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#"},{"categories":null,"content":" 1. 什么是 SMC ？SMC 全称 系统管理控制器负责管理与以下功能相关的行为： 电源，包括电源按钮和 USB 端口的电源 电池和充电 风扇和其他热能管理功能 指示灯或感应器，例如状态指示灯（睡眠状态、电池充电状态等）、突发移动感应器、环境光传感器和键盘背光 打开和合上笔记本电脑盖时的行为 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:1:0","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#什么是-smc-"},{"categories":null,"content":" 2. SMC 常见问题由于Mac的雷电接口经常需要插拔外接设备，而外接设备的接口电流电压不一致，Mac在遇到异常电涌时会触发 SMC 的自我保护机制，通常意义是雷电口不可用。 通过重置系统管理控制器 (SMC) 可以解决某些与电源、电池、风扇和其他功能相关的问题。 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:2:0","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#smc-常见问题"},{"categories":null,"content":" 3. 注意事项新款 Apple M1 设备的重置步骤本文不一致，后续会补充更新 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:3:0","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#注意事项"},{"categories":null,"content":" 4. 配备 T2 芯片的笔记本电脑 将 Mac 关机 在内建键盘上，按住以下所有按键。Mac 可能会开机。 键盘左侧的 Control 键盘左侧的 Option (Alt) 键盘右侧的 Shift 按住全部三个按键 7 秒钟，然后在不松开按键的情况下按住电源按钮。如果 Mac 处于开机状态，它将在您按住这些按键时关机。 继续按住全部四个按键 7 秒钟，然后松开这些按键。 等待几秒钟，然后按下电源按钮以将 Mac 开机。 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:4:0","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#配备-t2-芯片的笔记本电脑"},{"categories":null,"content":" 5. 配备 T2 芯片的台式电脑 将 Mac 关机，然后拔下电源线。 等待 15 秒钟，然后重新接回电源线。 等待 5 秒钟，然后按下电源按钮以将 Mac 开机。 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:5:0","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#配备-t2-芯片的台式电脑"},{"categories":null,"content":" 6. 在其他电脑上重置 SMC如果您的 Mac 没有配备 Apple T2 安全芯片，请按照以下步骤操作。 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:6:0","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#在其他电脑上重置-smc"},{"categories":null,"content":" 6.1 装有不可拆卸电池的笔记本电脑这类电脑包括 2009 年中至 2017 年推出的 MacBook Pro 机型、2017 年或之前推出的 MacBook Air 机型，以及所有 MacBook 机型，但 MacBook（13 英寸，2009 年中）除外。 将 Mac 关机。 在内建键盘上，按住以下所有按键： 键盘左侧的 Shift 键盘左侧的 Control 键盘左侧的 Option (Alt) 在按住全部三个按键的情况下，按住电源按钮。 按住全部四个按键 10 秒钟。 松开所有按键，然后按下电源按钮以将 Mac 开机。 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:6:1","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#装有不可拆卸电池的笔记本电脑"},{"categories":null,"content":" 6.2 装有可拆卸电池的笔记本电脑这类电脑包括 2009 年初或之前推出的所有 MacBook Pro 和 MacBook 机型，以及 MacBook（13 英寸，2009 年中）。 将 Mac 关机。 拆下电池。 按住电源按钮 5 秒钟。 重新安装电池。 按下电源按钮以将 Mac 开机。 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:6:2","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#装有可拆卸电池的笔记本电脑"},{"categories":null,"content":" 6.3 台式电脑 将 Mac 关机，然后拔下电源线。 等待 15 秒钟，然后重新接回电源线。 等待 5 秒钟，然后按下电源按钮以将 Mac 开机。 ","date":"0001-01-01","objectID":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/:6:3","series":null,"tags":["mac"],"title":"如何重置 Mac 的 SMC","uri":"https://samzong.me/%E5%A6%82%E4%BD%95%E9%87%8D%E7%BD%AE-mac-%E7%9A%84-smc/#台式电脑"},{"categories":["Python"],"content":" 在解决将AWS Cloudwatch的监控信息展示在Zabbix上时，需要安装AWS的一个python 工具包boto3，但是在安装过程中，碰到了如上图的错误信息；问题是由于国内网络问题导致连接python库超时，所以将库改为国内 0.0.1 国内pypi源站点 http://pypi.douban.com/simple 豆瓣 http://pypi.hustunique.com/simple 华中理工大学 http://pypi.sdutlinux.org/simple 山东理工大学 http://pypi.mirrors.ustc.edu.cn/simple 中国科学技术大学 0.0.2 Windows 修改编辑 %HOMEPATH%\\pip\\pip.ini [global] index-url = http://pypi.douban.com/simple 0.0.3 Linux 修改编辑 ~/.pip/pip.conf ， 如果文件不存在，可以先创建 [global] index-url = http://pypi.douban.com/simple 0.0.4 修改easy_install 源编辑 ~/.pydistutils.cfg [global] index-url = http://pypi.douban.com/simple 0.0.5 临时使用如果你不想修改源，只是临时使用的话，可以在pip安装时使用-i参数临时指定源站点 pip -i http://pypi.douban.com/simple install boto3 ","date":"0001-01-01","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":["Python"],"title":"使用国内pypi源加速pip安装","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/#"},{"categories":["Python"],"content":" 在解决将AWS Cloudwatch的监控信息展示在Zabbix上时，需要安装AWS的一个python 工具包boto3，但是在安装过程中，碰到了如上图的错误信息；问题是由于国内网络问题导致连接python库超时，所以将库改为国内 0.0.1 国内pypi源站点 http://pypi.douban.com/simple 豆瓣 http://pypi.hustunique.com/simple 华中理工大学 http://pypi.sdutlinux.org/simple 山东理工大学 http://pypi.mirrors.ustc.edu.cn/simple 中国科学技术大学 0.0.2 Windows 修改编辑 %HOMEPATH%\\pip\\pip.ini [global] index-url = http://pypi.douban.com/simple 0.0.3 Linux 修改编辑 ~/.pip/pip.conf ， 如果文件不存在，可以先创建 [global] index-url = http://pypi.douban.com/simple 0.0.4 修改easy_install 源编辑 ~/.pydistutils.cfg [global] index-url = http://pypi.douban.com/simple 0.0.5 临时使用如果你不想修改源，只是临时使用的话，可以在pip安装时使用-i参数临时指定源站点 pip -i http://pypi.douban.com/simple install boto3 ","date":"0001-01-01","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":["Python"],"title":"使用国内pypi源加速pip安装","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/#国内pypi源站点"},{"categories":["Python"],"content":" 在解决将AWS Cloudwatch的监控信息展示在Zabbix上时，需要安装AWS的一个python 工具包boto3，但是在安装过程中，碰到了如上图的错误信息；问题是由于国内网络问题导致连接python库超时，所以将库改为国内 0.0.1 国内pypi源站点 http://pypi.douban.com/simple 豆瓣 http://pypi.hustunique.com/simple 华中理工大学 http://pypi.sdutlinux.org/simple 山东理工大学 http://pypi.mirrors.ustc.edu.cn/simple 中国科学技术大学 0.0.2 Windows 修改编辑 %HOMEPATH%\\pip\\pip.ini [global] index-url = http://pypi.douban.com/simple 0.0.3 Linux 修改编辑 ~/.pip/pip.conf ， 如果文件不存在，可以先创建 [global] index-url = http://pypi.douban.com/simple 0.0.4 修改easy_install 源编辑 ~/.pydistutils.cfg [global] index-url = http://pypi.douban.com/simple 0.0.5 临时使用如果你不想修改源，只是临时使用的话，可以在pip安装时使用-i参数临时指定源站点 pip -i http://pypi.douban.com/simple install boto3 ","date":"0001-01-01","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":["Python"],"title":"使用国内pypi源加速pip安装","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/#windows-修改"},{"categories":["Python"],"content":" 在解决将AWS Cloudwatch的监控信息展示在Zabbix上时，需要安装AWS的一个python 工具包boto3，但是在安装过程中，碰到了如上图的错误信息；问题是由于国内网络问题导致连接python库超时，所以将库改为国内 0.0.1 国内pypi源站点 http://pypi.douban.com/simple 豆瓣 http://pypi.hustunique.com/simple 华中理工大学 http://pypi.sdutlinux.org/simple 山东理工大学 http://pypi.mirrors.ustc.edu.cn/simple 中国科学技术大学 0.0.2 Windows 修改编辑 %HOMEPATH%\\pip\\pip.ini [global] index-url = http://pypi.douban.com/simple 0.0.3 Linux 修改编辑 ~/.pip/pip.conf ， 如果文件不存在，可以先创建 [global] index-url = http://pypi.douban.com/simple 0.0.4 修改easy_install 源编辑 ~/.pydistutils.cfg [global] index-url = http://pypi.douban.com/simple 0.0.5 临时使用如果你不想修改源，只是临时使用的话，可以在pip安装时使用-i参数临时指定源站点 pip -i http://pypi.douban.com/simple install boto3 ","date":"0001-01-01","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":["Python"],"title":"使用国内pypi源加速pip安装","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/#linux-修改"},{"categories":["Python"],"content":" 在解决将AWS Cloudwatch的监控信息展示在Zabbix上时，需要安装AWS的一个python 工具包boto3，但是在安装过程中，碰到了如上图的错误信息；问题是由于国内网络问题导致连接python库超时，所以将库改为国内 0.0.1 国内pypi源站点 http://pypi.douban.com/simple 豆瓣 http://pypi.hustunique.com/simple 华中理工大学 http://pypi.sdutlinux.org/simple 山东理工大学 http://pypi.mirrors.ustc.edu.cn/simple 中国科学技术大学 0.0.2 Windows 修改编辑 %HOMEPATH%\\pip\\pip.ini [global] index-url = http://pypi.douban.com/simple 0.0.3 Linux 修改编辑 ~/.pip/pip.conf ， 如果文件不存在，可以先创建 [global] index-url = http://pypi.douban.com/simple 0.0.4 修改easy_install 源编辑 ~/.pydistutils.cfg [global] index-url = http://pypi.douban.com/simple 0.0.5 临时使用如果你不想修改源，只是临时使用的话，可以在pip安装时使用-i参数临时指定源站点 pip -i http://pypi.douban.com/simple install boto3 ","date":"0001-01-01","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":["Python"],"title":"使用国内pypi源加速pip安装","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/#修改easy_install-源"},{"categories":["Python"],"content":" 在解决将AWS Cloudwatch的监控信息展示在Zabbix上时，需要安装AWS的一个python 工具包boto3，但是在安装过程中，碰到了如上图的错误信息；问题是由于国内网络问题导致连接python库超时，所以将库改为国内 0.0.1 国内pypi源站点 http://pypi.douban.com/simple 豆瓣 http://pypi.hustunique.com/simple 华中理工大学 http://pypi.sdutlinux.org/simple 山东理工大学 http://pypi.mirrors.ustc.edu.cn/simple 中国科学技术大学 0.0.2 Windows 修改编辑 %HOMEPATH%\\pip\\pip.ini [global] index-url = http://pypi.douban.com/simple 0.0.3 Linux 修改编辑 ~/.pip/pip.conf ， 如果文件不存在，可以先创建 [global] index-url = http://pypi.douban.com/simple 0.0.4 修改easy_install 源编辑 ~/.pydistutils.cfg [global] index-url = http://pypi.douban.com/simple 0.0.5 临时使用如果你不想修改源，只是临时使用的话，可以在pip安装时使用-i参数临时指定源站点 pip -i http://pypi.douban.com/simple install boto3 ","date":"0001-01-01","objectID":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":["Python"],"title":"使用国内pypi源加速pip安装","uri":"https://samzong.me/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85pypi%E6%BA%90%E5%8A%A0%E9%80%9Fpip%E5%AE%89%E8%A3%85/#临时使用"},{"categories":["HTML"],"content":" 第一次学习前端项目，帮公司写了个前端页面，没想到现在还在使用。 多丑陋的代码 ~ ","date":"0001-01-01","objectID":"https://samzong.me/%E5%86%99%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/:0:0","series":null,"tags":["HTML"],"title":"写的第一个前端页面","uri":"https://samzong.me/%E5%86%99%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/#"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#ssr-代理服务"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#下载"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#安装配置"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#启动关闭"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#卸载"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#privoxy-配置"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#centos-74"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#ubuntu-1604"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#全局模式"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#pac模式"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#proxy-环境变量"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#代理测试"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#管理脚本"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#使用"},{"categories":["Tools","VPN"],"content":"昨天在群内看到有朋友在询问如何在Linux终端内使用SSR来实现科学上网，所以抽空研究了下在Linux中如何使用，本文参考了Otokaze 和 Django 两位的博客，文章链接在博文最后；SSR服务提供商依然采用了ssGlobal，在Google的过程中，找了不少解决方案，这里仅做一种简单整理，实验操作系统有CentOS 7.4 \u0026 Ubuntu 16.04.3。 0.0.1 ssr 代理服务 0.0.1.1 下载 # 需要本地git 环境 yum install -y git git clone https://github.com/SAMZONG/gfwlist2privoxy.git cd gfwlist2privoxy/ mv ssr /usr/local/bin chmod +x /usr/local/bin/ssr 0.0.1.2 安装配置 [root@localhost ~]# ssr install Cloning into '/usr/local/share/shadowsocksr'... remote: Counting objects: 5490, done. remote: Total 5490 (delta 0), reused 0 (delta 0), pack-reused 5490 Receiving objects: 100% (5490/5490), 1.71 MiB | 410.00 KiB/s, done. Resolving deltas: 100% (3799/3799), done. [root@localhost ~]# ssr config # 配置文件路径 /usr/local/share/shadowsocksr/config.json { \"server\": \"0..0.0.0\", // ssr服务器ip \"server_ipv6\": \"::\", \"server_port\": 8080, // ssr服务器端口 \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"123456\", // 对应password \"method\": \"none\", // 这里对应SSGlobal配置中的Encryption \"protocol\": \"auth_chain_a\", //对应protocl \"protocol_param\": \"\", \"obfs\": \"http_simple\", //对应obfs \"obfs_param\": \"hello.world\", //对应obfs_param \"speed_limit_per_con\": 0, \"speed_limit_per_user\": 0, \"additional_ports\" : {}, // only works under multi-user mode \"additional_ports_only\" : false, // only works under multi-user mode \"timeout\": 120, \"udp_timeout\": 60, \"dns_ipv6\": false, \"connect_verbose_info\": 0, \"redirect\": \"\", \"fast_open\": false } 0.0.1.3 启动/关闭 ssr start ssr stop 0.0.1.4 卸载 ssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr 以上，本地监听服务已经配置完成了，在填写的过程中，要注意你的本地监听地址和监听端口，默认是127.0.0.1:1080，如果你修改了设置，那么在后续配置中也要配合修改。 0.0.2 Privoxy 配置首先，需要安装privoxy 0.0.2.0.1 CentOS 7.4 yum install -y epel-release yum install -y privoxy 0.0.2.0.2 Ubuntu 16.04 apt install -y privoxy 0.0.2.1 全局模式代理模式同其他平台上方式，将所有http/https请求走代理服务，如果需要全局代理的话按照如下操作即可，如果要使用PAC模式，请跳过此部分。 # 添加本地ssr服务到配置文件 echo 'forward-socks5 / 127.0.0.1:1080 .' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.2 PAC模式使用GFWList是由AutoProxy官方维护，由众多网民收集整理的一个中国大陆防火长城的屏蔽列表，这里感谢@Otokaze 为我们提供了转换shell自动转换脚本，为了方便修改，我fork了这个项目，将这篇教程所用到的资源进行了汇总，你可以在最开始git clone的目录中找到执行脚本。 [root@localhost ~]# cd gfwlist2privoxy/ [root@localhost gfwlist2privoxy]# ls gfw.action gfwlist2privoxy README.md ssr [root@localhost gfwlist2privoxy]# bash gfwlist2privoxy proxy(socks5): 127.0.0.1:1080 # 注意，如果你修改了ssr本地监听端口是需要设置对应的 {+forward-override{forward-socks5 127.0.0.1:1080 .}} ================================================================= \"cp -af /root/gfwlist2privoxy/gfw.action /etc/privoxy/\" [root@localhost ~]# cp -af gfw.action /etc/privoxy/ [root@localhost ~]# echo 'actionsfile gfw.action' \u003e\u003e /etc/privoxy/config # Privoxy 默认监听端口是是8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # 启动服务 systemctl start privoxy.service 0.0.2.3 proxy 环境变量 # privoxy默认监听端口为8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost # no_proxy是不经过privoxy代理的地址 # 只能填写具体的ip、域名后缀，多个条目之间使用','逗号隔开 # 比如: export no_proxy=\"localhost, 192.168.1.1, ip.cn, chinaz.com\" # 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理 0.0.3 代理测试 # 访问各大网站，如果都有网页源码输出说明代理没问题 curl -sL www.baidu.com curl -sL www.google.com curl -sL www.google.com.hk curl -sL www.google.co.jp curl -sL www.youtube.com curl -sL mail.google.com curl -sL facebook.com curl -sL twitter.com curl -sL www.wikipedia.org # 获取当前 IP 地址 # 如果使用 privoxy 全局模式，则应该显示 ss 服务器的 IP # 如果使用 privoxy gfwlist模式，则应该显示本地公网 IP curl -sL ip.chinaz.com/getip.aspx 0.0.3.1 管理脚本在以上部署操作完成后，应该已经可以正常科学上网了，但是如果需要进行管理时，需要分别管理ssr和privoxy，为了方便管理，这里写了一个shell脚本方便管理: ssr_manager #!/bin/bash # Author Samzong.lu case $1 in start) ssr start \u0026\u003e /var/log/ssr-local.log systemctl start privoxy.service export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=\"local","date":"0001-01-01","objectID":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","series":null,"tags":["VPN"],"title":"在Linux终端使用SSR服务实现科学上网","uri":"https://samzong.me/%E5%9C%A8linux%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8ssr%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/#参考链接"}]